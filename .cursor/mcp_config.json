{
  "mcpServers": {
    "claude-opera": {
      "command": "node",
      "args": ["/Users/nissimmenashe/VERSATIL SDLC FW/bin/versatil-mcp.js", "/Users/nissimmenashe/VERSATIL SDLC FW"],
      "cwd": "/Users/nissimmenashe/VERSATIL SDLC FW",
      "env": {
        "NODE_ENV": "production",
        "VERSATIL_MCP_MODE": "true",
        "VERSATIL_HOME": "~/.versatil",
        "VERSATIL_PROJECT_PATH": "/Users/nissimmenashe/VERSATIL SDLC FW",
        "VERSATIL_RULES_ENABLED": "true",
        "RULE_1_PARALLEL_EXECUTION": "true",
        "RULE_2_STRESS_TESTING": "true",
        "RULE_3_DAILY_AUDIT": "true",
        "RULE_4_ONBOARDING": "true",
        "RULE_5_RELEASES": "true"
      }
    },
    "playwright": {
      "command": "npx",
      "args": ["-y", "@playwright/mcp@latest"],
      "env": {
        "PLAYWRIGHT_BROWSERS_PATH": "~/.cache/ms-playwright"
      },
      "description": "Official Microsoft Playwright MCP for browser automation (Maria-QA, James-Frontend)"
    },
    "playwright-stealth": {
      "command": "node",
      "args": ["/Users/nissimmenashe/VERSATIL SDLC FW/bin/versatil-mcp.js"],
      "env": {
        "VERSATIL_STEALTH_MODE": "true",
        "VERSATIL_RATE_LIMIT": "2000"
      },
      "description": "Playwright Stealth for bot detection bypass + design scraping (James-Frontend, Maria-QA). 92% effectiveness, ethical rate limiting, legal scraping only."
    },
    "github": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_TOKEN": "${GITHUB_TOKEN}"
      },
      "description": "Official GitHub MCP for repository operations (Marcus-Backend, Sarah-PM, Alex-BA)"
    },
    "exa": {
      "command": "npx",
      "args": ["-y", "exa-mcp-server"],
      "env": {
        "EXA_API_KEY": "${EXA_API_KEY}"
      },
      "description": "Official Exa Labs MCP for AI-powered search and research (Alex-BA, Dr.AI-ML)"
    },
    "vertex-ai": {
      "command": "npx",
      "args": ["-y", "vertex-ai-mcp-server"],
      "env": {
        "GOOGLE_CLOUD_PROJECT": "${GOOGLE_CLOUD_PROJECT}",
        "GOOGLE_CLOUD_LOCATION": "${GOOGLE_CLOUD_LOCATION}",
        "GOOGLE_APPLICATION_CREDENTIALS": "${GOOGLE_APPLICATION_CREDENTIALS}"
      },
      "description": "Google Cloud Vertex AI MCP with Gemini models (Dr.AI-ML, Marcus-Backend)"
    },
    "supabase": {
      "command": "npx",
      "args": ["-y", "supabase-mcp"],
      "env": {
        "SUPABASE_URL": "${SUPABASE_URL}",
        "SUPABASE_ANON_KEY": "${SUPABASE_ANON_KEY}",
        "SUPABASE_SERVICE_KEY": "${SUPABASE_SERVICE_KEY}"
      },
      "description": "Supabase MCP for database and vector operations (Marcus-Backend, Dr.AI-ML)"
    },
    "n8n": {
      "command": "npx",
      "args": ["-y", "n8n-nodes-mcp"],
      "env": {
        "N8N_BASE_URL": "${N8N_BASE_URL}",
        "N8N_API_KEY": "${N8N_API_KEY}"
      },
      "description": "n8n MCP for workflow automation (Sarah-PM, Marcus, Maria-QA)"
    },
    "semgrep": {
      "command": "npx",
      "args": ["-y", "semgrep-mcp"],
      "env": {
        "SEMGREP_API_KEY": "${SEMGREP_API_KEY}",
        "SEMGREP_APP_URL": "${SEMGREP_APP_URL}"
      },
      "description": "Semgrep MCP for security scanning (Marcus-Backend, Maria-QA, Dr.AI-ML)"
    },
    "sentry": {
      "command": "npx",
      "args": ["-y", "sentry-mcp-stdio"],
      "env": {
        "SENTRY_DSN": "${SENTRY_DSN}",
        "SENTRY_AUTH_TOKEN": "${SENTRY_AUTH_TOKEN}",
        "SENTRY_ORG": "${SENTRY_ORG}"
      },
      "description": "Sentry MCP for error monitoring with AI-powered analysis (Maria-QA, Marcus, Sarah-PM)"
    },
    "claude-code-mcp": {
      "command": "npx",
      "args": ["-y", "@steipete/claude-code-mcp@latest"],
      "env": {
        "MCP_CLAUDE_DEBUG": "false"
      }
    },
    "gitmcp": {
      "command": "npx",
      "args": ["-y", "mcp-remote", "https://gitmcp.io/docs"],
      "description": "GitMCP for GitHub repository documentation access (Alex-BA, Marcus, James, Dr.AI-ML)"
    }
  },
  "documentation_access": {
    "claude_cookbooks": {
      "description": "Claude official cookbooks with Memory Tool, Context Editing, and tool use examples",
      "access_method": "github MCP server",
      "repository": "anthropics/claude-cookbooks",
      "local_clone": "~/.versatil/docs/claude-cookbooks/",
      "key_resources": {
        "memory_tool": {
          "cookbook": "tool_use/memory_cookbook.ipynb",
          "implementation": "tool_use/memory_tool.py",
          "tests": "tool_use/tests/test_memory_tool.py",
          "demo": "tool_use/memory_demo/"
        },
        "extended_thinking": {
          "examples": "extended_thinking/"
        },
        "claude_code_sdk": {
          "examples": "claude_code_sdk/"
        },
        "capabilities": {
          "contextual_embeddings": "capabilities/contextual-embeddings/",
          "multimodal": "capabilities/"
        }
      },
      "update_command": "cd ~/.versatil/docs/claude-cookbooks/ && git pull",
      "usage": "Read local files or use GitHub MCP for real-time access"
    },
    "claude_official_docs": {
      "description": "Claude official documentation via WebFetch",
      "access_method": "WebFetch tool",
      "base_url": "https://docs.claude.com/en/docs",
      "key_endpoints": {
        "memory_tool": "/agents-and-tools/tool-use/memory-tool",
        "context_editing": "/build-with-claude/context-editing",
        "agents": "/build-with-claude/agents",
        "api_reference": "/api"
      },
      "usage": "WebFetch('https://docs.claude.com/en/docs/...')"
    }
  },
  "versatil_rule_integration": {
    "rule_1_parallel_execution": {
      "mcp_tools": [
        "parallel_task_manager",
        "collision_detector",
        "resource_monitor",
        "agent_coordinator"
      ],
      "ai_assistance": {
        "suggest_parallelization": true,
        "detect_conflicts": true,
        "optimize_resources": true,
        "balance_workload": true
      },
      "monitoring": {
        "real_time_tracking": true,
        "performance_metrics": true,
        "collision_alerts": true,
        "optimization_suggestions": true
      }
    },
    "rule_2_stress_testing": {
      "mcp_tools": [
        "stress_test_generator",
        "test_orchestrator",
        "performance_analyzer",
        "regression_detector"
      ],
      "ai_assistance": {
        "generate_scenarios": true,
        "identify_bottlenecks": true,
        "recommend_patterns": true,
        "predict_scaling": true
      },
      "integration": {
        "maria_qa_coordination": true,
        "real_time_feedback": true,
        "baseline_tracking": true,
        "quality_gates": true
      }
    },
    "rule_3_daily_audit": {
      "mcp_tools": [
        "audit_orchestrator",
        "health_monitor",
        "compliance_checker",
        "trend_analyzer"
      ],
      "ai_assistance": {
        "health_analysis": true,
        "predictive_detection": true,
        "remediation_suggestions": true,
        "compliance_monitoring": true
      },
      "notifications": {
        "cursor_alerts": true,
        "threshold_warnings": true,
        "trend_reports": true,
        "executive_summaries": true
      }
    }
  },
  "cross_rule_coordination": {
    "enabled": true,
    "orchestrator": "versatil_orchestrator",
    "rule_interactions": {
      "rule_1_to_2": {
        "trigger": "task_completion",
        "action": "generate_stress_tests",
        "ai_role": "suggest_test_scenarios"
      },
      "rule_2_to_3": {
        "trigger": "performance_issues",
        "action": "trigger_audit",
        "ai_role": "analyze_results"
      },
      "rule_3_to_1": {
        "trigger": "optimization_opportunities",
        "action": "create_parallel_tasks",
        "ai_role": "recommend_strategies"
      }
    },
    "ai_enhancements": {
      "rule_aware_suggestions": true,
      "cross_rule_optimization": true,
      "predictive_assistance": true,
      "conflict_resolution": true
    }
  },
  "mcp_tool_mappings": {
    "parallel_execution": {
      "namespace": "versatil.rules.parallel",
      "tools": [
        "execute_parallel_tasks",
        "detect_collisions",
        "optimize_resources",
        "monitor_performance"
      ]
    },
    "stress_testing": {
      "namespace": "versatil.rules.stress",
      "tools": [
        "generate_stress_tests",
        "execute_tests",
        "analyze_results",
        "track_regression"
      ]
    },
    "daily_audit": {
      "namespace": "versatil.rules.audit",
      "tools": [
        "run_audit",
        "monitor_health",
        "check_compliance",
        "analyze_trends"
      ]
    },
    "orchestration": {
      "namespace": "versatil.orchestrator",
      "tools": [
        "coordinate_rules",
        "optimize_cross_rule",
        "resolve_conflicts",
        "track_metrics"
      ]
    }
  }
}