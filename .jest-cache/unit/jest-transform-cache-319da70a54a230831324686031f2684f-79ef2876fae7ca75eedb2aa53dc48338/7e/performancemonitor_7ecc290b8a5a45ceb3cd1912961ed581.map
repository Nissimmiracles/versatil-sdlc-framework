{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/src/analytics/performance-monitor.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/src/analytics/performance-monitor.ts"],"sourcesContent":["/**\n * VERSATIL SDLC Framework - Performance Monitoring & Analytics System\n *\n * Real-time performance monitoring for Enhanced OPERA agents with\n * comprehensive analytics, metrics collection, and alerting capabilities.\n */\n\nimport { EventEmitter } from 'events';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface PerformanceMetric {\n  id: string;\n  timestamp: number;\n  agentId: string;\n  metricType: 'execution_time' | 'memory_usage' | 'cpu_usage' | 'issue_detection' | 'quality_score';\n  value: number;\n  context?: Record<string, any>;\n  threshold?: number;\n  status: 'normal' | 'warning' | 'critical';\n}\n\nexport interface AgentPerformanceData {\n  agentId: string;\n  totalExecutions: number;\n  averageExecutionTime: number;\n  maxExecutionTime: number;\n  minExecutionTime: number;\n  successRate: number;\n  issuesDetected: number;\n  averageQualityScore: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  lastExecution: number;\n  trend: 'improving' | 'stable' | 'declining';\n}\n\nexport interface SystemPerformanceData {\n  timestamp: number;\n  overallHealth: number;\n  totalAgentExecutions: number;\n  averageResponseTime: number;\n  systemLoad: number;\n  memoryUsage: number;\n  activeAgents: number;\n  criticalIssues: number;\n  highPriorityIssues: number;\n  qualityGateStatus: 'passing' | 'warning' | 'failing';\n}\n\nexport interface PerformanceAlert {\n  id: string;\n  timestamp: number;\n  severity: 'info' | 'warning' | 'critical';\n  agentId?: string;\n  message: string;\n  metric: string;\n  value: number;\n  threshold: number;\n  action: string;\n}\n\nexport class PerformanceMonitor extends EventEmitter {\n  private metrics: Map<string, PerformanceMetric[]> = new Map();\n  private agentPerformance: Map<string, AgentPerformanceData> = new Map();\n  private alerts: PerformanceAlert[] = [];\n  private isMonitoring: boolean = false;\n  private metricsStorePath: string;\n  private alertThresholds: Map<string, number> = new Map();\n\n  constructor() {\n    super();\n    this.metricsStorePath = path.join(process.cwd(), '.versatil', 'analytics');\n    this.initializeThresholds();\n    this.ensureStorageDirectory();\n    this.loadHistoricalData();\n  }\n\n  private initializeThresholds(): void {\n    this.alertThresholds.set('execution_time', 5000); // 5 seconds\n    this.alertThresholds.set('memory_usage', 100); // 100MB\n    this.alertThresholds.set('cpu_usage', 80); // 80%\n    this.alertThresholds.set('quality_score', 70); // 70% minimum\n    this.alertThresholds.set('issue_detection', 10); // 10+ issues per execution\n  }\n\n  private ensureStorageDirectory(): void {\n    if (!fs.existsSync(this.metricsStorePath)) {\n      fs.mkdirSync(this.metricsStorePath, { recursive: true });\n    }\n  }\n\n  private loadHistoricalData(): void {\n    try {\n      const metricsFile = path.join(this.metricsStorePath, 'metrics.json');\n      if (fs.existsSync(metricsFile)) {\n        const data = JSON.parse(fs.readFileSync(metricsFile, 'utf8'));\n        this.metrics = new Map(Object.entries(data.metrics || {}));\n        this.agentPerformance = new Map(Object.entries(data.agentPerformance || {}));\n      }\n    } catch (error) {\n      console.warn('Could not load historical performance data:', error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  /**\n   * Start performance monitoring\n   */\n  public startMonitoring(): void {\n    if (this.isMonitoring) return;\n\n    this.isMonitoring = true;\n    console.log('🔍 Performance monitoring started');\n\n    // Collect system metrics every 30 seconds\n    setInterval(() => {\n      this.collectSystemMetrics();\n    }, 30000);\n\n    // Save metrics every 5 minutes\n    setInterval(() => {\n      this.saveMetrics();\n    }, 300000);\n\n    // Cleanup old metrics every hour\n    setInterval(() => {\n      this.cleanupOldMetrics();\n    }, 3600000);\n\n    this.emit('monitoring-started');\n  }\n\n  /**\n   * Stop performance monitoring\n   */\n  public stopMonitoring(): void {\n    this.isMonitoring = false;\n    this.saveMetrics();\n    console.log('🛑 Performance monitoring stopped');\n    this.emit('monitoring-stopped');\n  }\n\n  /**\n   * Record agent execution performance\n   */\n  public recordAgentExecution(\n    agentId: string,\n    executionTime: number,\n    issuesDetected: number,\n    qualityScore: number,\n    success: boolean,\n    context?: Record<string, any>\n  ): void {\n    const timestamp = Date.now();\n\n    // Record execution time metric\n    const execMetric: PerformanceMetric = {\n      id: `${agentId}-exec-${timestamp}`,\n      timestamp,\n      agentId,\n      metricType: 'execution_time',\n      value: executionTime,\n      status: this.getMetricStatus('execution_time', executionTime)\n    };\n    if (context) execMetric.context = context;\n    const execThreshold = this.alertThresholds.get('execution_time');\n    if (execThreshold !== undefined) execMetric.threshold = execThreshold;\n    this.recordMetric(execMetric);\n\n    // Record issues detected metric\n    const issuesMetric: PerformanceMetric = {\n      id: `${agentId}-issues-${timestamp}`,\n      timestamp,\n      agentId,\n      metricType: 'issue_detection',\n      value: issuesDetected,\n      status: this.getMetricStatus('issue_detection', issuesDetected)\n    };\n    if (context) issuesMetric.context = context;\n    const issuesThreshold = this.alertThresholds.get('issue_detection');\n    if (issuesThreshold !== undefined) issuesMetric.threshold = issuesThreshold;\n    this.recordMetric(issuesMetric);\n\n    // Record quality score metric\n    const qualityMetric: PerformanceMetric = {\n      id: `${agentId}-quality-${timestamp}`,\n      timestamp,\n      agentId,\n      metricType: 'quality_score',\n      value: qualityScore,\n      status: this.getMetricStatus('quality_score', qualityScore)\n    };\n    if (context) qualityMetric.context = context;\n    const qualityThreshold = this.alertThresholds.get('quality_score');\n    if (qualityThreshold !== undefined) qualityMetric.threshold = qualityThreshold;\n    this.recordMetric(qualityMetric);\n\n    // Update agent performance data\n    this.updateAgentPerformance(agentId, executionTime, issuesDetected, qualityScore, success);\n\n    // Check for alerts\n    this.checkAlerts(agentId, executionTime, issuesDetected, qualityScore);\n\n    this.emit('agent-execution-recorded', { agentId, executionTime, issuesDetected, qualityScore, success });\n  }\n\n  /**\n   * Record system resource metrics\n   */\n  private collectSystemMetrics(): void {\n    const timestamp = Date.now();\n\n    // Get memory usage\n    const memoryUsage = process.memoryUsage();\n    const memoryValue = memoryUsage.heapUsed / 1024 / 1024; // MB\n    const memoryMetric: PerformanceMetric = {\n      id: `system-memory-${timestamp}`,\n      timestamp,\n      agentId: 'system',\n      metricType: 'memory_usage',\n      value: memoryValue,\n      status: this.getMetricStatus('memory_usage', memoryValue)\n    };\n    const memoryThreshold = this.alertThresholds.get('memory_usage');\n    if (memoryThreshold !== undefined) memoryMetric.threshold = memoryThreshold;\n    this.recordMetric(memoryMetric);\n\n    // Get CPU usage (approximation)\n    const cpuUsage = process.cpuUsage();\n    const cpuPercent = (cpuUsage.user + cpuUsage.system) / 1000000; // Convert to percentage\n    const cpuMetric: PerformanceMetric = {\n      id: `system-cpu-${timestamp}`,\n      timestamp,\n      agentId: 'system',\n      metricType: 'cpu_usage',\n      value: cpuPercent,\n      status: this.getMetricStatus('cpu_usage', cpuPercent)\n    };\n    const cpuThreshold = this.alertThresholds.get('cpu_usage');\n    if (cpuThreshold !== undefined) cpuMetric.threshold = cpuThreshold;\n    this.recordMetric(cpuMetric);\n  }\n\n  /**\n   * Record a performance metric\n   */\n  private recordMetric(metric: PerformanceMetric): void {\n    if (!this.metrics.has(metric.agentId)) {\n      this.metrics.set(metric.agentId, []);\n    }\n\n    this.metrics.get(metric.agentId)!.push(metric);\n\n    // Emit metric recorded event\n    this.emit('metric-recorded', metric);\n\n    // Log critical metrics\n    if (metric.status === 'critical') {\n      console.warn(`🚨 Critical metric: ${metric.agentId} ${metric.metricType} = ${metric.value}`);\n    }\n  }\n\n  /**\n   * Update agent performance data\n   */\n  private updateAgentPerformance(\n    agentId: string,\n    executionTime: number,\n    issuesDetected: number,\n    qualityScore: number,\n    success: boolean\n  ): void {\n    let performance = this.agentPerformance.get(agentId);\n\n    if (!performance) {\n      performance = {\n        agentId,\n        totalExecutions: 0,\n        averageExecutionTime: 0,\n        maxExecutionTime: 0,\n        minExecutionTime: Infinity,\n        successRate: 0,\n        issuesDetected: 0,\n        averageQualityScore: 0,\n        memoryUsage: 0,\n        cpuUsage: 0,\n        lastExecution: 0,\n        trend: 'stable'\n      };\n    }\n\n    // Update execution statistics\n    performance.totalExecutions++;\n    performance.averageExecutionTime =\n      (performance.averageExecutionTime * (performance.totalExecutions - 1) + executionTime) / performance.totalExecutions;\n    performance.maxExecutionTime = Math.max(performance.maxExecutionTime, executionTime);\n    performance.minExecutionTime = Math.min(performance.minExecutionTime, executionTime);\n    performance.issuesDetected += issuesDetected;\n    performance.averageQualityScore =\n      (performance.averageQualityScore * (performance.totalExecutions - 1) + qualityScore) / performance.totalExecutions;\n    performance.lastExecution = Date.now();\n\n    // Calculate success rate\n    const successCount = success ? 1 : 0;\n    performance.successRate =\n      (performance.successRate * (performance.totalExecutions - 1) + successCount) / performance.totalExecutions;\n\n    // Determine trend\n    performance.trend = this.calculateTrend(agentId, performance);\n\n    this.agentPerformance.set(agentId, performance);\n  }\n\n  /**\n   * Calculate performance trend\n   */\n  private calculateTrend(agentId: string, current: AgentPerformanceData): 'improving' | 'stable' | 'declining' {\n    const recentMetrics = this.getRecentMetrics(agentId, 10);\n    if (recentMetrics.length < 5) return 'stable';\n\n    const recentExecutionTimes = recentMetrics\n      .filter(m => m.metricType === 'execution_time')\n      .map(m => m.value);\n\n    const recentQualityScores = recentMetrics\n      .filter(m => m.metricType === 'quality_score')\n      .map(m => m.value);\n\n    if (recentExecutionTimes.length < 3 || recentQualityScores.length < 3) return 'stable';\n\n    // Check execution time trend (lower is better)\n    const avgRecentExecTime = recentExecutionTimes.slice(-3).reduce((a, b) => a + b, 0) / 3;\n    const avgOlderExecTime = recentExecutionTimes.slice(0, 3).reduce((a, b) => a + b, 0) / 3;\n\n    // Check quality score trend (higher is better)\n    const avgRecentQuality = recentQualityScores.slice(-3).reduce((a, b) => a + b, 0) / 3;\n    const avgOlderQuality = recentQualityScores.slice(0, 3).reduce((a, b) => a + b, 0) / 3;\n\n    const execTimeImproving = avgRecentExecTime < avgOlderExecTime * 0.95;\n    const qualityImproving = avgRecentQuality > avgOlderQuality * 1.05;\n\n    const execTimeDeclining = avgRecentExecTime > avgOlderExecTime * 1.05;\n    const qualityDeclining = avgRecentQuality < avgOlderQuality * 0.95;\n\n    if (execTimeImproving || qualityImproving) return 'improving';\n    if (execTimeDeclining || qualityDeclining) return 'declining';\n    return 'stable';\n  }\n\n  /**\n   * Check for performance alerts\n   */\n  private checkAlerts(agentId: string, executionTime: number, issuesDetected: number, qualityScore: number): void {\n    const timestamp = Date.now();\n\n    // Execution time alert\n    const execThreshold = this.alertThresholds.get('execution_time')!;\n    if (executionTime > execThreshold) {\n      this.createAlert({\n        id: `exec-alert-${agentId}-${timestamp}`,\n        timestamp,\n        severity: executionTime > execThreshold * 2 ? 'critical' : 'warning',\n        agentId,\n        message: `Agent ${agentId} execution time exceeded threshold`,\n        metric: 'execution_time',\n        value: executionTime,\n        threshold: execThreshold,\n        action: 'Review agent implementation for performance bottlenecks'\n      });\n    }\n\n    // Quality score alert\n    const qualityThreshold = this.alertThresholds.get('quality_score')!;\n    if (qualityScore < qualityThreshold) {\n      this.createAlert({\n        id: `quality-alert-${agentId}-${timestamp}`,\n        timestamp,\n        severity: qualityScore < qualityThreshold * 0.5 ? 'critical' : 'warning',\n        agentId,\n        message: `Agent ${agentId} quality score below threshold`,\n        metric: 'quality_score',\n        value: qualityScore,\n        threshold: qualityThreshold,\n        action: 'Review agent validation logic and enhance detection capabilities'\n      });\n    }\n\n    // Issues detected alert\n    const issuesThreshold = this.alertThresholds.get('issue_detection')!;\n    if (issuesDetected > issuesThreshold) {\n      this.createAlert({\n        id: `issues-alert-${agentId}-${timestamp}`,\n        timestamp,\n        severity: 'info',\n        agentId,\n        message: `Agent ${agentId} detected high number of issues`,\n        metric: 'issue_detection',\n        value: issuesDetected,\n        threshold: issuesThreshold,\n        action: 'Review codebase quality and address detected issues'\n      });\n    }\n  }\n\n  /**\n   * Create performance alert\n   */\n  private createAlert(alert: PerformanceAlert): void {\n    this.alerts.push(alert);\n\n    // Keep only last 1000 alerts\n    if (this.alerts.length > 1000) {\n      this.alerts = this.alerts.slice(-1000);\n    }\n\n    console.log(`🚨 Alert: ${alert.severity.toUpperCase()} - ${alert.message}`);\n    this.emit('alert-created', alert);\n  }\n\n  /**\n   * Get metric status based on thresholds\n   */\n  private getMetricStatus(metricType: string, value: number): 'normal' | 'warning' | 'critical' {\n    const threshold = this.alertThresholds.get(metricType);\n    if (!threshold) return 'normal';\n\n    switch (metricType) {\n      case 'execution_time':\n      case 'memory_usage':\n      case 'cpu_usage':\n      case 'issue_detection':\n        if (value > threshold * 2) return 'critical';\n        if (value > threshold) return 'warning';\n        return 'normal';\n\n      case 'quality_score':\n        if (value < threshold * 0.5) return 'critical';\n        if (value < threshold) return 'warning';\n        return 'normal';\n\n      default:\n        return 'normal';\n    }\n  }\n\n  /**\n   * Get recent metrics for an agent\n   */\n  private getRecentMetrics(agentId: string, count: number): PerformanceMetric[] {\n    const agentMetrics = this.metrics.get(agentId) || [];\n    return agentMetrics\n      .sort((a, b) => b.timestamp - a.timestamp)\n      .slice(0, count);\n  }\n\n  /**\n   * Get performance dashboard data\n   */\n  public getPerformanceDashboard(): {\n    system: SystemPerformanceData;\n    agents: AgentPerformanceData[];\n    recentAlerts: PerformanceAlert[];\n    trends: Record<string, any>;\n  } {\n    const systemData = this.getSystemPerformanceData();\n    const agentData = Array.from(this.agentPerformance.values());\n    const recentAlerts = this.alerts.slice(-20);\n    const trends = this.calculateSystemTrends();\n\n    return {\n      system: systemData,\n      agents: agentData,\n      recentAlerts,\n      trends\n    };\n  }\n\n  /**\n   * Get system performance data\n   */\n  private getSystemPerformanceData(): SystemPerformanceData {\n    const timestamp = Date.now();\n    const allAgents = Array.from(this.agentPerformance.values());\n\n    const totalExecutions = allAgents.reduce((sum, agent) => sum + agent.totalExecutions, 0);\n    const averageResponseTime = allAgents.reduce((sum, agent) => sum + agent.averageExecutionTime, 0) / allAgents.length || 0;\n    const overallQuality = allAgents.reduce((sum, agent) => sum + agent.averageQualityScore, 0) / allAgents.length || 100;\n\n    const recentAlerts = this.alerts.filter(alert => timestamp - alert.timestamp < 3600000); // Last hour\n    const criticalIssues = recentAlerts.filter(alert => alert.severity === 'critical').length;\n    const highPriorityIssues = recentAlerts.filter(alert => alert.severity === 'warning').length;\n\n    // Get latest system metrics\n    const systemMetrics = this.metrics.get('system') || [];\n    const latestMemory = systemMetrics\n      .filter(m => m.metricType === 'memory_usage')\n      .sort((a, b) => b.timestamp - a.timestamp)[0]?.value || 0;\n\n    return {\n      timestamp,\n      overallHealth: Math.min(100, overallQuality - (criticalIssues * 10) - (highPriorityIssues * 5)),\n      totalAgentExecutions: totalExecutions,\n      averageResponseTime,\n      systemLoad: averageResponseTime > 2000 ? (averageResponseTime / 1000) * 10 : 10,\n      memoryUsage: latestMemory,\n      activeAgents: allAgents.length,\n      criticalIssues,\n      highPriorityIssues,\n      qualityGateStatus: criticalIssues > 0 ? 'failing' : highPriorityIssues > 5 ? 'warning' : 'passing'\n    };\n  }\n\n  /**\n   * Calculate system trends\n   */\n  private calculateSystemTrends(): Record<string, any> {\n    const trends: Record<string, any> = {};\n\n    // Calculate trends for each agent\n    for (const [agentId, performance] of this.agentPerformance) {\n      trends[agentId] = {\n        performance: performance.trend,\n        executionTime: this.calculateMetricTrend(agentId, 'execution_time'),\n        qualityScore: this.calculateMetricTrend(agentId, 'quality_score'),\n        issuesDetected: this.calculateMetricTrend(agentId, 'issue_detection')\n      };\n    }\n\n    return trends;\n  }\n\n  /**\n   * Calculate trend for specific metric\n   */\n  private calculateMetricTrend(agentId: string, metricType: string): 'improving' | 'stable' | 'declining' {\n    const recentMetrics = this.getRecentMetrics(agentId, 20)\n      .filter(m => m.metricType === metricType);\n\n    if (recentMetrics.length < 10) return 'stable';\n\n    const firstHalf = recentMetrics.slice(0, 10);\n    const secondHalf = recentMetrics.slice(10);\n\n    const firstAvg = firstHalf.reduce((sum, m) => sum + m.value, 0) / firstHalf.length;\n    const secondAvg = secondHalf.reduce((sum, m) => sum + m.value, 0) / secondHalf.length;\n\n    const threshold = 0.05; // 5% change threshold\n\n    if (metricType === 'quality_score') {\n      // For quality score, higher is better\n      if (secondAvg > firstAvg * (1 + threshold)) return 'improving';\n      if (secondAvg < firstAvg * (1 - threshold)) return 'declining';\n    } else {\n      // For execution time and issues, lower is better\n      if (secondAvg < firstAvg * (1 - threshold)) return 'improving';\n      if (secondAvg > firstAvg * (1 + threshold)) return 'declining';\n    }\n\n    return 'stable';\n  }\n\n  /**\n   * Save metrics to disk\n   */\n  private saveMetrics(): void {\n    try {\n      const data = {\n        metrics: Object.fromEntries(this.metrics),\n        agentPerformance: Object.fromEntries(this.agentPerformance),\n        alerts: this.alerts.slice(-1000), // Keep last 1000 alerts\n        lastSaved: Date.now()\n      };\n\n      const metricsFile = path.join(this.metricsStorePath, 'metrics.json');\n      fs.writeFileSync(metricsFile, JSON.stringify(data, null, 2));\n    } catch (error) {\n      console.error('Failed to save performance metrics:', error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  /**\n   * Cleanup old metrics (keep last 7 days)\n   */\n  private cleanupOldMetrics(): void {\n    const cutoffTime = Date.now() - (7 * 24 * 60 * 60 * 1000); // 7 days\n\n    for (const [agentId, metrics] of this.metrics) {\n      const filteredMetrics = metrics.filter(metric => metric.timestamp > cutoffTime);\n      this.metrics.set(agentId, filteredMetrics);\n    }\n\n    // Cleanup old alerts\n    this.alerts = this.alerts.filter(alert => alert.timestamp > cutoffTime);\n  }\n\n  /**\n   * Export performance report\n   */\n  public exportReport(format: 'json' | 'csv' = 'json'): string {\n    const dashboard = this.getPerformanceDashboard();\n\n    if (format === 'json') {\n      return JSON.stringify(dashboard, null, 2);\n    }\n\n    // CSV format\n    let csv = 'Agent,Total Executions,Avg Execution Time,Max Execution Time,Success Rate,Avg Quality Score,Issues Detected,Trend\\n';\n\n    dashboard.agents.forEach(agent => {\n      csv += `${agent.agentId},${agent.totalExecutions},${agent.averageExecutionTime.toFixed(2)},${agent.maxExecutionTime},${(agent.successRate * 100).toFixed(1)}%,${agent.averageQualityScore.toFixed(1)},${agent.issuesDetected},${agent.trend}\\n`;\n    });\n\n    return csv;\n  }\n\n  /**\n   * Get agent performance summary\n   */\n  public getAgentSummary(agentId: string): AgentPerformanceData | null {\n    return this.agentPerformance.get(agentId) || null;\n  }\n\n  /**\n   * Get system health score\n   */\n  public getSystemHealthScore(): number {\n    return this.getSystemPerformanceData().overallHealth;\n  }\n\n  /**\n   * Get active alerts\n   */\n  public getActiveAlerts(): PerformanceAlert[] {\n    const oneHourAgo = Date.now() - 3600000;\n    return this.alerts.filter(alert => alert.timestamp > oneHourAgo);\n  }\n\n  /**\n   * Start monitoring (for server integration)\n   */\n  public start(): void {\n    if (!this.isMonitoring) {\n      this.startMonitoring();\n    }\n  }\n\n  /**\n   * Get Prometheus-compatible metrics\n   */\n  public getPrometheusMetrics(): string {\n    const dashboard = this.getPerformanceDashboard();\n    let metrics = '';\n\n    // System metrics\n    metrics += `# HELP versatil_system_health Overall system health score\\n`;\n    metrics += `# TYPE versatil_system_health gauge\\n`;\n    metrics += `versatil_system_health ${dashboard.system.overallHealth}\\n\\n`;\n\n    metrics += `# HELP versatil_total_executions Total agent executions\\n`;\n    metrics += `# TYPE versatil_total_executions counter\\n`;\n    metrics += `versatil_total_executions ${dashboard.system.totalAgentExecutions}\\n\\n`;\n\n    metrics += `# HELP versatil_response_time_avg Average response time\\n`;\n    metrics += `# TYPE versatil_response_time_avg gauge\\n`;\n    metrics += `versatil_response_time_avg ${dashboard.system.averageResponseTime}\\n\\n`;\n\n    // Agent-specific metrics\n    dashboard.agents.forEach(agent => {\n      metrics += `# HELP versatil_agent_executions Agent execution count\\n`;\n      metrics += `# TYPE versatil_agent_executions counter\\n`;\n      metrics += `versatil_agent_executions{agent=\"${agent.agentId}\"} ${agent.totalExecutions}\\n\\n`;\n\n      metrics += `# HELP versatil_agent_quality_score Agent quality score\\n`;\n      metrics += `# TYPE versatil_agent_quality_score gauge\\n`;\n      metrics += `versatil_agent_quality_score{agent=\"${agent.agentId}\"} ${agent.averageQualityScore}\\n\\n`;\n\n      metrics += `# HELP versatil_agent_issues_detected Issues detected by agent\\n`;\n      metrics += `# TYPE versatil_agent_issues_detected counter\\n`;\n      metrics += `versatil_agent_issues_detected{agent=\"${agent.agentId}\"} ${agent.issuesDetected}\\n\\n`;\n    });\n\n    return metrics;\n  }\n\n  getMetrics(): any {\n    return this.getPerformanceDashboard();\n  }\n\n  getAdaptiveInsights(): any {\n    return {\n      trends: this.calculateSystemTrends(),\n      health: this.getSystemHealthScore(),\n      recommendations: []\n    };\n  }\n\n  isHealthy(): boolean {\n    return this.getSystemHealthScore() >= 70;\n  }\n}\n\n// Export singleton instance\nexport const performanceMonitor = new PerformanceMonitor();\nexport default performanceMonitor;"],"version":3}