{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/src/rag/enhanced-vector-memory-store.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/src/rag/enhanced-vector-memory-store.ts"],"sourcesContent":["/**\n * VERSATIL SDLC Framework - Enhanced Vector Memory Store\n * Advanced RAG with reranking, multimodal support, and proper vector DB\n */\n\nimport { EventEmitter } from 'events';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { VERSATILLogger } from '../utils/logger.js';\nimport { createClient } from '@supabase/supabase-js';\n\nexport interface MemoryDocument {\n  id: string;\n  content: string;\n  contentType: 'text' | 'code' | 'image' | 'diagram' | 'mixed' | 'handoff' | 'context-metadata' | 'web-learned-pattern' | 'interaction' | 'meta-learning' | 'winning-pattern' | 'anti-pattern' | 'team-style';\n  embedding?: number[];\n  metadata: {\n    agentId: string;\n    timestamp: number;\n    fileType?: string;\n    projectContext?: string;\n    tags: string[];\n    relevanceScore?: number;\n    language?: string;\n    framework?: string;\n    imageData?: string; // base64 for images\n    mimeType?: string;\n    // Additional metadata fields for extended functionality\n    [key: string]: any;\n  };\n}\n\nexport interface RAGQuery {\n  query: string;\n  queryType?: 'text' | 'semantic' | 'hybrid';\n  agentId?: string;\n  topK?: number;\n  rerank?: boolean;\n  includeImages?: boolean;\n  filters?: {\n    timeRange?: { start: number; end: number };\n    tags?: string[];\n    fileTypes?: string[];\n    contentTypes?: string[];\n  };\n}\n\nexport interface RerankingCriteria {\n  recency: number; // 0-1 weight\n  relevance: number; // 0-1 weight\n  contextMatch: number; // 0-1 weight\n  agentExpertise: number; // 0-1 weight\n  crossModalBoost: number; // 0-1 weight\n}\n\nexport interface RAGResult {\n  documents: MemoryDocument[];\n  reranked?: boolean;\n  queryEmbedding?: number[];\n  processingTime: number;\n  searchMethod: string;\n  totalMatches: number;\n}\n\nexport class EnhancedVectorMemoryStore extends EventEmitter {\n  private logger: VERSATILLogger;\n  private memories: Map<string, MemoryDocument> = new Map();\n  private embeddings: Map<string, number[]> = new Map();\n  private indexPath: string;\n  private supabase: any;\n  private isSupabaseEnabled: boolean = false;\n  private edgeFunctionsEnabled: boolean = false;\n  private supabaseUrl: string | null = null;\n  \n  // Enhanced configuration\n  private config = {\n    embeddingDimension: 1536, // OpenAI ada-002 dimension\n    maxMemorySize: 100000,\n    rerankingEnabled: true,\n    multimodalEnabled: true,\n    hybridSearchEnabled: true,\n    defaultReranking: {\n      recency: 0.15,\n      relevance: 0.4,\n      contextMatch: 0.25,\n      agentExpertise: 0.1,\n      crossModalBoost: 0.1\n    } as RerankingCriteria\n  };\n\n  constructor() {\n    super();\n    this.logger = new VERSATILLogger();\n    this.indexPath = path.join(process.cwd(), '.versatil', 'rag', 'vector-index');\n    this.initialize();\n  }\n\n  /**\n   * Initialize Supabase connection if available\n   */\n  public async initialize(): Promise<void> {\n    // Ensure directory exists\n    await fs.promises.mkdir(this.indexPath, { recursive: true });\n\n    // Try to initialize Supabase if configured\n    await this.initializeSupabase();\n\n    await this.loadExistingMemories();\n\n    this.logger.info('Enhanced vector memory store initialized', {\n      memoryCount: this.memories.size,\n      supabaseEnabled: this.isSupabaseEnabled,\n      features: {\n        reranking: this.config.rerankingEnabled,\n        multimodal: this.config.multimodalEnabled,\n        hybridSearch: this.config.hybridSearchEnabled\n      }\n    }, 'rag-memory');\n  }\n\n  private async initializeSupabase(): Promise<void> {\n    try {\n      const supabaseUrl = process.env.SUPABASE_URL;\n      const supabaseKey = process.env.SUPABASE_ANON_KEY;\n\n      if (supabaseUrl && supabaseKey) {\n        this.supabase = createClient(supabaseUrl, supabaseKey);\n        this.isSupabaseEnabled = true;\n        this.supabaseUrl = supabaseUrl;\n        this.edgeFunctionsEnabled = true; // Enable edge functions integration\n\n        // Ensure vector table exists\n        await this.ensureVectorTable();\n\n        this.logger.info('Supabase + Edge Functions initialized', {\n          supabaseUrl: supabaseUrl.replace(/\\/.*/, '//[HIDDEN]'),\n          edgeFunctions: this.edgeFunctionsEnabled\n        }, 'rag-memory');\n      }\n    } catch (error) {\n      this.logger.warn('Supabase initialization failed, using local storage', { error }, 'rag-memory');\n    }\n  }\n\n  /**\n   * Store a memory document with vector embedding\n   */\n  async storeMemory(doc: Omit<MemoryDocument, 'id' | 'embedding'>): Promise<string> {\n    const id = this.generateMemoryId();\n    const embedding = await this.generateMultimodalEmbedding(doc);\n    \n    const memory: MemoryDocument = {\n      id,\n      ...doc,\n      embedding\n    };\n    \n    // Store locally\n    this.memories.set(id, memory);\n    this.embeddings.set(id, embedding);\n    \n    // Store in vector DB if available\n    if (this.isSupabaseEnabled) {\n      await this.storeInSupabase(memory);\n    }\n    \n    await this.persistMemory(memory);\n    \n    this.emit('memory_stored', { \n      id, \n      agentId: doc.metadata.agentId,\n      contentType: doc.contentType \n    });\n    \n    return id;\n  }\n\n  /**\n   * Enhanced query with reranking and multimodal support\n   */\n  private async queryMemoriesInternal(query: RAGQuery): Promise<RAGResult> {\n    const startTime = Date.now();\n    let documents: MemoryDocument[];\n    let searchMethod = 'semantic';\n    \n    // Determine search strategy\n    if (query.queryType === 'hybrid' || this.config.hybridSearchEnabled) {\n      documents = await this.hybridSearch(query);\n      searchMethod = 'hybrid';\n    } else if (this.isSupabaseEnabled) {\n      documents = await this.vectorSearch(query);\n      searchMethod = 'vector';\n    } else {\n      documents = await this.localSemanticSearch(query);\n      searchMethod = 'local-semantic';\n    }\n    \n    // Apply reranking if requested or enabled by default\n    let reranked = false;\n    if (query.rerank !== false && this.config.rerankingEnabled) {\n      documents = await this.rerankResults(documents, query);\n      reranked = true;\n    }\n    \n    // Limit to topK\n    const topK = query.topK || 10;\n    const finalDocuments = documents.slice(0, topK);\n    \n    return {\n      documents: finalDocuments,\n      reranked,\n      queryEmbedding: await this.generateEmbedding(query.query),\n      processingTime: Date.now() - startTime,\n      searchMethod,\n      totalMatches: documents.length\n    };\n  }\n\n  /**\n   * Hybrid search combining semantic and keyword matching\n   */\n  private async hybridSearch(query: RAGQuery): Promise<MemoryDocument[]> {\n    // Semantic search\n    const semanticResults = await this.localSemanticSearch(query);\n    \n    // Keyword search\n    const keywordResults = await this.keywordSearch(query);\n    \n    // Merge and deduplicate\n    const resultMap = new Map<string, MemoryDocument>();\n    \n    // Add semantic results with boosted scores\n    semanticResults.forEach(doc => {\n      resultMap.set(doc.id, {\n        ...doc,\n        metadata: {\n          ...doc.metadata,\n          relevanceScore: (doc.metadata.relevanceScore || 0) * 1.2\n        }\n      });\n    });\n    \n    // Add keyword results\n    keywordResults.forEach(doc => {\n      if (resultMap.has(doc.id)) {\n        // Boost documents found by both methods\n        const existing = resultMap.get(doc.id)!;\n        existing.metadata.relevanceScore = (existing.metadata.relevanceScore || 0) + 0.3;\n      } else {\n        resultMap.set(doc.id, doc);\n      }\n    });\n    \n    return Array.from(resultMap.values());\n  }\n\n  /**\n   * Keyword-based search\n   */\n  private async keywordSearch(query: RAGQuery): Promise<MemoryDocument[]> {\n    const keywords = query.query.toLowerCase().split(' ').filter(w => w.length > 2);\n    let memories = Array.from(this.memories.values());\n    \n    // Apply filters\n    if (query.filters) {\n      memories = this.applyFilters(memories, query.filters);\n    }\n    \n    // Score by keyword matches\n    const scored = memories.map(memory => {\n      const content = memory.content.toLowerCase();\n      const metadata = JSON.stringify(memory.metadata).toLowerCase();\n      \n      let score = 0;\n      keywords.forEach(keyword => {\n        if (content.includes(keyword)) score += 1;\n        if (metadata.includes(keyword)) score += 0.5;\n      });\n      \n      return {\n        memory: {\n          ...memory,\n          metadata: { ...memory.metadata, relevanceScore: score / keywords.length }\n        },\n        score\n      };\n    });\n    \n    // Sort and filter\n    return scored\n      .filter(s => s.score > 0)\n      .sort((a, b) => b.score - a.score)\n      .map(s => s.memory);\n  }\n\n  /**\n   * Advanced reranking with multiple criteria\n   */\n  private async rerankResults(documents: MemoryDocument[], query: RAGQuery): Promise<MemoryDocument[]> {\n    const criteria = this.config.defaultReranking;\n    const now = Date.now();\n    \n    // Get project context if available\n    const projectContext = await this.getProjectContext();\n    \n    // Score each document\n    const reranked = documents.map(doc => {\n      let finalScore = 0;\n      \n      // 1. Relevance score (from initial search)\n      const relevance = doc.metadata.relevanceScore || 0;\n      finalScore += relevance * criteria.relevance;\n      \n      // 2. Recency score\n      const age = now - doc.metadata.timestamp;\n      const recencyScore = Math.exp(-age / (30 * 24 * 60 * 60 * 1000)); // Decay over 30 days\n      finalScore += recencyScore * criteria.recency;\n      \n      // 3. Context match score\n      let contextScore = 0;\n      if (projectContext) {\n        if (doc.metadata.language === projectContext.language) contextScore += 0.5;\n        if (doc.metadata.framework === projectContext.framework) contextScore += 0.5;\n      }\n      finalScore += contextScore * criteria.contextMatch;\n      \n      // 4. Agent expertise score\n      const agentExpertise = this.getAgentExpertiseScore(doc.metadata.agentId, query.query);\n      finalScore += agentExpertise * criteria.agentExpertise;\n      \n      // 5. Cross-modal boost\n      if (doc.contentType !== 'text' && query.includeImages) {\n        finalScore += criteria.crossModalBoost;\n      }\n      \n      return {\n        document: doc,\n        finalScore\n      };\n    });\n    \n    // Sort by final score\n    reranked.sort((a, b) => b.finalScore - a.finalScore);\n    \n    // Update relevance scores\n    return reranked.map(r => ({\n      ...r.document,\n      metadata: {\n        ...r.document.metadata,\n        relevanceScore: r.finalScore\n      }\n    }));\n  }\n\n  /**\n   * Generate embeddings for multimodal content\n   */\n  private async generateMultimodalEmbedding(doc: Omit<MemoryDocument, 'id' | 'embedding'>): Promise<number[]> {\n    if (doc.contentType === 'text' || doc.contentType === 'code') {\n      return this.generateEmbedding(doc.content);\n    } else if (doc.contentType === 'image' && doc.metadata.imageData) {\n      return this.generateImageEmbedding(doc.metadata.imageData);\n    } else if (doc.contentType === 'mixed') {\n      // Combine text and image embeddings\n      const textEmb = await this.generateEmbedding(doc.content);\n      if (doc.metadata.imageData) {\n        const imgEmb = await this.generateImageEmbedding(doc.metadata.imageData);\n        // Average the embeddings (simple fusion)\n        return textEmb.map((val, idx) => (val + imgEmb[idx]) / 2);\n      }\n      return textEmb;\n    }\n    \n    return this.generateEmbedding(doc.content);\n  }\n\n  /**\n   * Generate embedding for images using CLIP (via Hugging Face Transformers.js)\n   */\n  private async generateImageEmbedding(imageData: string): Promise<number[]> {\n    try {\n      // Use Hugging Face Transformers.js for CLIP embeddings\n      const { pipeline } = await import('@xenova/transformers');\n\n      // Create feature extraction pipeline with CLIP model\n      const extractor = await pipeline('feature-extraction', 'Xenova/clip-vit-base-patch32');\n\n      // Generate embedding from image data\n      const output = await extractor(imageData, { pooling: 'mean', normalize: true });\n\n      // Convert tensor to array\n      const embedding = Array.from(output.data as Float32Array);\n\n      // Resize to match configured dimension if needed\n      if (embedding.length !== this.config.embeddingDimension) {\n        return this.resizeEmbedding(embedding, this.config.embeddingDimension);\n      }\n\n      return embedding;\n    } catch (error) {\n      console.warn('CLIP embedding generation failed, using fallback:', error);\n\n      // Fallback: Generate random normalized embedding\n      const embedding = Array(this.config.embeddingDimension).fill(0).map(() => Math.random());\n      const norm = Math.sqrt(embedding.reduce((sum, val) => sum + val * val, 0));\n      return embedding.map(val => val / norm);\n    }\n  }\n\n  /**\n   * Resize embedding to target dimension\n   */\n  private resizeEmbedding(embedding: number[], targetDim: number): number[] {\n    if (embedding.length === targetDim) return embedding;\n\n    // Simple interpolation/truncation\n    if (embedding.length > targetDim) {\n      // Truncate\n      return embedding.slice(0, targetDim);\n    } else {\n      // Pad with zeros\n      return [...embedding, ...Array(targetDim - embedding.length).fill(0)];\n    }\n  }\n\n  /**\n   * Store in Supabase vector database\n   */\n  private async storeInSupabase(memory: MemoryDocument): Promise<void> {\n    if (!this.isSupabaseEnabled) return;\n    \n    try {\n      const { error } = await this.supabase\n        .from('versatil_memories')\n        .upsert({\n          id: memory.id,\n          content: memory.content,\n          content_type: memory.contentType,\n          embedding: memory.embedding,\n          metadata: memory.metadata,\n          agent_id: memory.metadata.agentId,\n          created_at: new Date(memory.metadata.timestamp).toISOString()\n        });\n        \n      if (error) {\n        this.logger.error('Failed to store in Supabase', { error }, 'rag-memory');\n      }\n    } catch (error) {\n      this.logger.error('Supabase storage error', { error }, 'rag-memory');\n    }\n  }\n\n  /**\n   * Vector search using Supabase\n   */\n  private async vectorSearch(query: RAGQuery): Promise<MemoryDocument[]> {\n    if (!this.isSupabaseEnabled) {\n      return this.localSemanticSearch(query);\n    }\n    \n    try {\n      const queryEmbedding = await this.generateEmbedding(query.query);\n      \n      // Build the RPC call\n      let rpcQuery = this.supabase.rpc('match_memories', {\n        query_embedding: queryEmbedding,\n        match_threshold: 0.7,\n        match_count: query.topK || 20\n      });\n      \n      // Apply filters\n      if (query.agentId) {\n        rpcQuery = rpcQuery.eq('agent_id', query.agentId);\n      }\n      \n      if (query.filters?.contentTypes) {\n        rpcQuery = rpcQuery.in('content_type', query.filters.contentTypes);\n      }\n      \n      const { data, error } = await rpcQuery;\n      \n      if (error) {\n        this.logger.error('Vector search failed', { error }, 'rag-memory');\n        return this.localSemanticSearch(query);\n      }\n      \n      return data.map((row: any) => ({\n        id: row.id,\n        content: row.content,\n        contentType: row.content_type,\n        embedding: row.embedding,\n        metadata: {\n          ...row.metadata,\n          relevanceScore: row.similarity\n        }\n      }));\n      \n    } catch (error) {\n      this.logger.error('Vector search error', { error }, 'rag-memory');\n      return this.localSemanticSearch(query);\n    }\n  }\n\n  /**\n   * Local semantic search (fallback)\n   */\n  private async localSemanticSearch(query: RAGQuery): Promise<MemoryDocument[]> {\n    const queryEmbedding = await this.generateEmbedding(query.query);\n    \n    // Filter memories\n    let filteredMemories = Array.from(this.memories.values());\n    \n    if (query.agentId) {\n      filteredMemories = filteredMemories.filter(m => m.metadata.agentId === query.agentId);\n    }\n    \n    if (query.filters) {\n      filteredMemories = this.applyFilters(filteredMemories, query.filters);\n    }\n    \n    // Calculate similarity scores\n    const scoredMemories = filteredMemories.map(memory => ({\n      memory,\n      score: this.cosineSimilarity(queryEmbedding, memory.embedding || [])\n    }));\n    \n    // Sort by relevance\n    scoredMemories.sort((a, b) => b.score - a.score);\n    \n    return scoredMemories.map(({ memory, score }) => ({\n      ...memory,\n      metadata: { ...memory.metadata, relevanceScore: score }\n    }));\n  }\n\n  /**\n   * Get agent expertise score for reranking\n   */\n  private getAgentExpertiseScore(agentId: string, query: string): number {\n    const expertise: Record<string, string[]> = {\n      'enhanced-marcus': ['backend', 'api', 'database', 'typescript'],\n      'enhanced-james': ['frontend', 'ui', 'react', 'css'],\n      'enhanced-maria': ['testing', 'qa', 'quality', 'coverage'],\n      'security-sam': ['security', 'vulnerability', 'authentication'],\n      'architecture-dan': ['architecture', 'design', 'patterns', 'structure'],\n      'dr-ai-ml': ['ml', 'ai', 'optimization', 'performance']\n    };\n    \n    const agentKeywords = expertise[agentId] || [];\n    const queryLower = query.toLowerCase();\n    \n    let score = 0;\n    agentKeywords.forEach(keyword => {\n      if (queryLower.includes(keyword)) score += 0.25;\n    });\n    \n    return Math.min(1, score);\n  }\n\n  /**\n   * Get current project context for reranking\n   */\n  private async getProjectContext(): Promise<any> {\n    // Try to get from environment scanner if available\n    try {\n      const scanner = require('../environment/environment-scanner').environmentScanner;\n      return scanner.getLatestScan()?.technology;\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Ensure vector table exists in Supabase\n   */\n  private async ensureVectorTable(): Promise<void> {\n    // This would be run via migration, but included for reference\n    const createTableSQL = `\n      CREATE TABLE IF NOT EXISTS versatil_memories (\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n        content TEXT NOT NULL,\n        content_type VARCHAR(50) DEFAULT 'text',\n        embedding vector(1536),\n        metadata JSONB DEFAULT '{}',\n        agent_id TEXT,\n        created_at TIMESTAMP DEFAULT NOW(),\n        updated_at TIMESTAMP DEFAULT NOW()\n      );\n      \n      CREATE INDEX IF NOT EXISTS idx_memories_embedding \n      ON versatil_memories USING ivfflat (embedding vector_cosine_ops)\n      WITH (lists = 100);\n      \n      CREATE INDEX IF NOT EXISTS idx_memories_agent \n      ON versatil_memories(agent_id);\n      \n      CREATE INDEX IF NOT EXISTS idx_memories_content_type \n      ON versatil_memories(content_type);\n    `;\n  }\n\n  // ... (keep other utility methods from original)\n\n  /**\n   * Store diagram or visual content\n   */\n  async storeDiagram(content: string, diagramData: string, metadata: any): Promise<string> {\n    return this.storeMemory({\n      content,\n      contentType: 'diagram',\n      metadata: {\n        ...metadata,\n        imageData: diagramData,\n        mimeType: 'image/svg+xml'\n      }\n    });\n  }\n\n  /**\n   * Store code with syntax highlighting metadata\n   */\n  async storeCode(code: string, language: string, metadata: any): Promise<string> {\n    return this.storeMemory({\n      content: code,\n      contentType: 'code',\n      metadata: {\n        ...metadata,\n        language,\n        fileType: language\n      }\n    });\n  }\n\n  /**\n   * Generate embedding (with API integration support)\n   */\n  private async generateEmbedding(text: string): Promise<number[]> {\n    // Check for OpenAI API key\n    if (process.env.OPENAI_API_KEY) {\n      try {\n        // Real OpenAI embeddings API integration\n        const { OpenAI } = await import('openai');\n        const openai = new OpenAI({\n          apiKey: process.env.OPENAI_API_KEY\n        });\n\n        const response = await openai.embeddings.create({\n          model: \"text-embedding-3-small\",\n          input: text,\n          dimensions: this.config.embeddingDimension\n        });\n\n        const embedding = response.data[0].embedding;\n\n        // Ensure correct dimension\n        if (embedding.length !== this.config.embeddingDimension) {\n          return this.resizeEmbedding(embedding, this.config.embeddingDimension);\n        }\n\n        return embedding;\n      } catch (error) {\n        this.logger.warn('OpenAI embedding failed, using fallback', { error }, 'rag-memory');\n      }\n    }\n\n    // Fallback to simple embedding\n    const embedding = Array(this.config.embeddingDimension).fill(0).map(() => Math.random());\n    const norm = Math.sqrt(embedding.reduce((sum, val) => sum + val * val, 0));\n    return embedding.map(val => val / norm);\n  }\n\n  // Missing method implementations\n  private async loadExistingMemories(): Promise<void> {\n    try {\n      // Load from Supabase if configured\n      const { data, error } = await this.supabase\n        .from('versatil_memories')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .limit(1000);\n\n      if (error) throw error;\n\n      if (data) {\n        for (const row of data) {\n          const doc: MemoryDocument = {\n            id: row.id,\n            content: row.content,\n            contentType: row.content_type || 'text',\n            metadata: row.metadata || {},\n            embedding: row.embedding || []\n          };\n          this.memories.set(doc.id, doc);\n        }\n\n        this.logger.info(`Loaded ${data.length} existing memories from Supabase`);\n      }\n    } catch (error) {\n      this.logger.warn('Could not load existing memories', { error });\n    }\n  }\n\n  private generateMemoryId(doc?: any): string { return `mem-${Date.now()}-${Math.random()}`; }\n\n  private async persistMemory(doc: MemoryDocument): Promise<void> {\n    try {\n      // Persist to Supabase\n      const { error } = await this.supabase\n        .from('versatil_memories')\n        .upsert({\n          id: doc.id,\n          content: doc.content,\n          metadata: doc.metadata,\n          embedding: doc.embedding,\n          created_at: new Date().toISOString()\n        });\n\n      if (error) {\n        this.logger.warn('Failed to persist memory to Supabase', { error });\n      }\n    } catch (error) {\n      this.logger.warn('Error persisting memory', { error });\n    }\n  }\n  private applyFilters(documents: MemoryDocument[], filters: any): MemoryDocument[] { return documents; }\n  private cosineSimilarity(vec1: number[], vec2: number[]): number {\n    return vec1.reduce((sum, val, i) => sum + val * (vec2[i] || 0), 0);\n  }\n  async getAllMemories(): Promise<MemoryDocument[]> { return Array.from(this.memories.values()); }\n  async searchMemories(query: string | RAGQuery, options?: any): Promise<any[]> {\n    const results = await this.queryMemoriesInternal(typeof query === 'string' ? { query } : query);\n    return Array.isArray(results) ? results : (results.documents || []);\n  }\n  async queryMemories(query: string | RAGQuery): Promise<any> {\n    return await this.queryMemoriesInternal(typeof query === 'string' ? { query } : query);\n  }\n  async close(): Promise<void> {\n    this.logger.info('Closing Enhanced Vector Memory Store');\n\n    // Clear in-memory cache\n    this.memories.clear();\n\n    // No need to close Supabase client (it's stateless)\n    this.logger.info('Enhanced Vector Memory Store closed');\n  }\n\n  // ============================================================================\n  // AGENT-SPECIFIC RAG METHODS WITH EDGE FUNCTION INTEGRATION\n  // ============================================================================\n\n  /**\n   * Enhanced Maria (QA) RAG query using edge functions\n   */\n  async mariaRAG(query: string, context: any, config?: any): Promise<any> {\n    if (!this.edgeFunctionsEnabled || !this.supabaseUrl) {\n      // Fallback to local processing\n      return this.localMariaRAG(query, context, config);\n    }\n\n    try {\n      const response = await fetch(`${this.supabaseUrl}/functions/v1/maria-rag`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.SUPABASE_ANON_KEY}`,\n        },\n        body: JSON.stringify({ query, context, config }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Maria RAG edge function failed: ${response.statusText}`);\n      }\n\n      const result = await response.json() as any;\n\n      if (!result.success) {\n        throw new Error(result.error || 'Maria RAG processing failed');\n      }\n\n      this.logger.info('Maria RAG edge function completed', {\n        similarPatterns: result.data?.ragInsights?.similarPatterns || 0,\n        processingTime: result.metadata?.processingTime || 0\n      }, 'maria-rag');\n\n      return result;\n\n    } catch (error) {\n      this.logger.warn('Maria RAG edge function failed, using fallback', { error }, 'maria-rag');\n      return this.localMariaRAG(query, context, config);\n    }\n  }\n\n  /**\n   * Enhanced James (Frontend) RAG query using edge functions\n   */\n  async jamesRAG(query: string, context: any, config?: any): Promise<any> {\n    if (!this.edgeFunctionsEnabled || !this.supabaseUrl) {\n      // Fallback to local processing\n      return this.localJamesRAG(query, context, config);\n    }\n\n    try {\n      const response = await fetch(`${this.supabaseUrl}/functions/v1/james-rag`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.SUPABASE_ANON_KEY}`,\n        },\n        body: JSON.stringify({ query, context, config }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`James RAG edge function failed: ${response.statusText}`);\n      }\n\n      const result = await response.json() as any;\n\n      if (!result.success) {\n        throw new Error(result.error || 'James RAG processing failed');\n      }\n\n      this.logger.info('James RAG edge function completed', {\n        componentPatterns: result.data?.ragInsights?.componentPatterns || 0,\n        processingTime: result.metadata?.processingTime || 0\n      }, 'james-rag');\n\n      return result;\n\n    } catch (error) {\n      this.logger.warn('James RAG edge function failed, using fallback', { error }, 'james-rag');\n      return this.localJamesRAG(query, context, config);\n    }\n  }\n\n  /**\n   * Enhanced Marcus (Backend) RAG query using edge functions\n   */\n  async marcusRAG(query: string, context: any, config?: any): Promise<any> {\n    if (!this.edgeFunctionsEnabled || !this.supabaseUrl) {\n      // Fallback to local processing\n      return this.localMarcusRAG(query, context, config);\n    }\n\n    try {\n      const response = await fetch(`${this.supabaseUrl}/functions/v1/marcus-rag`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.SUPABASE_ANON_KEY}`,\n        },\n        body: JSON.stringify({ query, context, config }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Marcus RAG edge function failed: ${response.statusText}`);\n      }\n\n      const result = await response.json() as any;\n\n      if (!result.success) {\n        throw new Error(result.error || 'Marcus RAG processing failed');\n      }\n\n      this.logger.info('Marcus RAG edge function completed', {\n        apiPatterns: result.data?.ragInsights?.apiPatterns || 0,\n        securitySolutions: result.data?.ragInsights?.securitySolutions || 0,\n        processingTime: result.metadata?.processingTime || 0\n      }, 'marcus-rag');\n\n      return result;\n\n    } catch (error) {\n      this.logger.warn('Marcus RAG edge function failed, using fallback', { error }, 'marcus-rag');\n      return this.localMarcusRAG(query, context, config);\n    }\n  }\n\n  /**\n   * Fallback local Maria RAG processing\n   */\n  private async localMariaRAG(query: string, context: any, config?: any): Promise<any> {\n    const ragQuery: RAGQuery = {\n      query: `QA testing patterns ${query}`,\n      queryType: 'semantic',\n      agentId: 'enhanced-maria',\n      topK: config?.maxExamples || 3,\n      filters: {\n        tags: ['test', 'qa', 'testing'],\n        contentTypes: ['code', 'text']\n      }\n    };\n\n    const results = await this.queryMemoriesInternal(ragQuery);\n    return {\n      success: true,\n      data: {\n        testPatterns: results.documents,\n        qaBestPractices: [],\n        projectStandards: [],\n        ragInsights: {\n          similarPatterns: results.documents.length,\n          projectStandards: 0,\n          expertise: 0,\n          avgSimilarity: results.documents.reduce((sum, doc) => sum + (doc.metadata.relevanceScore || 0), 0) / results.documents.length\n        }\n      },\n      metadata: {\n        agentId: 'enhanced-maria',\n        processingTime: results.processingTime,\n        queryType: 'local-fallback'\n      }\n    };\n  }\n\n  /**\n   * Fallback local James RAG processing\n   */\n  private async localJamesRAG(query: string, context: any, config?: any): Promise<any> {\n    const ragQuery: RAGQuery = {\n      query: `Frontend component patterns ${query}`,\n      queryType: 'semantic',\n      agentId: 'enhanced-james',\n      topK: config?.maxExamples || 3,\n      filters: {\n        tags: ['frontend', 'component', 'ui'],\n        contentTypes: ['code']\n      }\n    };\n\n    const results = await this.queryMemoriesInternal(ragQuery);\n    return {\n      success: true,\n      data: {\n        componentPatterns: results.documents,\n        uiPatterns: [],\n        performancePatterns: [],\n        ragInsights: {\n          componentPatterns: results.documents.length,\n          uiPatterns: 0,\n          performanceOptimizations: 0,\n          avgSimilarity: results.documents.reduce((sum, doc) => sum + (doc.metadata.relevanceScore || 0), 0) / results.documents.length\n        }\n      },\n      metadata: {\n        agentId: 'enhanced-james',\n        processingTime: results.processingTime,\n        queryType: 'local-fallback'\n      }\n    };\n  }\n\n  /**\n   * Fallback local Marcus RAG processing\n   */\n  private async localMarcusRAG(query: string, context: any, config?: any): Promise<any> {\n    const ragQuery: RAGQuery = {\n      query: `Backend API patterns ${query}`,\n      queryType: 'semantic',\n      agentId: 'enhanced-marcus',\n      topK: config?.maxExamples || 3,\n      filters: {\n        tags: ['backend', 'api', 'security'],\n        contentTypes: ['code']\n      }\n    };\n\n    const results = await this.queryMemoriesInternal(ragQuery);\n    return {\n      success: true,\n      data: {\n        apiPatterns: results.documents,\n        securityPatterns: [],\n        performancePatterns: [],\n        databaseOptimizations: [],\n        ragInsights: {\n          apiPatterns: results.documents.length,\n          securitySolutions: 0,\n          performanceOptimizations: 0,\n          databaseOptimizations: 0,\n          avgSimilarity: results.documents.reduce((sum, doc) => sum + (doc.metadata.relevanceScore || 0), 0) / results.documents.length\n        }\n      },\n      metadata: {\n        agentId: 'enhanced-marcus',\n        processingTime: results.processingTime,\n        queryType: 'local-fallback'\n      }\n    };\n  }\n\n  /**\n   * Store agent-specific patterns in enhanced schema\n   */\n  async storeAgentPattern(agentName: string, pattern: any): Promise<string> {\n    if (!this.isSupabaseEnabled) {\n      // Fallback to local storage\n      return this.storeMemory({\n        content: pattern.code_content || pattern.content,\n        contentType: 'code',\n        metadata: {\n          agentId: agentName,\n          timestamp: Date.now(),\n          tags: pattern.tags || [],\n          ...pattern.metadata\n        }\n      });\n    }\n\n    try {\n      const { data, error } = await this.supabase\n        .from('agent_code_patterns')\n        .insert({\n          agent_name: agentName,\n          pattern_type: pattern.pattern_type || 'unknown',\n          code_content: pattern.code_content || pattern.content,\n          file_path: pattern.file_path,\n          language: pattern.language,\n          framework: pattern.framework,\n          quality_score: pattern.quality_score || 80,\n          metadata: pattern.metadata || {},\n          tags: pattern.tags || []\n        })\n        .select()\n        .single();\n\n      if (error) {\n        throw error;\n      }\n\n      this.logger.info('Agent pattern stored in enhanced schema', {\n        agentName,\n        patternType: pattern.pattern_type,\n        id: data.id\n      }, 'rag-memory');\n\n      return data.id;\n\n    } catch (error) {\n      this.logger.error('Failed to store agent pattern', { error, agentName }, 'rag-memory');\n      // Fallback to local storage\n      return this.storeMemory({\n        content: pattern.code_content || pattern.content,\n        contentType: 'code',\n        metadata: {\n          agentId: agentName,\n          timestamp: Date.now(),\n          tags: pattern.tags || [],\n          ...pattern.metadata\n        }\n      });\n    }\n  }\n\n  /**\n   * Store agent solutions in enhanced schema\n   */\n  async storeAgentSolution(agentName: string, solution: any): Promise<string> {\n    if (!this.isSupabaseEnabled) {\n      return this.storeMemory({\n        content: solution.solution_code || solution.content,\n        contentType: 'code',\n        metadata: {\n          agentId: agentName,\n          timestamp: Date.now(),\n          problemType: solution.problem_type,\n          ...solution.metadata\n        }\n      });\n    }\n\n    try {\n      const { data, error } = await this.supabase\n        .from('agent_solutions')\n        .insert({\n          agent_name: agentName,\n          problem_type: solution.problem_type,\n          problem_description: solution.problem_description,\n          solution_code: solution.solution_code,\n          solution_explanation: solution.solution_explanation,\n          effectiveness_score: solution.effectiveness_score || 0.8,\n          dependencies: solution.dependencies || [],\n          compatibility: solution.compatibility || {}\n        })\n        .select()\n        .single();\n\n      if (error) {\n        throw error;\n      }\n\n      this.logger.info('Agent solution stored in enhanced schema', {\n        agentName,\n        problemType: solution.problem_type,\n        id: data.id\n      }, 'rag-memory');\n\n      return data.id;\n\n    } catch (error) {\n      this.logger.error('Failed to store agent solution', { error, agentName }, 'rag-memory');\n      return this.storeMemory({\n        content: solution.solution_code || solution.content,\n        contentType: 'code',\n        metadata: {\n          agentId: agentName,\n          timestamp: Date.now(),\n          problemType: solution.problem_type,\n          ...solution.metadata\n        }\n      });\n    }\n  }\n\n  /**\n   * Get production deployment status\n   */\n  getProductionStatus(): {\n    supabaseEnabled: boolean;\n    edgeFunctionsEnabled: boolean;\n    agentRAGAvailable: boolean;\n    enhancedSchemaReady: boolean;\n  } {\n    return {\n      supabaseEnabled: this.isSupabaseEnabled,\n      edgeFunctionsEnabled: this.edgeFunctionsEnabled,\n      agentRAGAvailable: this.edgeFunctionsEnabled && this.supabaseUrl !== null,\n      enhancedSchemaReady: this.isSupabaseEnabled\n    };\n  }\n}\n\n// Export enhanced singleton instance\nexport const vectorMemoryStore = new EnhancedVectorMemoryStore();\n"],"version":3}