{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/src/intelligence/pattern-analyzer.ts","mappings":";AAAA;;;;;;;;GAQG;;;AAmCH,MAAa,eAAe;IAC1B;;OAEG;IACH,MAAM,CAAC,SAAS,CAAC,OAAe,EAAE,QAAgB,EAAE,UAAuB;QACzE,MAAM,QAAQ,GAAmB,EAAE,CAAC;QACpC,MAAM,KAAK,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAE1C,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YAC5B,MAAM,OAAO,GAAG,KAAK,GAAG,CAAC,CAAC;YAE1B,+BAA+B;YAC/B,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC3D,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;oBACnD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;wBACzD,QAAQ,CAAC,IAAI,CAAC;4BACZ,IAAI,EAAE,mBAAmB;4BACzB,QAAQ,EAAE,MAAM;4BAChB,IAAI,EAAE,OAAO;4BACb,MAAM,EAAE,CAAC;4BACT,OAAO,EAAE,8BAA8B;4BACvC,UAAU,EAAE,+CAA+C;4BAC3D,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;4BACjB,QAAQ,EAAE,KAAK;yBAChB,CAAC,CAAC;oBACL,CAAC;gBACH,CAAC;YACH,CAAC;YAED,sCAAsC;YACtC,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,CAAC;gBACnE,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,YAAY;oBAClB,QAAQ,EAAE,QAAQ;oBAClB,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;oBAC/B,OAAO,EAAE,yBAAyB;oBAClC,UAAU,EAAE,iDAAiD;oBAC7D,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;oBACjB,QAAQ,EAAE,eAAe;iBAC1B,CAAC,CAAC;YACL,CAAC;YAED,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC9B,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,oBAAoB;oBAC1B,QAAQ,EAAE,UAAU;oBACpB,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;oBAChC,OAAO,EAAE,4BAA4B;oBACrC,UAAU,EAAE,uCAAuC;oBACnD,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;oBACjB,QAAQ,EAAE,KAAK;iBAChB,CAAC,CAAC;YACL,CAAC;YAED,6BAA6B;YAC7B,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;gBACpD,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,cAAc;oBACpB,QAAQ,EAAE,KAAK;oBACf,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,CAAC;oBACT,OAAO,EAAE,uBAAuB;oBAChC,UAAU,EAAE,uCAAuC;oBACnD,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;oBACjB,QAAQ,EAAE,eAAe;iBAC1B,CAAC,CAAC;YACL,CAAC;YAED,4BAA4B;YAC5B,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,GAAG,EAAE,CAAC;gBAC/D,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,aAAa;oBACnB,QAAQ,EAAE,MAAM;oBAChB,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,CAAC;oBACT,OAAO,EAAE,mCAAmC;oBAC5C,UAAU,EAAE,4CAA4C;oBACxD,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;oBACjB,QAAQ,EAAE,KAAK;iBAChB,CAAC,CAAC;YACL,CAAC;YAED,gCAAgC;YAChC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;gBACnD,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC5D,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;oBAC/D,QAAQ,CAAC,IAAI,CAAC;wBACZ,IAAI,EAAE,wBAAwB;wBAC9B,QAAQ,EAAE,QAAQ;wBAClB,IAAI,EAAE,OAAO;wBACb,MAAM,EAAE,CAAC;wBACT,OAAO,EAAE,uCAAuC;wBAChD,UAAU,EAAE,oCAAoC;wBAChD,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;wBACjB,QAAQ,EAAE,KAAK;qBAChB,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,sDAAsD;QACtD,IAAI,UAAU,EAAE,CAAC;YACf,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QACzD,CAAC;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QAEnD,OAAO;YACL,QAAQ;YACR,KAAK;YACL,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,KAAK,EAAE,UAAU,CAAC;YAC5D,eAAe,EAAE,IAAI,CAAC,yBAAyB,CAAC,QAAQ,EAAE,UAAU,CAAC;SACtE,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,eAAe,CAAC,OAAe,EAAE,QAAgB,EAAE,UAAuB;QAC/E,MAAM,QAAQ,GAAmB,EAAE,CAAC;QACpC,MAAM,KAAK,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAE1C,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YAC5B,MAAM,OAAO,GAAG,KAAK,GAAG,CAAC,CAAC;YAE1B,wBAAwB;YACxB,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC;gBAClE,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,gBAAgB;oBACtB,QAAQ,EAAE,UAAU;oBACpB,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,CAAC;oBACT,OAAO,EAAE,iDAAiD;oBAC1D,UAAU,EAAE,2CAA2C;oBACvD,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;oBACjB,QAAQ,EAAE,KAAK;iBAChB,CAAC,CAAC;YACL,CAAC;YAED,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC9B,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,gBAAgB;oBACtB,QAAQ,EAAE,UAAU;oBACpB,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,CAAC;oBACT,OAAO,EAAE,wDAAwD;oBACjE,UAAU,EAAE,2BAA2B;oBACvC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;oBACjB,QAAQ,EAAE,KAAK;iBAChB,CAAC,CAAC;YACL,CAAC;YAED,uBAAuB;YACvB,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;gBAC1D,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,eAAe;oBACrB,QAAQ,EAAE,KAAK;oBACf,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,CAAC;oBACT,OAAO,EAAE,wBAAwB;oBACjC,UAAU,EAAE,sCAAsC;oBAClD,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;oBACjB,QAAQ,EAAE,eAAe;iBAC1B,CAAC,CAAC;YACL,CAAC;YAED,oCAAoC;YACpC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;gBACrD,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC3D,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;oBAChC,QAAQ,CAAC,IAAI,CAAC;wBACZ,IAAI,EAAE,kBAAkB;wBACxB,QAAQ,EAAE,MAAM;wBAChB,IAAI,EAAE,OAAO;wBACb,MAAM,EAAE,CAAC;wBACT,OAAO,EAAE,oCAAoC;wBAC7C,UAAU,EAAE,mCAAmC;wBAC/C,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;wBACjB,QAAQ,EAAE,KAAK;qBAChB,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;YAED,0BAA0B;YAC1B,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;gBACpD,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,kBAAkB;oBACxB,QAAQ,EAAE,QAAQ;oBAClB,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,CAAC;oBACT,OAAO,EAAE,wBAAwB;oBACjC,UAAU,EAAE,4CAA4C;oBACxD,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;oBACjB,QAAQ,EAAE,eAAe;iBAC1B,CAAC,CAAC;YACL,CAAC;YAED,wCAAwC;YACxC,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC;gBACtE,IAAI,KAAK,EAAE,CAAC;oBACV,MAAM,CAAC,EAAE,SAAS,EAAE,UAAU,CAAC,GAAG,KAAK,CAAC;oBACxC,MAAM,cAAc,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;oBACtF,IAAI,UAAU,KAAK,cAAc,EAAE,CAAC;wBAClC,QAAQ,CAAC,IAAI,CAAC;4BACZ,IAAI,EAAE,iBAAiB;4BACvB,QAAQ,EAAE,KAAK;4BACf,IAAI,EAAE,OAAO;4BACb,MAAM,EAAE,CAAC;4BACT,OAAO,EAAE,qCAAqC;4BAC9C,UAAU,EAAE,OAAO,cAAc,eAAe,UAAU,EAAE;4BAC5D,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;4BACjB,QAAQ,EAAE,OAAO;yBAClB,CAAC,CAAC;oBACL,CAAC;gBACH,CAAC;YACH,CAAC;YAED,+BAA+B;YAC/B,IAAI,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;gBACtC,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,iBAAiB;oBACvB,QAAQ,EAAE,QAAQ;oBAClB,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE,CAAC;oBACT,OAAO,EAAE,iBAAiB,KAAK,CAAC,MAAM,eAAe;oBACrD,UAAU,EAAE,wCAAwC;oBACpD,IAAI,EAAE,EAAE;oBACR,QAAQ,EAAE,eAAe;iBAC1B,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QAEnD,OAAO;YACL,QAAQ;YACR,KAAK;YACL,OAAO,EAAE,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,KAAK,CAAC;YACtD,eAAe,EAAE,IAAI,CAAC,+BAA+B,CAAC,QAAQ,CAAC;SAChE,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,cAAc,CAAC,OAAe,EAAE,QAAgB,EAAE,UAAuB;QAC9E,MAAM,QAAQ,GAAmB,EAAE,CAAC;QACpC,MAAM,KAAK,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAE1C,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YAC5B,MAAM,OAAO,GAAG,KAAK,GAAG,CAAC,CAAC;YAE1B,sCAAsC;YACtC,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,CAAC;gBACpG,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,gBAAgB;oBACtB,QAAQ,EAAE,UAAU;oBACpB,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,CAAC;oBACT,OAAO,EAAE,4DAA4D;oBACrE,UAAU,EAAE,2DAA2D;oBACvE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;oBACjB,QAAQ,EAAE,KAAK;iBAChB,CAAC,CAAC;YACL,CAAC;YAED,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC9B,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,gBAAgB;oBACtB,QAAQ,EAAE,UAAU;oBACpB,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,CAAC;oBACT,OAAO,EAAE,wDAAwD;oBACjE,UAAU,EAAE,2BAA2B;oBACvC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;oBACjB,QAAQ,EAAE,KAAK;iBAChB,CAAC,CAAC;YACL,CAAC;YAED,2BAA2B;YAC3B,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE,CAAC;gBAC3G,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,mBAAmB;oBACzB,QAAQ,EAAE,MAAM;oBAChB,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,CAAC;oBACT,OAAO,EAAE,4BAA4B;oBACrC,UAAU,EAAE,kDAAkD;oBAC9D,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;oBACjB,QAAQ,EAAE,eAAe;iBAC1B,CAAC,CAAC;YACL,CAAC;YAED,uCAAuC;YACvC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;gBAClF,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC9C,QAAQ,CAAC,IAAI,CAAC;wBACZ,IAAI,EAAE,eAAe;wBACrB,QAAQ,EAAE,UAAU;wBACpB,IAAI,EAAE,OAAO;wBACb,MAAM,EAAE,CAAC;wBACT,OAAO,EAAE,uCAAuC;wBAChD,UAAU,EAAE,kCAAkC;wBAC9C,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;wBACjB,QAAQ,EAAE,UAAU;qBACrB,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;YAED,+BAA+B;YAC/B,IAAI,IAAI,CAAC,KAAK,CAAC,sDAAsD,CAAC,EAAE,CAAC;gBACvE,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,uBAAuB;oBAC7B,QAAQ,EAAE,UAAU;oBACpB,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,CAAC;oBACT,OAAO,EAAE,gCAAgC;oBACzC,UAAU,EAAE,gDAAgD;oBAC5D,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,gBAAgB,EAAE,OAAO,CAAC;oBACpD,QAAQ,EAAE,UAAU;iBACrB,CAAC,CAAC;YACL,CAAC;YAED,kCAAkC;YAClC,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;gBAC3F,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC5D,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;oBACvE,QAAQ,CAAC,IAAI,CAAC;wBACZ,IAAI,EAAE,oBAAoB;wBAC1B,QAAQ,EAAE,MAAM;wBAChB,IAAI,EAAE,OAAO;wBACb,MAAM,EAAE,CAAC;wBACT,OAAO,EAAE,+BAA+B;wBACxC,UAAU,EAAE,uCAAuC;wBACnD,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;wBACjB,QAAQ,EAAE,UAAU;qBACrB,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;YAED,qCAAqC;YACrC,IAAI,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,CAAC;gBAC1E,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,qBAAqB;oBAC3B,QAAQ,EAAE,QAAQ;oBAClB,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,CAAC;oBACT,OAAO,EAAE,8CAA8C;oBACvD,UAAU,EAAE,yCAAyC;oBACrD,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;oBACjB,QAAQ,EAAE,aAAa;iBACxB,CAAC,CAAC;YACL,CAAC;YAED,+BAA+B;YAC/B,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAC;gBAC9D,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAC;oBACvE,QAAQ,CAAC,IAAI,CAAC;wBACZ,IAAI,EAAE,oBAAoB;wBAC1B,QAAQ,EAAE,MAAM;wBAChB,IAAI,EAAE,OAAO;wBACb,MAAM,EAAE,CAAC;wBACT,OAAO,EAAE,qCAAqC;wBAC9C,UAAU,EAAE,8BAA8B;wBAC1C,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;wBACjB,QAAQ,EAAE,UAAU;qBACrB,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QAEnD,OAAO;YACL,QAAQ;YACR,KAAK;YACL,OAAO,EAAE,IAAI,CAAC,sBAAsB,CAAC,QAAQ,EAAE,KAAK,CAAC;YACrD,eAAe,EAAE,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC;SAC/D,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,qBAAqB,CAAC,QAAwB;QAC3D,IAAI,KAAK,GAAG,GAAG,CAAC;QAEhB,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACzB,QAAQ,OAAO,CAAC,QAAQ,EAAE,CAAC;gBACzB,KAAK,UAAU;oBAAE,KAAK,IAAI,EAAE,CAAC;oBAAC,MAAM;gBACpC,KAAK,MAAM;oBAAE,KAAK,IAAI,CAAC,CAAC;oBAAC,MAAM;gBAC/B,KAAK,QAAQ;oBAAE,KAAK,IAAI,CAAC,CAAC;oBAAC,MAAM;gBACjC,KAAK,KAAK;oBAAE,KAAK,IAAI,CAAC,CAAC;oBAAC,MAAM;gBAC9B,KAAK,MAAM;oBAAE,KAAK,IAAI,CAAC,CAAC;oBAAC,MAAM;YACjC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;IAC3C,CAAC;IAGD;;OAEG;IACK,MAAM,CAAC,uBAAuB,CAAC,QAAwB,EAAE,KAAa;QAC5E,MAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,kBAAkB,CAAC,CAAC,MAAM,CAAC;QACjF,MAAM,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,MAAM,CAAC;QAE9E,IAAI,OAAO,GAAG,2BAA2B,KAAK,QAAQ,CAAC;QACvD,IAAI,aAAa,GAAG,CAAC;YAAE,OAAO,IAAI,GAAG,aAAa,yBAAyB,CAAC;QAC5E,IAAI,WAAW,GAAG,CAAC;YAAE,OAAO,IAAI,GAAG,WAAW,yBAAyB,CAAC;QAExE,OAAO,OAAO,IAAI,6BAA6B,KAAK,QAAQ,CAAC;IAC/D,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,+BAA+B,CAAC,QAAwB;QACrE,MAAM,eAAe,GAAa,EAAE,CAAC;QAErC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,kBAAkB,CAAC,EAAE,CAAC;YACtD,eAAe,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;QAC7D,CAAC;QACD,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,kBAAkB,CAAC,EAAE,CAAC;YACtD,eAAe,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;QAChE,CAAC;QACD,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,iBAAiB,CAAC,EAAE,CAAC;YACrD,eAAe,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;QAC/E,CAAC;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,sBAAsB,CAAC,QAAwB,EAAE,KAAa;QAC3E,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,MAAM,CAAC;QACxE,MAAM,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,MAAM,CAAC;QAE9E,IAAI,OAAO,GAAG,2BAA2B,KAAK,QAAQ,CAAC;QACvD,IAAI,QAAQ,GAAG,CAAC;YAAE,OAAO,IAAI,OAAO,QAAQ,0BAA0B,CAAC;QACvE,IAAI,WAAW,GAAG,CAAC;YAAE,OAAO,IAAI,GAAG,WAAW,oCAAoC,CAAC;QAEnF,OAAO,OAAO,IAAI,2BAA2B,KAAK,QAAQ,CAAC;IAC7D,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,8BAA8B,CAAC,QAAwB;QACpE,MAAM,eAAe,GAAa,EAAE,CAAC;QAErC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,eAAe,CAAC,EAAE,CAAC;YACnD,eAAe,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;QAC3E,CAAC;QACD,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,uBAAuB,CAAC,EAAE,CAAC;YAC3D,eAAe,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;QACvE,CAAC;QACD,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,oBAAoB,CAAC,EAAE,CAAC;YACxD,eAAe,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;QAClE,CAAC;QACD,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,oBAAoB,CAAC,EAAE,CAAC;YACxD,eAAe,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;QACnE,CAAC;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,qBAAqB,CAAC,QAAwB,EAAE,UAAsB,EAAE,MAAc;QACnG,yDAAyD;QACzD,IAAI,UAAU,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC1C,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;gBAC/B,MAAM,cAAc,GAAG,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CACzD,CAAC,CAAC,QAAQ,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;oBACxC,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CACjE,CAAC;gBAEF,IAAI,cAAc,EAAE,CAAC;oBACnB,6DAA6D;oBAC7D,IAAI,cAAc,CAAC,QAAQ,EAAE,cAAc,IAAI,cAAc,CAAC,QAAQ,CAAC,cAAc,GAAG,GAAG,EAAE,CAAC;wBAC5F,IAAI,OAAO,CAAC,QAAQ,KAAK,QAAQ;4BAAE,OAAO,CAAC,QAAQ,GAAG,MAAM,CAAC;wBAC7D,IAAI,OAAO,CAAC,QAAQ,KAAK,MAAM;4BAAE,OAAO,CAAC,QAAQ,GAAG,UAAU,CAAC;oBACjE,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;QAED,8CAA8C;QAC9C,IAAI,UAAU,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC5C,KAAK,MAAM,QAAQ,IAAI,UAAU,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;gBAChE,MAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CACrC,QAAQ,CAAC,QAAQ,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;oBACzC,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAClE,CAAC;gBAEF,IAAI,YAAY,IAAI,QAAQ,CAAC,OAAO,EAAE,CAAC;oBACrC,QAAQ,CAAC,IAAI,CAAC;wBACZ,IAAI,EAAE,gBAAgB;wBACtB,QAAQ,EAAE,MAAM;wBAChB,IAAI,EAAE,CAAC;wBACP,MAAM,EAAE,CAAC;wBACT,OAAO,EAAE,iDAAiD;wBAC1D,UAAU,EAAE,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK;wBAClD,IAAI,EAAE,EAAE;wBACR,QAAQ,EAAE,eAAe;qBAC1B,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,iBAAiB,CAAC,QAAwB,EAAE,KAAa,EAAE,UAAuB;QAC/F,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,MAAM,CAAC;QACxE,MAAM,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,MAAM,CAAC,CAAC,MAAM,CAAC;QAChE,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,MAAM,CAAC;QAEpE,IAAI,WAAW,GAAG,EAAE,CAAC;QACrB,IAAI,KAAK,IAAI,EAAE;YAAE,WAAW,GAAG,2BAA2B,KAAK,UAAU,QAAQ,CAAC,MAAM,sBAAsB,CAAC;aAC1G,IAAI,KAAK,IAAI,EAAE;YAAE,WAAW,GAAG,sBAAsB,KAAK,UAAU,QAAQ,CAAC,MAAM,yBAAyB,CAAC;aAC7G,IAAI,KAAK,IAAI,EAAE;YAAE,WAAW,GAAG,sBAAsB,KAAK,UAAU,QAAQ,GAAG,IAAI,0BAA0B,CAAC;;YAC9G,WAAW,GAAG,sBAAsB,KAAK,UAAU,QAAQ,cAAc,IAAI,oDAAoD,CAAC;QAEvI,IAAI,UAAU,EAAE,CAAC;YACf,MAAM,eAAe,GAAG,EAAE,CAAC;YAC3B,IAAI,UAAU,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC1C,eAAe,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,eAAe,CAAC,MAAM,4BAA4B,CAAC,CAAC;YACzF,CAAC;YACD,IAAI,UAAU,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC5C,eAAe,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,iBAAiB,CAAC,MAAM,6BAA6B,CAAC,CAAC;YAC5F,CAAC;YACD,IAAI,UAAU,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC7C,eAAe,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,kBAAkB,CAAC,MAAM,8BAA8B,CAAC,CAAC;YAC9F,CAAC;YAED,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC/B,WAAW,IAAI,kBAAkB,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;YACjE,CAAC;QACH,CAAC;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,yBAAyB,CAAC,QAAwB,EAAE,UAAuB;QACxF,MAAM,eAAe,GAAa,EAAE,CAAC;QAErC,MAAM,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC;QACvE,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC9B,eAAe,CAAC,IAAI,CAAC,cAAc,cAAc,CAAC,MAAM,8BAA8B,CAAC,CAAC;QAC1F,CAAC;QAED,MAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,YAAY,IAAI,CAAC,CAAC,IAAI,KAAK,oBAAoB,CAAC,CAAC;QACnG,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACzB,eAAe,CAAC,IAAI,CAAC,aAAa,SAAS,CAAC,MAAM,uBAAuB,CAAC,CAAC;QAC7E,CAAC;QAED,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,mBAAmB,CAAC,CAAC;QAC1E,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC5B,eAAe,CAAC,IAAI,CAAC,wBAAwB,YAAY,CAAC,MAAM,aAAa,CAAC,CAAC;QACjF,CAAC;QAED,mCAAmC;QACnC,IAAI,UAAU,EAAE,CAAC;YACf,IAAI,UAAU,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC5C,eAAe,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,iBAAiB,CAAC,MAAM,4CAA4C,CAAC,CAAC;YAC9G,CAAC;YACD,IAAI,UAAU,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC7C,eAAe,CAAC,IAAI,CAAC,YAAY,UAAU,CAAC,kBAAkB,CAAC,MAAM,+BAA+B,CAAC,CAAC;YACxG,CAAC;YACD,IAAI,UAAU,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACzC,eAAe,CAAC,IAAI,CAAC,eAAe,UAAU,CAAC,cAAc,CAAC,MAAM,sCAAsC,CAAC,CAAC;YAC9G,CAAC;QACH,CAAC;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;CACF;AA7kBD,0CA6kBC","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/src/intelligence/pattern-analyzer.ts"],"sourcesContent":["/**\n * VERSATIL SDLC Framework - Level 1: Pattern Analysis System (RAG-Enhanced)\n *\n * Provides intelligent code analysis with optional RAG context using:\n * - Regex pattern matching enhanced with historical patterns\n * - AST-like parsing with learned conventions\n * - Heuristic analysis enriched with project knowledge\n * - Best practice detection from vector memory\n */\n\nimport { MemoryDocument } from '../rag/enhanced-vector-memory-store.js';\n\nexport interface RAGContext {\n  similarPatterns: MemoryDocument[];\n  relevantSolutions: MemoryDocument[];\n  projectConventions: MemoryDocument[];\n  agentExpertise: MemoryDocument[];\n}\n\nexport interface PatternMatch {\n  type: string;\n  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';\n  line: number;\n  column: number;\n  message: string;\n  suggestion: string;\n  code: string;\n  category: 'bug' | 'security' | 'performance' | 'style' | 'best-practice';\n  description?: string;\n}\n\nexport interface AnalysisResult {\n  patterns: PatternMatch[];\n  score: number;\n  summary: string;\n  recommendations: string[];\n  coverage?: number;\n  quality?: number;\n  security?: number;\n  performance?: number;\n  issues?: any[];\n}\n\nexport class PatternAnalyzer {\n  /**\n   * Analyze code for QA patterns (Enhanced Maria) with optional RAG context\n   */\n  static analyzeQA(content: string, filePath: string, ragContext?: RAGContext): AnalysisResult {\n    const patterns: PatternMatch[] = [];\n    const lines = (content || '').split('\\n');\n\n    lines.forEach((line, index) => {\n      const lineNum = index + 1;\n\n      // Detect missing test coverage\n      if (filePath.includes('test') || filePath.includes('spec')) {\n        if (line.includes('it(') || line.includes('test(')) {\n          if (!line.includes('expect') && !line.includes('assert')) {\n            patterns.push({\n              type: 'missing-assertion',\n              severity: 'high',\n              line: lineNum,\n              column: 0,\n              message: 'Test case missing assertions',\n              suggestion: 'Add expect() or assert() to validate behavior',\n              code: line.trim(),\n              category: 'bug'\n            });\n          }\n        }\n      }\n\n      // Detect debugging code in production\n      if (line.includes('console.log') || line.includes('console.debug')) {\n        patterns.push({\n          type: 'debug-code',\n          severity: 'medium',\n          line: lineNum,\n          column: line.indexOf('console'),\n          message: 'Debugging code detected',\n          suggestion: 'Remove console.log statements before production',\n          code: line.trim(),\n          category: 'best-practice'\n        });\n      }\n\n      if (line.includes('debugger')) {\n        patterns.push({\n          type: 'debugger-statement',\n          severity: 'critical',\n          line: lineNum,\n          column: line.indexOf('debugger'),\n          message: 'Debugger statement in code',\n          suggestion: 'Remove debugger statement immediately',\n          code: line.trim(),\n          category: 'bug'\n        });\n      }\n\n      // Detect TODO/FIXME comments\n      if (line.includes('TODO') || line.includes('FIXME')) {\n        patterns.push({\n          type: 'todo-comment',\n          severity: 'low',\n          line: lineNum,\n          column: 0,\n          message: 'Unresolved TODO/FIXME',\n          suggestion: 'Address TODO or create tracking issue',\n          code: line.trim(),\n          category: 'best-practice'\n        });\n      }\n\n      // Detect empty catch blocks\n      if (line.includes('catch') && lines[index + 1]?.trim() === '}') {\n        patterns.push({\n          type: 'empty-catch',\n          severity: 'high',\n          line: lineNum,\n          column: 0,\n          message: 'Empty catch block swallows errors',\n          suggestion: 'Add error logging or proper error handling',\n          code: line.trim(),\n          category: 'bug'\n        });\n      }\n\n      // Detect missing error handling\n      if (line.includes('async ') && line.includes('=>')) {\n        const nextLines = lines.slice(index, index + 10).join('\\n');\n        if (!nextLines.includes('try') && !nextLines.includes('catch')) {\n          patterns.push({\n            type: 'missing-error-handling',\n            severity: 'medium',\n            line: lineNum,\n            column: 0,\n            message: 'Async function without error handling',\n            suggestion: 'Wrap async operations in try-catch',\n            code: line.trim(),\n            category: 'bug'\n          });\n        }\n      }\n    });\n\n    // Apply RAG-enhanced analysis if context is available\n    if (ragContext) {\n      this.enhanceWithRAGContext(patterns, ragContext, 'qa');\n    }\n\n    const score = this.calculateQualityScore(patterns);\n\n    return {\n      patterns,\n      score,\n      summary: this.generateQASummary(patterns, score, ragContext),\n      recommendations: this.generateQARecommendations(patterns, ragContext)\n    };\n  }\n\n  /**\n   * Analyze code for Frontend patterns (Enhanced James)\n   */\n  static analyzeFrontend(content: string, filePath: string, ragContext?: RAGContext): AnalysisResult {\n    const patterns: PatternMatch[] = [];\n    const lines = (content || '').split('\\n');\n\n    lines.forEach((line, index) => {\n      const lineNum = index + 1;\n\n      // Detect debugging code\n      if (line.includes('console.log') || line.includes('console.warn')) {\n        patterns.push({\n          type: 'debugging-code',\n          severity: 'critical',\n          line: lineNum,\n          column: 0,\n          message: 'Console.log detected - remove before production',\n          suggestion: 'Remove debug logging or use proper logger',\n          code: line.trim(),\n          category: 'bug'\n        });\n      }\n\n      if (line.includes('debugger')) {\n        patterns.push({\n          type: 'debugging-code',\n          severity: 'critical',\n          line: lineNum,\n          column: 0,\n          message: 'Debugger statement detected - remove before production',\n          suggestion: 'Remove debugger statement',\n          code: line.trim(),\n          category: 'bug'\n        });\n      }\n\n      // Detect inline styles\n      if (line.includes('style={{') || line.includes('style=\"')) {\n        patterns.push({\n          type: 'inline-styles',\n          severity: 'low',\n          line: lineNum,\n          column: 0,\n          message: 'Inline styles detected',\n          suggestion: 'Use CSS modules or styled-components',\n          code: line.trim(),\n          category: 'best-practice'\n        });\n      }\n\n      // Detect missing key props in lists\n      if (line.includes('.map(') && !line.includes('key=')) {\n        const nextLines = lines.slice(index, index + 5).join('\\n');\n        if (!nextLines.includes('key=')) {\n          patterns.push({\n            type: 'missing-key-prop',\n            severity: 'high',\n            line: lineNum,\n            column: 0,\n            message: 'Missing key prop in list rendering',\n            suggestion: 'Add unique key prop to list items',\n            code: line.trim(),\n            category: 'bug'\n          });\n        }\n      }\n\n      // Detect missing alt text\n      if (line.includes('<img') && !line.includes('alt=')) {\n        patterns.push({\n          type: 'missing-alt-text',\n          severity: 'medium',\n          line: lineNum,\n          column: 0,\n          message: 'Image missing alt text',\n          suggestion: 'Add descriptive alt text for accessibility',\n          code: line.trim(),\n          category: 'best-practice'\n        });\n      }\n\n      // Detect useState without proper naming\n      if (line.includes('useState')) {\n        const match = line.match(/const\\s+\\[(\\w+),\\s*(\\w+)\\]\\s*=\\s*useState/);\n        if (match) {\n          const [, stateName, setterName] = match;\n          const expectedSetter = `set${stateName.charAt(0).toUpperCase()}${stateName.slice(1)}`;\n          if (setterName !== expectedSetter) {\n            patterns.push({\n              type: 'useState-naming',\n              severity: 'low',\n              line: lineNum,\n              column: 0,\n              message: 'useState setter naming inconsistent',\n              suggestion: `Use ${expectedSetter} instead of ${setterName}`,\n              code: line.trim(),\n              category: 'style'\n            });\n          }\n        }\n      }\n\n      // Detect large component files\n      if (index === 0 && lines.length > 300) {\n        patterns.push({\n          type: 'large-component',\n          severity: 'medium',\n          line: 1,\n          column: 0,\n          message: `Component has ${lines.length} lines (>300)`,\n          suggestion: 'Split into smaller, focused components',\n          code: '',\n          category: 'best-practice'\n        });\n      }\n    });\n\n    const score = this.calculateQualityScore(patterns);\n\n    return {\n      patterns,\n      score,\n      summary: this.generateFrontendSummary(patterns, score),\n      recommendations: this.generateFrontendRecommendations(patterns)\n    };\n  }\n\n  /**\n   * Analyze code for Backend patterns (Enhanced Marcus)\n   */\n  static analyzeBackend(content: string, filePath: string, ragContext?: RAGContext): AnalysisResult {\n    const patterns: PatternMatch[] = [];\n    const lines = (content || '').split('\\n');\n\n    lines.forEach((line, index) => {\n      const lineNum = index + 1;\n\n      // Detect debugging code in API routes\n      if (line.includes('console.log') || line.includes('console.warn') || line.includes('console.debug')) {\n        patterns.push({\n          type: 'debugging-code',\n          severity: 'critical',\n          line: lineNum,\n          column: 0,\n          message: 'Console.log detected in backend - remove before production',\n          suggestion: 'Remove debug logging or use proper logger (Winston, Pino)',\n          code: line.trim(),\n          category: 'bug'\n        });\n      }\n\n      if (line.includes('debugger')) {\n        patterns.push({\n          type: 'debugging-code',\n          severity: 'critical',\n          line: lineNum,\n          column: 0,\n          message: 'Debugger statement detected - remove before production',\n          suggestion: 'Remove debugger statement',\n          code: line.trim(),\n          category: 'bug'\n        });\n      }\n\n      // Detect Fastify framework\n      if (line.includes('fastify()') || line.includes('require(\\'fastify\\')') || line.includes('import fastify')) {\n        patterns.push({\n          type: 'fastify-framework',\n          severity: 'info',\n          line: lineNum,\n          column: 0,\n          message: 'Fastify framework detected',\n          suggestion: 'Ensure proper security middleware (helmet, cors)',\n          code: line.trim(),\n          category: 'best-practice'\n        });\n      }\n\n      // Detect SQL injection vulnerabilities\n      if (line.includes('SELECT') || line.includes('INSERT') || line.includes('UPDATE')) {\n        if (line.includes('${') || line.includes('+')) {\n          patterns.push({\n            type: 'security-risk',\n            severity: 'critical',\n            line: lineNum,\n            column: 0,\n            message: 'Potential SQL injection vulnerability',\n            suggestion: 'Use parameterized queries or ORM',\n            code: line.trim(),\n            category: 'security'\n          });\n        }\n      }\n\n      // Detect hardcoded credentials\n      if (line.match(/(password|secret|key|token)\\s*[=:]\\s*['\"][^'\"]+['\"]/i)) {\n        patterns.push({\n          type: 'hardcoded-credentials',\n          severity: 'critical',\n          line: lineNum,\n          column: 0,\n          message: 'Hardcoded credentials detected',\n          suggestion: 'Use environment variables or secret management',\n          code: line.trim().replace(/['\"][^'\"]+['\"]/, '\"***\"'),\n          category: 'security'\n        });\n      }\n\n      // Detect missing input validation\n      if (line.includes('req.body') || line.includes('req.params') || line.includes('req.query')) {\n        const nextLines = lines.slice(index, index + 10).join('\\n');\n        if (!nextLines.includes('validate') && !nextLines.includes('sanitize')) {\n          patterns.push({\n            type: 'missing-validation',\n            severity: 'high',\n            line: lineNum,\n            column: 0,\n            message: 'User input without validation',\n            suggestion: 'Add input validation and sanitization',\n            code: line.trim(),\n            category: 'security'\n          });\n        }\n      }\n\n      // Detect synchronous file operations\n      if (line.includes('fs.readFileSync') || line.includes('fs.writeFileSync')) {\n        patterns.push({\n          type: 'sync-file-operation',\n          severity: 'medium',\n          line: lineNum,\n          column: 0,\n          message: 'Synchronous file operation blocks event loop',\n          suggestion: 'Use async file operations (fs.promises)',\n          code: line.trim(),\n          category: 'performance'\n        });\n      }\n\n      // Detect missing rate limiting\n      if (line.includes('app.post') || line.includes('router.post')) {\n        if (!content.includes('rateLimit') && !content.includes('rateLimiter')) {\n          patterns.push({\n            type: 'missing-rate-limit',\n            severity: 'high',\n            line: lineNum,\n            column: 0,\n            message: 'POST endpoint without rate limiting',\n            suggestion: 'Add rate limiting middleware',\n            code: line.trim(),\n            category: 'security'\n          });\n        }\n      }\n    });\n\n    const score = this.calculateQualityScore(patterns);\n\n    return {\n      patterns,\n      score,\n      summary: this.generateBackendSummary(patterns, score),\n      recommendations: this.generateBackendRecommendations(patterns)\n    };\n  }\n\n  /**\n   * Calculate quality score based on patterns\n   */\n  private static calculateQualityScore(patterns: PatternMatch[]): number {\n    let score = 100;\n\n    patterns.forEach(pattern => {\n      switch (pattern.severity) {\n        case 'critical': score -= 15; break;\n        case 'high': score -= 8; break;\n        case 'medium': score -= 4; break;\n        case 'low': score -= 2; break;\n        case 'info': score -= 1; break;\n      }\n    });\n\n    return Math.max(0, Math.min(100, score));\n  }\n\n\n  /**\n   * Generate Frontend summary\n   */\n  private static generateFrontendSummary(patterns: PatternMatch[], score: number): string {\n    const accessibility = patterns.filter(p => p.type === 'missing-alt-text').length;\n    const performance = patterns.filter(p => p.category === 'performance').length;\n\n    let summary = `Frontend quality score: ${score}/100. `;\n    if (accessibility > 0) summary += `${accessibility} accessibility issues. `;\n    if (performance > 0) summary += `${performance} performance concerns. `;\n\n    return summary || `Frontend code looks good (${score}/100).`;\n  }\n\n  /**\n   * Generate Frontend recommendations\n   */\n  private static generateFrontendRecommendations(patterns: PatternMatch[]): string[] {\n    const recommendations: string[] = [];\n\n    if (patterns.some(p => p.type === 'missing-key-prop')) {\n      recommendations.push('🔑 Add key props to all list items');\n    }\n    if (patterns.some(p => p.type === 'missing-alt-text')) {\n      recommendations.push('♿ Improve accessibility with alt text');\n    }\n    if (patterns.some(p => p.type === 'large-component')) {\n      recommendations.push('📦 Split large components for better maintainability');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Generate Backend summary\n   */\n  private static generateBackendSummary(patterns: PatternMatch[], score: number): string {\n    const security = patterns.filter(p => p.category === 'security').length;\n    const performance = patterns.filter(p => p.category === 'performance').length;\n\n    let summary = `Backend security score: ${score}/100. `;\n    if (security > 0) summary += `⚠️  ${security} security issues found! `;\n    if (performance > 0) summary += `${performance} performance improvements needed. `;\n\n    return summary || `Backend code is secure (${score}/100).`;\n  }\n\n  /**\n   * Generate Backend recommendations\n   */\n  private static generateBackendRecommendations(patterns: PatternMatch[]): string[] {\n    const recommendations: string[] = [];\n\n    if (patterns.some(p => p.type === 'sql-injection')) {\n      recommendations.push('🔒 Fix SQL injection vulnerabilities immediately');\n    }\n    if (patterns.some(p => p.type === 'hardcoded-credentials')) {\n      recommendations.push('🔐 Move credentials to environment variables');\n    }\n    if (patterns.some(p => p.type === 'missing-validation')) {\n      recommendations.push('✅ Add input validation to API endpoints');\n    }\n    if (patterns.some(p => p.type === 'missing-rate-limit')) {\n      recommendations.push('⏱️  Implement rate limiting for security');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Enhance patterns with RAG context knowledge\n   */\n  private static enhanceWithRAGContext(patterns: PatternMatch[], ragContext: RAGContext, domain: string): void {\n    // Apply similar patterns to improve detection confidence\n    if (ragContext.similarPatterns.length > 0) {\n      for (const pattern of patterns) {\n        const similarPattern = ragContext.similarPatterns.find(p =>\n          p.metadata?.tags?.includes(pattern.type) ||\n          p.content.toLowerCase().includes(pattern.type.replace('-', ' '))\n        );\n\n        if (similarPattern) {\n          // Boost severity if pattern was critical in similar contexts\n          if (similarPattern.metadata?.relevanceScore && similarPattern.metadata.relevanceScore > 0.8) {\n            if (pattern.severity === 'medium') pattern.severity = 'high';\n            if (pattern.severity === 'high') pattern.severity = 'critical';\n          }\n        }\n      }\n    }\n\n    // Add recommendations from relevant solutions\n    if (ragContext.relevantSolutions.length > 0) {\n      for (const solution of ragContext.relevantSolutions.slice(0, 3)) {\n        const isApplicable = patterns.some(p =>\n          solution.metadata?.tags?.includes(p.type) ||\n          solution.content.toLowerCase().includes(p.type.replace('-', ' '))\n        );\n\n        if (isApplicable && solution.content) {\n          patterns.push({\n            type: 'rag-suggestion',\n            severity: 'info',\n            line: 0,\n            column: 0,\n            message: `RAG Suggestion: Similar issue solved previously`,\n            suggestion: solution.content.slice(0, 200) + '...',\n            code: '',\n            category: 'best-practice'\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Generate QA summary with RAG context\n   */\n  private static generateQASummary(patterns: PatternMatch[], score: number, ragContext?: RAGContext): string {\n    const critical = patterns.filter(p => p.severity === 'critical').length;\n    const high = patterns.filter(p => p.severity === 'high').length;\n    const medium = patterns.filter(p => p.severity === 'medium').length;\n\n    let baseSummary = '';\n    if (score >= 90) baseSummary = `Excellent code quality (${score}/100). ${patterns.length} minor issues found.`;\n    else if (score >= 75) baseSummary = `Good code quality (${score}/100). ${patterns.length} issues need attention.`;\n    else if (score >= 60) baseSummary = `Fair code quality (${score}/100). ${critical + high} important issues found.`;\n    else baseSummary = `Poor code quality (${score}/100). ${critical} critical, ${high} high priority issues require immediate attention.`;\n\n    if (ragContext) {\n      const ragEnhancements = [];\n      if (ragContext.similarPatterns.length > 0) {\n        ragEnhancements.push(`${ragContext.similarPatterns.length} similar patterns analyzed`);\n      }\n      if (ragContext.relevantSolutions.length > 0) {\n        ragEnhancements.push(`${ragContext.relevantSolutions.length} proven solutions available`);\n      }\n      if (ragContext.projectConventions.length > 0) {\n        ragEnhancements.push(`${ragContext.projectConventions.length} project conventions applied`);\n      }\n\n      if (ragEnhancements.length > 0) {\n        baseSummary += ` RAG-Enhanced: ${ragEnhancements.join(', ')}.`;\n      }\n    }\n\n    return baseSummary;\n  }\n\n  /**\n   * Generate QA recommendations with RAG context\n   */\n  private static generateQARecommendations(patterns: PatternMatch[], ragContext?: RAGContext): string[] {\n    const recommendations: string[] = [];\n\n    const criticalIssues = patterns.filter(p => p.severity === 'critical');\n    if (criticalIssues.length > 0) {\n      recommendations.push(`🚨 Address ${criticalIssues.length} critical issues immediately`);\n    }\n\n    const debugCode = patterns.filter(p => p.type === 'debug-code' || p.type === 'debugger-statement');\n    if (debugCode.length > 0) {\n      recommendations.push(`🧹 Remove ${debugCode.length} debugging statements`);\n    }\n\n    const missingTests = patterns.filter(p => p.type === 'missing-assertion');\n    if (missingTests.length > 0) {\n      recommendations.push(`🧪 Add assertions to ${missingTests.length} test cases`);\n    }\n\n    // Add RAG-specific recommendations\n    if (ragContext) {\n      if (ragContext.relevantSolutions.length > 0) {\n        recommendations.push(`💡 ${ragContext.relevantSolutions.length} similar solutions found in knowledge base`);\n      }\n      if (ragContext.projectConventions.length > 0) {\n        recommendations.push(`📋 Apply ${ragContext.projectConventions.length} project-specific conventions`);\n      }\n      if (ragContext.agentExpertise.length > 0) {\n        recommendations.push(`🎯 Leverage ${ragContext.agentExpertise.length} expert insights from team knowledge`);\n      }\n    }\n\n    return recommendations;\n  }\n}"],"version":3}