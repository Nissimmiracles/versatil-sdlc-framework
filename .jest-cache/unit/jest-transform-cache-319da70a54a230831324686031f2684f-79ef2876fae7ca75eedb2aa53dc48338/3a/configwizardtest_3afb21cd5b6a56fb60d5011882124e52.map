{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/tests/unit/config/config-wizard.test.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/tests/unit/config/config-wizard.test.ts"],"sourcesContent":["/**\n * VERSATIL SDLC Framework - Configuration Wizard Tests\n * Comprehensive test suite for the interactive configuration wizard\n *\n * Coverage Target: 90%+\n * Test Scenarios: 6 core scenarios covering all wizard flows\n */\n\nimport { ConfigWizard } from '../../../src/config/config-wizard';\nimport { PreferenceManager, UserPreferences } from '../../../src/config/preference-manager';\nimport { ConfigProfileManager } from '../../../src/config/config-profiles';\nimport * as readline from 'readline';\nimport { EventEmitter } from 'events';\n\n// Mock readline module\njest.mock('readline');\n\n// Create shared mock functions that will be assigned in jest.mock\nlet mockGetDefaultPreferences: jest.Mock;\nlet mockSavePreferences: jest.Mock;\nlet mockGetPreferences: jest.Mock;\nlet mockGetSummary: jest.Mock;\nlet mockResetToDefaults: jest.Mock;\n\n// Mock PreferenceManager\njest.mock('../../../src/config/preference-manager', () => {\n  const mockPreferences: UserPreferences = {\n    updateBehavior: 'notify',\n    updateChannel: 'stable',\n    safetyLevel: 'balanced',\n    checkFrequency: 24,\n    autoInstallSecurity: true,\n    rollbackBehavior: 'prompt',\n    maxRollbackPoints: 5,\n    rollbackOnFailure: true,\n    notificationLevel: 'important',\n    notifyOnUpdateAvailable: true,\n    notifyOnUpdateInstalled: true,\n    notifyOnSecurityUpdate: true,\n    notifyOnBreakingChange: true,\n    enableTelemetry: true,\n    shareErrorReports: true,\n    shareUsageStatistics: false,\n    backupBeforeUpdate: true,\n    validateAfterUpdate: true,\n    allowPrerelease: false,\n    skipOptionalDependencies: false,\n    createdAt: '2025-01-01T00:00:00.000Z',\n    lastModified: '2025-01-01T00:00:00.000Z',\n    version: '1.0.0'\n  };\n\n  // Create mock functions inside the factory\n  const mockFns = {\n    getDefaultPreferences: jest.fn().mockReturnValue(mockPreferences),\n    savePreferences: jest.fn().mockResolvedValue(undefined),\n    getPreferences: jest.fn().mockResolvedValue(mockPreferences),\n    getSummary: jest.fn().mockResolvedValue('Mock preferences summary'),\n    resetToDefaults: jest.fn().mockResolvedValue(undefined)\n  };\n\n  return {\n    PreferenceManager: jest.fn().mockImplementation(() => mockFns),\n    // Export mocks so they can be accessed\n    __mockFunctions: mockFns\n  };\n});\n\n// Mock ConfigProfileManager\njest.mock('../../../src/config/config-profiles', () => {\n  const mockBalancedProfile = {\n    name: 'Balanced',\n    description: 'Good balance between safety and staying up-to-date.',\n    emoji: '⚖️',\n    bestFor: 'Most teams, development environments, general use',\n    preferences: {\n      updateBehavior: 'notify',\n      updateChannel: 'stable',\n      safetyLevel: 'balanced',\n      checkFrequency: 24,\n      autoInstallSecurity: true,\n      rollbackBehavior: 'prompt',\n      maxRollbackPoints: 5,\n      rollbackOnFailure: true,\n      notificationLevel: 'important',\n      notifyOnUpdateAvailable: true,\n      notifyOnUpdateInstalled: true,\n      notifyOnSecurityUpdate: true,\n      notifyOnBreakingChange: true,\n      enableTelemetry: true,\n      shareErrorReports: true,\n      shareUsageStatistics: false,\n      backupBeforeUpdate: true,\n      validateAfterUpdate: true,\n      allowPrerelease: false,\n      skipOptionalDependencies: false,\n      createdAt: '2025-01-01T00:00:00.000Z',\n      lastModified: '2025-01-01T00:00:00.000Z',\n      version: '1.0.0'\n    }\n  };\n\n  const mockConservativeProfile = {\n    name: 'Conservative',\n    description: 'Maximum safety and stability.',\n    emoji: '🛡️',\n    bestFor: 'Production environments',\n    preferences: {\n      ...mockBalancedProfile.preferences,\n      updateBehavior: 'manual' as const,\n      safetyLevel: 'conservative' as const,\n      checkFrequency: 168,\n      autoInstallSecurity: false,\n      maxRollbackPoints: 10\n    }\n  };\n\n  const mockAggressiveProfile = {\n    name: 'Aggressive',\n    description: 'Latest features, bleeding edge.',\n    emoji: '⚡',\n    bestFor: 'Early adopters',\n    preferences: {\n      ...mockBalancedProfile.preferences,\n      updateBehavior: 'auto' as const,\n      updateChannel: 'beta' as const,\n      safetyLevel: 'fast' as const,\n      checkFrequency: 6,\n      maxRollbackPoints: 3,\n      allowPrerelease: true\n    }\n  };\n\n  return {\n    ConfigProfileManager: jest.fn().mockImplementation(() => ({\n      getAvailableProfiles: jest.fn().mockReturnValue([\n        mockConservativeProfile,\n        mockBalancedProfile,\n        mockAggressiveProfile\n      ]),\n      getProfile: jest.fn().mockImplementation((name: string) => {\n        switch (name) {\n          case 'conservative':\n            return mockConservativeProfile;\n          case 'balanced':\n            return mockBalancedProfile;\n          case 'aggressive':\n            return mockAggressiveProfile;\n          default:\n            return null;\n        }\n      })\n    }))\n  };\n});\n\n/**\n * Mock readline Interface\n */\nclass MockReadlineInterface extends EventEmitter {\n  private questionResponses: Map<string, string[]> = new Map();\n  private currentQuestionIndex = 0;\n\n  question(query: string, callback: (answer: string) => void): void {\n    // Extract a simplified query key\n    const queryKey = this.simplifyQuery(query);\n    const responses = this.questionResponses.get(queryKey) || [''];\n    const response = responses[this.currentQuestionIndex % responses.length] || responses[0];\n\n    // Increment for next question\n    this.currentQuestionIndex++;\n\n    // Call callback asynchronously to simulate real behavior\n    setImmediate(() => callback(response));\n  }\n\n  close(): void {\n    this.emit('close');\n  }\n\n  setResponses(responses: Map<string, string[]>): void {\n    this.questionResponses = responses;\n    this.currentQuestionIndex = 0;\n  }\n\n  private simplifyQuery(query: string): string {\n    // Extract key parts of the query for matching (check longer strings first to avoid partial matches)\n    if (query.includes('Choose setup type')) return 'setup-type';\n    if (query.includes('Continue with these settings')) return 'confirm-quick';\n    if (query.includes('Choose a profile')) return 'profile-choice';\n    if (query.includes('How should updates be handled')) return 'update-behavior';\n    if (query.includes('Which update channel')) return 'update-channel';\n    if (query.includes('Choose safety level')) return 'safety-level';\n    if (query.includes('Auto-install security updates')) return 'auto-security';\n    if (query.includes('Create backup before each update')) return 'backup';\n    if (query.includes('Maximum number of backups')) return 'max-backups';\n    if (query.includes('Auto-rollback if update fails')) return 'auto-rollback';\n    if (query.includes('Notification level')) return 'notification-level';\n    if (query.includes('Enable telemetry')) return 'enable-telemetry';\n    if (query.includes('Share error reports')) return 'share-errors';\n    if (query.includes('Share usage statistics')) return 'share-usage';\n    if (query.includes('What would you like to change')) return 'update-category';\n    if (query.includes('Reset all preferences')) return 'confirm-reset';\n    if (query.includes('Your choice')) return 'default'; // Generic choice prompt\n\n    return 'default';\n  }\n}\n\ndescribe('ConfigWizard', () => {\n  let wizard: ConfigWizard;\n  let mockRl: MockReadlineInterface;\n  let consoleLogSpy: jest.SpyInstance;\n\n  beforeAll(() => {\n    // Get the mock functions from the mocked module\n    const PreferenceManagerModule = require('../../../src/config/preference-manager');\n    const mockFns = (PreferenceManagerModule as any).__mockFunctions;\n\n    mockGetDefaultPreferences = mockFns.getDefaultPreferences;\n    mockSavePreferences = mockFns.savePreferences;\n    mockGetPreferences = mockFns.getPreferences;\n    mockGetSummary = mockFns.getSummary;\n    mockResetToDefaults = mockFns.resetToDefaults;\n  });\n\n  beforeEach(() => {\n    // Clear all mock calls\n    jest.clearAllMocks();\n\n    // Create mock readline interface\n    mockRl = new MockReadlineInterface();\n\n    // Mock readline.createInterface to return our mock\n    (readline.createInterface as jest.Mock).mockReturnValue(mockRl);\n\n    // Spy on console.log to suppress output during tests\n    consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n\n    // Create wizard instance\n    wizard = new ConfigWizard();\n  });\n\n  afterEach(() => {\n    consoleLogSpy.mockRestore();\n  });\n\n  /**\n   * Test Scenario 1: Complete Wizard Flow (Quick Setup)\n   */\n  describe('wizardFlow - complete successfully', () => {\n    it('should complete quick setup wizard successfully', async () => {\n      // Setup mock responses for quick setup\n      mockRl.setResponses(new Map([\n        ['setup-type', ['1']], // Choose quick setup\n        ['confirm-quick', ['y']] // Confirm quick setup\n      ]));\n\n      // Run wizard\n      const result = await wizard.run();\n\n      // Verify results\n      expect(result).toBeDefined();\n      expect(result.updateBehavior).toBe('notify');\n      expect(result.updateChannel).toBe('stable');\n      expect(result.safetyLevel).toBe('balanced');\n\n      // Verify readline was closed\n      expect(mockRl.listenerCount('close')).toBe(0);\n    });\n\n    it('should complete wizard and save preferences', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['1']],\n        ['confirm-quick', ['y']]\n      ]));\n\n      await wizard.run();\n\n      // Verify savePreferences was called\n      expect(mockSavePreferences).toHaveBeenCalled();\n    });\n\n    it('should switch to custom setup if quick setup is declined', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['1']], // Choose quick setup\n        ['confirm-quick', ['n']], // Decline quick setup\n        ['update-behavior', ['2']],\n        ['update-channel', ['1']],\n        ['safety-level', ['2']],\n        ['auto-security', ['y']],\n        ['backup', ['y']],\n        ['max-backups', ['5']],\n        ['auto-rollback', ['y']],\n        ['notification-level', ['2']],\n        ['enable-telemetry', ['y']],\n        ['share-errors', ['y']],\n        ['share-usage', ['n']]\n      ]));\n\n      const result = await wizard.run();\n\n      expect(result).toBeDefined();\n      expect(result.updateBehavior).toBe('notify');\n    });\n  });\n\n  /**\n   * Test Scenario 2: Profile Selection - Development Profile\n   */\n  describe('profileSelection - dev profile', () => {\n    it('should use balanced profile when selected', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['3']], // Choose profile setup\n        ['profile-choice', ['2']] // Choose balanced profile\n      ]));\n\n      const result = await wizard.run();\n\n      expect(result).toBeDefined();\n      expect(result.updateBehavior).toBe('notify');\n      expect(result.updateChannel).toBe('stable');\n      expect(result.safetyLevel).toBe('balanced');\n      expect(result.maxRollbackPoints).toBe(5);\n    });\n\n    it('should display all available profiles', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['3']],\n        ['profile-choice', ['2']]\n      ]));\n\n      await wizard.run();\n\n      // Verify profile information was logged\n      // Debug: log all console calls\n      const allCalls = consoleLogSpy.mock.calls.map(call => call.join(' '));\n      console.error('ALL CALLS:', JSON.stringify(allCalls, null, 2));\n      const hasAvailableProfiles = allCalls.some(call => call.includes('Available profiles'));\n      expect(hasAvailableProfiles).toBe(true);\n    });\n  });\n\n  /**\n   * Test Scenario 3: Profile Selection - Production Profile\n   */\n  describe('profileSelection - production profile', () => {\n    it('should use conservative profile with stricter settings', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['3']], // Choose profile setup\n        ['profile-choice', ['1']] // Choose conservative profile\n      ]));\n\n      const result = await wizard.run();\n\n      expect(result).toBeDefined();\n      expect(result.updateBehavior).toBe('manual');\n      expect(result.safetyLevel).toBe('conservative');\n      expect(result.checkFrequency).toBe(168); // Weekly\n      expect(result.autoInstallSecurity).toBe(false);\n      expect(result.maxRollbackPoints).toBe(10);\n    });\n\n    it('should use aggressive profile with latest features', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['3']], // Choose profile setup\n        ['profile-choice', ['3']] // Choose aggressive profile\n      ]));\n\n      const result = await wizard.run();\n\n      expect(result).toBeDefined();\n      expect(result.updateBehavior).toBe('auto');\n      expect(result.updateChannel).toBe('beta');\n      expect(result.safetyLevel).toBe('fast');\n      expect(result.checkFrequency).toBe(6); // Every 6 hours\n      expect(result.maxRollbackPoints).toBe(3);\n      expect(result.allowPrerelease).toBe(true);\n    });\n\n    it('should handle invalid profile selection gracefully', async () => {\n      // Mock getProfile to return null for invalid selection\n      const profileManager = new ConfigProfileManager();\n      (profileManager.getProfile as jest.Mock).mockReturnValueOnce(null);\n\n      mockRl.setResponses(new Map([\n        ['setup-type', ['3']],\n        ['profile-choice', ['999']] // Invalid choice\n      ]));\n\n      await expect(wizard.run()).rejects.toThrow('Invalid profile');\n    });\n  });\n\n  /**\n   * Test Scenario 4: Custom Configuration - User Input\n   */\n  describe('customConfiguration - user input', () => {\n    it('should collect all custom settings from user', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['2']], // Choose custom setup\n        ['update-behavior', ['1']], // Auto\n        ['update-channel', ['2']], // Beta\n        ['safety-level', ['3']], // Fast\n        ['auto-security', ['y']],\n        ['backup', ['y']],\n        ['max-backups', ['7']],\n        ['auto-rollback', ['y']],\n        ['notification-level', ['1']], // All\n        ['enable-telemetry', ['y']],\n        ['share-errors', ['y']],\n        ['share-usage', ['y']]\n      ]));\n\n      const result = await wizard.run();\n\n      expect(result).toBeDefined();\n      expect(result.updateBehavior).toBe('auto');\n      expect(result.updateChannel).toBe('beta');\n      expect(result.safetyLevel).toBe('fast');\n      expect(result.autoInstallSecurity).toBe(true);\n      expect(result.backupBeforeUpdate).toBe(true);\n      expect(result.maxRollbackPoints).toBe(7);\n      expect(result.rollbackOnFailure).toBe(true);\n      expect(result.notificationLevel).toBe('all');\n      expect(result.enableTelemetry).toBe(true);\n      expect(result.shareErrorReports).toBe(true);\n      expect(result.shareUsageStatistics).toBe(true);\n    });\n\n    it('should handle no backup scenario', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['2']],\n        ['update-behavior', ['3']], // Manual\n        ['update-channel', ['1']], // Stable\n        ['safety-level', ['1']], // Conservative\n        ['auto-security', ['n']],\n        ['backup', ['n']], // No backup\n        ['auto-rollback', ['n']],\n        ['notification-level', ['4']], // None\n        ['enable-telemetry', ['n']]\n      ]));\n\n      const result = await wizard.run();\n\n      expect(result).toBeDefined();\n      expect(result.backupBeforeUpdate).toBe(false);\n      expect(result.rollbackOnFailure).toBe(false);\n      expect(result.notificationLevel).toBe('none');\n      expect(result.enableTelemetry).toBe(false);\n    });\n\n    it('should handle telemetry disabled scenario', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['2']],\n        ['update-behavior', ['2']],\n        ['update-channel', ['1']],\n        ['safety-level', ['2']],\n        ['auto-security', ['y']],\n        ['backup', ['y']],\n        ['max-backups', ['5']],\n        ['auto-rollback', ['y']],\n        ['notification-level', ['2']],\n        ['enable-telemetry', ['n']] // Telemetry disabled\n      ]));\n\n      const result = await wizard.run();\n\n      expect(result).toBeDefined();\n      expect(result.enableTelemetry).toBe(false);\n      // When telemetry is disabled, share settings should not be asked\n    });\n  });\n\n  /**\n   * Test Scenario 5: Validation During Wizard - Invalid Inputs\n   */\n  describe('validationDuringWizard - invalid inputs', () => {\n    it('should handle invalid choice and use default', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['999']], // Invalid choice, should default to '1'\n        ['confirm-quick', ['y']]\n      ]));\n\n      const result = await wizard.run();\n\n      expect(result).toBeDefined();\n      // Should use default quick setup\n    });\n\n    it('should handle empty input and use defaults', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['']], // Empty, should use default\n        ['confirm-quick', ['']] // Empty yes/no, should use default (true)\n      ]));\n\n      const result = await wizard.run();\n\n      expect(result).toBeDefined();\n    });\n\n    it('should parse numeric inputs correctly', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['2']],\n        ['update-behavior', ['2']],\n        ['update-channel', ['1']],\n        ['safety-level', ['2']],\n        ['auto-security', ['y']],\n        ['backup', ['y']],\n        ['max-backups', ['abc']], // Invalid number, should default to 5\n        ['auto-rollback', ['y']],\n        ['notification-level', ['2']],\n        ['enable-telemetry', ['y']],\n        ['share-errors', ['y']],\n        ['share-usage', ['n']]\n      ]));\n\n      const result = await wizard.run();\n\n      expect(result).toBeDefined();\n      expect(result.maxRollbackPoints).toBe(5); // Should fall back to default\n    });\n\n    it('should handle various yes/no input formats', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['2']],\n        ['update-behavior', ['2']],\n        ['update-channel', ['1']],\n        ['safety-level', ['2']],\n        ['auto-security', ['YES']], // Uppercase\n        ['backup', ['Y']], // Single letter uppercase\n        ['max-backups', ['5']],\n        ['auto-rollback', ['yes']], // Lowercase full word\n        ['notification-level', ['2']],\n        ['enable-telemetry', ['y']],\n        ['share-errors', ['y']],\n        ['share-usage', ['NO']] // Uppercase NO\n      ]));\n\n      const result = await wizard.run();\n\n      expect(result).toBeDefined();\n      expect(result.autoInstallSecurity).toBe(true);\n      expect(result.backupBeforeUpdate).toBe(true);\n      expect(result.rollbackOnFailure).toBe(true);\n      expect(result.shareUsageStatistics).toBe(false);\n    });\n  });\n\n  /**\n   * Test Scenario 6: Save Configuration - Persist to Disk\n   */\n  describe('saveConfiguration - persist to disk', () => {\n    it('should save configuration to preferences file', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['1']],\n        ['confirm-quick', ['y']]\n      ]));\n\n      const result = await wizard.run();\n\n      // Verify savePreferences was called with the result\n      expect(mockSavePreferences).toHaveBeenCalledWith(result);\n    });\n\n    it('should save custom configuration correctly', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['2']],\n        ['update-behavior', ['3']],\n        ['update-channel', ['1']],\n        ['safety-level', ['1']],\n        ['auto-security', ['n']],\n        ['backup', ['y']],\n        ['max-backups', ['10']],\n        ['auto-rollback', ['y']],\n        ['notification-level', ['1']],\n        ['enable-telemetry', ['y']],\n        ['share-errors', ['y']],\n        ['share-usage', ['y']]\n      ]));\n\n      await wizard.run();\n\n      expect(mockSavePreferences).toHaveBeenCalled();\n\n      const savedPrefs = mockSavePreferences.mock.calls[0][0];\n      expect(savedPrefs.updateBehavior).toBe('manual');\n      expect(savedPrefs.maxRollbackPoints).toBe(10);\n    });\n\n    it('should display success message after saving', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['1']],\n        ['confirm-quick', ['y']]\n      ]));\n\n      await wizard.run();\n\n      expect(consoleLogSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Setup complete')\n      );\n    });\n  });\n\n  /**\n   * Additional Test: Minimal Wizard (CI/Automated)\n   */\n  describe('runMinimal - automated setup', () => {\n    it('should run minimal wizard for CI environments', async () => {\n      const result = await wizard.runMinimal();\n\n      expect(result).toBeDefined();\n      expect(result.updateBehavior).toBe('manual');\n      expect(result.notificationLevel).toBe('none');\n      expect(result.enableTelemetry).toBe(false);\n    });\n\n    it('should save minimal configuration', async () => {\n      await wizard.runMinimal();\n\n      expect(mockSavePreferences).toHaveBeenCalled();\n    });\n  });\n\n  /**\n   * Additional Test: Update Preferences\n   */\n  describe('updatePreferences - interactive update', () => {\n    it('should update existing preferences', async () => {\n      mockRl.setResponses(new Map([\n        ['update-category', ['1']], // Update settings\n        ['update-behavior', ['1']] // Change to auto\n      ]));\n\n      await wizard.updatePreferences();\n\n      expect(mockGetPreferences).toHaveBeenCalled();\n      expect(mockSavePreferences).toHaveBeenCalled();\n    });\n\n    it('should handle reset to defaults', async () => {\n      mockRl.setResponses(new Map([\n        ['update-category', ['6']], // Reset to defaults\n        ['confirm-reset', ['y']] // Confirm reset\n      ]));\n\n      await wizard.updatePreferences();\n\n      expect(mockResetToDefaults).toHaveBeenCalled();\n    });\n\n    it('should handle view all settings', async () => {\n      mockRl.setResponses(new Map([\n        ['update-category', ['5']] // View all settings\n      ]));\n\n      await wizard.updatePreferences();\n\n      expect(mockGetSummary).toHaveBeenCalled();\n    });\n\n    it('should update rollback settings', async () => {\n      mockRl.setResponses(new Map([\n        ['update-category', ['2']], // Rollback settings\n        ['auto-rollback', ['n']] // Disable auto-rollback\n      ]));\n\n      await wizard.updatePreferences();\n\n      expect(mockSavePreferences).toHaveBeenCalled();\n    });\n\n    it('should update notification settings', async () => {\n      mockRl.setResponses(new Map([\n        ['update-category', ['3']], // Notification settings\n        ['notification-level', ['4']] // None\n      ]));\n\n      await wizard.updatePreferences();\n\n      expect(mockSavePreferences).toHaveBeenCalled();\n    });\n\n    it('should update telemetry settings', async () => {\n      mockRl.setResponses(new Map([\n        ['update-category', ['4']], // Telemetry settings\n        ['enable-telemetry', ['n']] // Disable telemetry\n      ]));\n\n      await wizard.updatePreferences();\n\n      expect(mockSavePreferences).toHaveBeenCalled();\n    });\n\n    it('should not reset if user declines confirmation', async () => {\n      mockRl.setResponses(new Map([\n        ['update-category', ['6']], // Reset to defaults\n        ['confirm-reset', ['n']] // Decline reset\n      ]));\n\n      await wizard.updatePreferences();\n\n      expect(mockResetToDefaults).not.toHaveBeenCalled();\n    });\n  });\n\n  /**\n   * Edge Cases\n   */\n  describe('edgeCases - boundary conditions', () => {\n    it('should handle maximum backup points input', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['2']],\n        ['update-behavior', ['2']],\n        ['update-channel', ['1']],\n        ['safety-level', ['2']],\n        ['auto-security', ['y']],\n        ['backup', ['y']],\n        ['max-backups', ['999']],\n        ['auto-rollback', ['y']],\n        ['notification-level', ['2']],\n        ['enable-telemetry', ['n']]\n      ]));\n\n      const result = await wizard.run();\n\n      expect(result.maxRollbackPoints).toBe(999);\n    });\n\n    it('should handle zero backup points', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['2']],\n        ['update-behavior', ['2']],\n        ['update-channel', ['1']],\n        ['safety-level', ['2']],\n        ['auto-security', ['y']],\n        ['backup', ['y']],\n        ['max-backups', ['0']],\n        ['auto-rollback', ['y']],\n        ['notification-level', ['2']],\n        ['enable-telemetry', ['n']]\n      ]));\n\n      const result = await wizard.run();\n\n      expect(result.maxRollbackPoints).toBe(0);\n    });\n\n    it('should handle negative number input gracefully', async () => {\n      mockRl.setResponses(new Map([\n        ['setup-type', ['2']],\n        ['update-behavior', ['2']],\n        ['update-channel', ['1']],\n        ['safety-level', ['2']],\n        ['auto-security', ['y']],\n        ['backup', ['y']],\n        ['max-backups', ['-5']], // Negative number\n        ['auto-rollback', ['y']],\n        ['notification-level', ['2']],\n        ['enable-telemetry', ['n']]\n      ]));\n\n      const result = await wizard.run();\n\n      // Should parse to -5 or fall back to default\n      expect(typeof result.maxRollbackPoints).toBe('number');\n    });\n  });\n});\n"],"version":3}