{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/src/agents/contracts/agent-handoff-contract.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/src/agents/contracts/agent-handoff-contract.ts"],"sourcesContent":["/**\n * Agent Handoff Contract System\n *\n * Ensures reliable agent-to-agent communication with validation,\n * memory snapshots, and state verification.\n *\n * Use Cases:\n * - Three-tier handoffs: Alex-BA → (Dana + Marcus + James)\n * - Sequential handoffs: Marcus → Maria-QA\n * - Complex workflows: Sarah-PM orchestrating multi-agent tasks\n *\n * Philosophy: \"Make implicit expectations explicit through contracts\"\n */\n\nimport { AgentId } from '../../memory/memory-tool-config.js';\n\n/**\n * Contract version for backward compatibility\n */\nexport const CONTRACT_VERSION = '1.0.0';\n\n/**\n * Handoff types supported\n */\nexport type HandoffType =\n  | 'sequential'      // One agent → one agent (Marcus → Maria)\n  | 'parallel'        // One agent → multiple agents (Alex → Dana+Marcus+James)\n  | 'aggregation'     // Multiple agents → one agent (Dana+Marcus+James → Maria)\n  | 'broadcast'       // One agent → all agents (Sarah → everyone)\n  | 'conditional';    // Handoff based on conditions (if error, goto Maria)\n\n/**\n * Priority levels for handoff urgency\n */\nexport type HandoffPriority = 'low' | 'normal' | 'high' | 'critical';\n\n/**\n * Handoff status for tracking\n */\nexport type HandoffStatus =\n  | 'pending'         // Contract created, not yet sent\n  | 'in_transit'      // Sent to receiving agent(s)\n  | 'accepted'        // Receiving agent acknowledged\n  | 'rejected'        // Receiving agent rejected (validation failed)\n  | 'completed'       // Work finished by receiving agent\n  | 'failed'          // Handoff failed (timeout, error, etc.)\n  | 'cancelled';      // Handoff cancelled by sender\n\n/**\n * Memory snapshot at handoff point\n */\nexport interface MemorySnapshot {\n  /**\n   * Agent that created the snapshot\n   */\n  agentId: AgentId;\n\n  /**\n   * Timestamp of snapshot creation\n   */\n  timestamp: Date;\n\n  /**\n   * Memory files included in snapshot\n   * Key: relative path (e.g., \"test-patterns.md\")\n   * Value: file content\n   */\n  memoryFiles: Record<string, string>;\n\n  /**\n   * Critical patterns to preserve\n   * Extracted from memory files for quick reference\n   */\n  criticalPatterns: Array<{\n    category: string;\n    title: string;\n    content: string;\n  }>;\n\n  /**\n   * Context summary (high-level state)\n   */\n  contextSummary: string;\n\n  /**\n   * Token count in snapshot (for context management)\n   */\n  estimatedTokens: number;\n}\n\n/**\n * Work item to be performed by receiving agent\n */\nexport interface WorkItem {\n  /**\n   * Unique identifier for this work item\n   */\n  id: string;\n\n  /**\n   * Type of work (implementation, review, testing, etc.)\n   */\n  type: 'implementation' | 'review' | 'testing' | 'analysis' | 'documentation' | 'bugfix';\n\n  /**\n   * Description of work to be done\n   */\n  description: string;\n\n  /**\n   * Acceptance criteria (how to know it's done)\n   */\n  acceptanceCriteria: string[];\n\n  /**\n   * Files involved in this work\n   */\n  files?: string[];\n\n  /**\n   * Estimated effort (hours)\n   */\n  estimatedEffort?: number;\n\n  /**\n   * Priority of this work item\n   */\n  priority: HandoffPriority;\n\n  /**\n   * Dependencies (other work item IDs that must complete first)\n   */\n  dependencies?: string[];\n\n  /**\n   * Metadata specific to work type\n   */\n  metadata?: Record<string, any>;\n}\n\n/**\n * Expected output from receiving agent\n */\nexport interface ExpectedOutput {\n  /**\n   * What artifacts should be produced\n   */\n  artifacts: Array<{\n    type: 'code' | 'tests' | 'documentation' | 'report' | 'data';\n    description: string;\n    required: boolean;\n  }>;\n\n  /**\n   * Quality gates that must pass\n   */\n  qualityGates?: Array<{\n    name: string;\n    description: string;\n    threshold: number | string;\n  }>;\n\n  /**\n   * Expected completion time (hours)\n   */\n  expectedDuration?: number;\n\n  /**\n   * Success criteria\n   */\n  successCriteria: string[];\n}\n\n/**\n * Agent Handoff Contract\n *\n * Formal contract between sending and receiving agents\n */\nexport interface AgentHandoffContract {\n  /**\n   * Contract metadata\n   */\n  contractId: string;\n  version: string;\n  createdAt: Date;\n  expiresAt?: Date;\n\n  /**\n   * Handoff participants\n   */\n  sender: {\n    agentId: AgentId;\n    sessionId?: string;\n  };\n\n  receivers: Array<{\n    agentId: AgentId;\n    sessionId?: string;\n    role?: string; // e.g., \"database\", \"api\", \"frontend\"\n  }>;\n\n  /**\n   * Handoff configuration\n   */\n  type: HandoffType;\n  priority: HandoffPriority;\n  status: HandoffStatus;\n\n  /**\n   * Work to be performed\n   */\n  workItems: WorkItem[];\n\n  /**\n   * Expected outputs\n   */\n  expectedOutput: ExpectedOutput;\n\n  /**\n   * Memory snapshot from sender\n   */\n  memorySnapshot: MemorySnapshot;\n\n  /**\n   * Context provided to receivers\n   */\n  context: {\n    /**\n     * Project context (tech stack, conventions, etc.)\n     */\n    project?: {\n      name?: string;\n      techStack?: string[];\n      conventions?: string[];\n    };\n\n    /**\n     * Feature context (what we're building)\n     */\n    feature?: {\n      name: string;\n      description: string;\n      userStories?: string[];\n    };\n\n    /**\n     * Technical context (API contracts, schemas, etc.)\n     */\n    technical?: {\n      apiContract?: Record<string, any>;\n      databaseSchema?: Record<string, any>;\n      dependencies?: string[];\n    };\n\n    /**\n     * Business context (why we're building this)\n     */\n    business?: {\n      goals?: string[];\n      constraints?: string[];\n      stakeholders?: string[];\n    };\n  };\n\n  /**\n   * Communication preferences\n   */\n  communication?: {\n    /**\n     * How should receivers report progress?\n     */\n    progressReporting?: 'none' | 'milestones' | 'frequent';\n\n    /**\n     * How should receivers ask questions?\n     */\n    questionHandling?: 'block' | 'assume' | 'escalate';\n\n    /**\n     * Preferred update frequency (minutes)\n     */\n    updateFrequency?: number;\n  };\n\n  /**\n   * Validation rules\n   */\n  validation?: {\n    /**\n     * Required fields that must be present\n     */\n    requiredFields?: string[];\n\n    /**\n     * Custom validation functions (serialized)\n     */\n    customValidators?: Array<{\n      name: string;\n      rule: string; // Serialized function\n      errorMessage: string;\n    }>;\n  };\n\n  /**\n   * Actual results (filled by receiving agents)\n   */\n  results?: {\n    /**\n     * Agent that completed the work\n     */\n    completedBy?: AgentId;\n\n    /**\n     * Completion timestamp\n     */\n    completedAt?: Date;\n\n    /**\n     * Actual artifacts produced\n     */\n    artifacts?: Array<{\n      type: string;\n      path: string;\n      description: string;\n    }>;\n\n    /**\n     * Quality gate results\n     */\n    qualityResults?: Array<{\n      gate: string;\n      passed: boolean;\n      actualValue: number | string;\n      threshold: number | string;\n    }>;\n\n    /**\n     * Actual effort spent (hours)\n     */\n    actualEffort?: number;\n\n    /**\n     * Issues encountered\n     */\n    issues?: Array<{\n      severity: 'low' | 'medium' | 'high' | 'critical';\n      description: string;\n      resolution?: string;\n    }>;\n\n    /**\n     * Notes from receiving agent\n     */\n    notes?: string;\n  };\n\n  /**\n   * Metadata for tracking and analytics\n   */\n  metadata?: {\n    /**\n     * Tags for categorization\n     */\n    tags?: string[];\n\n    /**\n     * Custom metadata\n     */\n    custom?: Record<string, any>;\n  };\n}\n\n/**\n * Three-tier handoff contract (Alex-BA → Dana + Marcus + James)\n *\n * Specialized contract for full-stack feature development\n */\nexport interface ThreeTierHandoffContract extends AgentHandoffContract {\n  type: 'parallel';\n\n  /**\n   * API contract shared between all tiers\n   */\n  apiContract: {\n    /**\n     * Endpoints with request/response schemas\n     */\n    endpoints: Array<{\n      method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n      path: string;\n      description: string;\n      requestSchema?: Record<string, any>;\n      responseSchema?: Record<string, any>;\n      authentication?: boolean;\n    }>;\n\n    /**\n     * Shared types/models\n     */\n    sharedTypes?: Record<string, any>;\n  };\n\n  /**\n   * Database schema for data tier\n   */\n  databaseSchema: {\n    /**\n     * Tables to create/modify\n     */\n    tables: Array<{\n      name: string;\n      columns: Array<{\n        name: string;\n        type: string;\n        nullable?: boolean;\n        unique?: boolean;\n        default?: any;\n      }>;\n      indexes?: Array<{\n        columns: string[];\n        unique?: boolean;\n      }>;\n      foreignKeys?: Array<{\n        column: string;\n        references: string;\n        onDelete?: 'CASCADE' | 'SET NULL' | 'RESTRICT';\n      }>;\n    }>;\n\n    /**\n     * RLS policies for security\n     */\n    rlsPolicies?: Array<{\n      table: string;\n      operation: 'SELECT' | 'INSERT' | 'UPDATE' | 'DELETE';\n      using: string; // SQL condition\n    }>;\n  };\n\n  /**\n   * UI requirements for presentation tier\n   */\n  uiRequirements: {\n    /**\n     * Components to build\n     */\n    components: Array<{\n      name: string;\n      type: 'page' | 'component' | 'hook' | 'util';\n      description: string;\n      props?: Record<string, any>;\n    }>;\n\n    /**\n     * Accessibility requirements (WCAG level)\n     */\n    accessibility: 'A' | 'AA' | 'AAA';\n\n    /**\n     * Responsive breakpoints\n     */\n    responsive?: string[];\n\n    /**\n     * Design system/theme\n     */\n    designSystem?: string;\n  };\n\n  /**\n   * Integration checkpoints\n   */\n  integrationCheckpoints: Array<{\n    name: string;\n    description: string;\n    participants: AgentId[];\n    acceptanceCriteria: string[];\n  }>;\n}\n\n/**\n * Contract builder for easier contract creation\n */\nexport class ContractBuilder {\n  private contract: Partial<AgentHandoffContract>;\n\n  constructor(sender: AgentId) {\n    this.contract = {\n      contractId: this.generateId(),\n      version: CONTRACT_VERSION,\n      createdAt: new Date(),\n      sender: { agentId: sender },\n      receivers: [],\n      workItems: [],\n      type: 'sequential',\n      priority: 'normal',\n      status: 'pending',\n      expectedOutput: {\n        artifacts: [],\n        successCriteria: []\n      },\n      memorySnapshot: {\n        agentId: sender,\n        timestamp: new Date(),\n        memoryFiles: {},\n        criticalPatterns: [],\n        contextSummary: '',\n        estimatedTokens: 0\n      }\n    };\n  }\n\n  /**\n   * Add a receiver to the contract\n   */\n  addReceiver(agentId: AgentId, role?: string): this {\n    this.contract.receivers!.push({ agentId, role });\n    return this;\n  }\n\n  /**\n   * Set handoff type\n   */\n  setType(type: HandoffType): this {\n    this.contract.type = type;\n    return this;\n  }\n\n  /**\n   * Set priority\n   */\n  setPriority(priority: HandoffPriority): this {\n    this.contract.priority = priority;\n    return this;\n  }\n\n  /**\n   * Add work item\n   */\n  addWorkItem(workItem: WorkItem): this {\n    this.contract.workItems!.push(workItem);\n    return this;\n  }\n\n  /**\n   * Set expected output\n   */\n  setExpectedOutput(output: ExpectedOutput): this {\n    this.contract.expectedOutput = output;\n    return this;\n  }\n\n  /**\n   * Add memory snapshot\n   */\n  setMemorySnapshot(snapshot: MemorySnapshot): this {\n    this.contract.memorySnapshot = snapshot;\n    return this;\n  }\n\n  /**\n   * Set context\n   */\n  setContext(context: AgentHandoffContract['context']): this {\n    this.contract.context = context;\n    return this;\n  }\n\n  /**\n   * Set expiration time\n   */\n  setExpiration(hours: number): this {\n    const expiresAt = new Date();\n    expiresAt.setHours(expiresAt.getHours() + hours);\n    this.contract.expiresAt = expiresAt;\n    return this;\n  }\n\n  /**\n   * Build the final contract\n   */\n  build(): AgentHandoffContract {\n    if (!this.contract.receivers || this.contract.receivers.length === 0) {\n      throw new Error('Contract must have at least one receiver');\n    }\n\n    if (!this.contract.workItems || this.contract.workItems.length === 0) {\n      throw new Error('Contract must have at least one work item');\n    }\n\n    return this.contract as AgentHandoffContract;\n  }\n\n  /**\n   * Generate unique contract ID\n   */\n  private generateId(): string {\n    return `contract-${Date.now()}-${Math.random().toString(36).substring(7)}`;\n  }\n}\n"],"version":3}