{"version":3,"names":["cov_1phdquvtz7","actualCoverage","s","enhanced_maria_1","require","enhanced_james_1","enhanced_marcus_1","sarah_pm_1","alex_ba_1","dr_ai_ml_1","devops_dan_1","security_sam_1","architecture_dan_1","deployment_orchestrator_1","introspective_agent_1","simulation_qa_1","AgentRegistry","constructor","f","agents","Map","registerAllAgents","set","EnhancedMaria","EnhancedJames","EnhancedMarcus","SarahPm","AlexBa","DrAiMl","DevopsDan","SecuritySam","ArchitectureDan","DeploymentOrchestrator","IntrospectiveAgent","SimulationQa","getAgent","id","get","getAllAgents","Array","from","values","listAgents","registerAgent","agent","getAgentsForFilePattern","pattern","getStatus","totalAgents","size","entries","map","name","specialization","isHealthy","getAgentMetadata","b","undefined","metadata","autoActivate","priority","triggers","keywords","getKeywordsForAgent","patterns","fileTypes","collaborators","getCollaboratorIds","mcpTools","getCollaborators","collaboratorIds","collabId","filter","keywordMap","collabMap","exports","log","console","agentRegistry"],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/src/agents/agent-registry.ts"],"sourcesContent":["import { VERSATILLogger } from '../utils/logger';\nimport { BaseAgent } from './base-agent';\nimport { EnhancedMaria } from './enhanced-maria';\nimport { EnhancedJames } from './enhanced-james';\nimport { EnhancedMarcus } from './enhanced-marcus';\nimport { SarahPm } from './sarah-pm';\nimport { AlexBa } from './alex-ba';\nimport { DrAiMl } from './dr-ai-ml';\nimport { DevopsDan } from './devops-dan';\nimport { SecuritySam } from './security-sam';\nimport { ArchitectureDan } from './architecture-dan';\nimport { DeploymentOrchestrator } from './deployment-orchestrator';\nimport { IntrospectiveAgent } from './introspective-agent';\nimport { SimulationQa } from './simulation-qa';\n\nexport class AgentRegistry {\n  private agents = new Map<string, BaseAgent>();\n  \n  constructor() {\n    this.registerAllAgents();\n  }\n  \n  private registerAllAgents(): void {\n    this.agents.set('enhanced-maria', new EnhancedMaria());\n    this.agents.set('enhanced-james', new EnhancedJames());\n    this.agents.set('enhanced-marcus', new EnhancedMarcus());\n    this.agents.set('sarah-pm', new SarahPm());\n    this.agents.set('alex-ba', new AlexBa());\n    this.agents.set('dr-ai-ml', new DrAiMl());\n    this.agents.set('devops-dan', new DevopsDan());\n    this.agents.set('security-sam', new SecuritySam());\n    this.agents.set('architecture-dan', new ArchitectureDan());\n    this.agents.set('deployment-orchestrator', new DeploymentOrchestrator());\n    this.agents.set('introspective-agent', new IntrospectiveAgent());\n    this.agents.set('simulation-qa', new SimulationQa());\n  }\n  \n  getAgent(id: string): BaseAgent | undefined {\n    return this.agents.get(id);\n  }\n  \n  getAllAgents(): BaseAgent[] {\n    return Array.from(this.agents.values());\n  }\n\n  listAgents(): BaseAgent[] {\n    return this.getAllAgents();\n  }\n\n  registerAgent(id: string, agent: BaseAgent): void {\n    this.agents.set(id, agent);\n  }\n\n  getAgentsForFilePattern(pattern: string): BaseAgent[] {\n    return this.getAllAgents();\n  }\n\n  getStatus(): any {\n    return {\n      totalAgents: this.agents.size,\n      agents: Array.from(this.agents.entries()).map(([id, agent]) => ({\n        id,\n        name: agent.name,\n        specialization: agent.specialization\n      }))\n    };\n  }\n\n  isHealthy(): boolean {\n    return this.agents.size > 0;\n  }\n\n  getAgentMetadata(id: string): any {\n    const agent = this.agents.get(id);\n    if (!agent) return undefined;\n\n    const metadata: any = {\n      name: agent.name,\n      specialization: agent.specialization,\n      autoActivate: false,\n      priority: id === 'introspective-agent' ? 4 : 3,\n      triggers: {\n        keywords: this.getKeywordsForAgent(id),\n        patterns: [],\n        fileTypes: []\n      },\n      collaborators: this.getCollaboratorIds(id)\n    };\n\n    // Add MCP tools for introspective agent\n    if (id === 'introspective-agent') {\n      metadata.mcpTools = ['Read MCP', 'Bash MCP', 'WebFetch MCP'];\n    }\n\n    return metadata;\n  }\n\n  getCollaborators(id: string): BaseAgent[] {\n    const collaboratorIds = this.getCollaboratorIds(id);\n    return collaboratorIds\n      .map(collabId => this.agents.get(collabId))\n      .filter((agent): agent is BaseAgent => agent !== undefined);\n  }\n\n  private getKeywordsForAgent(id: string): string[] {\n    const keywordMap: Record<string, string[]> = {\n      'introspective-agent': ['introspection', 'optimization', 'performance', 'learning'],\n      'enhanced-maria': ['test', 'quality', 'coverage', 'validation'],\n      'enhanced-james': ['ui', 'frontend', 'component', 'accessibility'],\n      'enhanced-marcus': ['api', 'backend', 'security', 'database'],\n      'sarah-pm': ['project', 'sprint', 'milestone', 'timeline'],\n      'alex-ba': ['requirements', 'business', 'analysis', 'stakeholder'],\n      'dr-ai-ml': ['machine learning', 'model', 'training', 'prediction']\n    };\n    return keywordMap[id] || [];\n  }\n\n  private getCollaboratorIds(id: string): string[] {\n    const collabMap: Record<string, string[]> = {\n      'introspective-agent': ['enhanced-maria', 'enhanced-james', 'enhanced-marcus'],\n      'enhanced-maria': ['enhanced-james', 'enhanced-marcus'],\n      'enhanced-james': ['enhanced-maria', 'enhanced-marcus'],\n      'enhanced-marcus': ['enhanced-maria', 'enhanced-james'],\n      'sarah-pm': ['enhanced-maria', 'enhanced-james', 'enhanced-marcus', 'alex-ba'],\n      'alex-ba': ['sarah-pm', 'enhanced-maria'],\n      'dr-ai-ml': ['enhanced-marcus', 'enhanced-maria']\n    };\n    return collabMap[id] || [];\n  }\n}\n\nexport const log = console;\n\n// Export singleton instance for easy import\nexport const agentRegistry = new AgentRegistry();\n"],"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","ignoreList":[]}