{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/src/orchestration/event-driven-orchestrator.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/src/orchestration/event-driven-orchestrator.ts"],"sourcesContent":["/**\n * Event-Driven Agent Orchestrator\n *\n * Replaces polling with event-driven handoffs for immediate agent activation.\n * Target: 30% faster workflow execution (500ms → 150ms handoff latency)\n *\n * @module EventDrivenOrchestrator\n * @version 5.0.0\n * @sprint Sprint 1 Day 3-4\n */\n\nimport { EventEmitter } from 'events';\nimport { AgentResponse, AgentActivationContext } from '../agents/base-agent.js';\nimport { AgentPool } from '../agents/agent-pool.js';\nimport { VERSATILLogger } from '../utils/logger.js';\n\nconst logger = new VERSATILLogger();\n\n/**\n * Agent lifecycle events\n */\nexport enum AgentEvent {\n  ACTIVATED = 'agent:activated',\n  COMPLETED = 'agent:completed',\n  HANDOFF = 'agent:handoff',\n  ERROR = 'agent:error',\n  PROGRESS = 'agent:progress',\n  CHAIN_STARTED = 'chain:started',\n  CHAIN_COMPLETED = 'chain:completed'\n}\n\n/**\n * Handoff request structure\n */\nexport interface HandoffRequest {\n  fromAgent: string;\n  toAgent: string;\n  context: AgentActivationContext;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  reason: string;\n  timestamp: number;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Agent event data\n */\nexport interface AgentEventData {\n  agentId: string;\n  context: AgentActivationContext;\n  result?: AgentResponse;\n  error?: Error;\n  progress?: number;\n  timestamp: number;\n}\n\n/**\n * Handoff chain tracking\n */\ninterface HandoffChain {\n  chainId: string;\n  agents: string[];\n  startTime: number;\n  currentAgent: string | null;\n  completed: boolean;\n}\n\n/**\n * Event-Driven Orchestrator\n *\n * Features:\n * - Immediate handoffs via event bus (no polling)\n * - Priority queue for urgent handoffs\n * - Pre-activation of next agent in chain\n * - Full handoff telemetry\n */\nexport class EventDrivenOrchestrator extends EventEmitter {\n  private agentPool: AgentPool;\n  private handoffQueue: HandoffRequest[];\n  private activeChains: Map<string, HandoffChain>;\n  private handoffMetrics: {\n    totalHandoffs: number;\n    averageLatency: number;\n    successRate: number;\n    latencies: number[];\n  };\n\n  constructor(agentPool: AgentPool) {\n    super();\n    this.agentPool = agentPool;\n    this.handoffQueue = [];\n    this.activeChains = new Map();\n    this.handoffMetrics = {\n      totalHandoffs: 0,\n      averageLatency: 0,\n      successRate: 100,\n      latencies: []\n    };\n\n    this.setupEventListeners();\n  }\n\n  /**\n   * Setup event listeners for agent lifecycle\n   */\n  private setupEventListeners(): void {\n    // Listen for agent completions\n    this.on(AgentEvent.COMPLETED, (data: AgentEventData) => {\n      this.handleAgentCompletion(data);\n    });\n\n    // Listen for handoff requests\n    this.on(AgentEvent.HANDOFF, (handoff: HandoffRequest) => {\n      this.handleHandoffRequest(handoff);\n    });\n\n    // Listen for errors\n    this.on(AgentEvent.ERROR, (data: AgentEventData) => {\n      this.handleAgentError(data);\n    });\n  }\n\n  /**\n   * Start an agent activation chain\n   */\n  async startChain(\n    agentIds: string[],\n    context: AgentActivationContext\n  ): Promise<string> {\n    const chainId = `chain-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    const chain: HandoffChain = {\n      chainId,\n      agents: agentIds,\n      startTime: Date.now(),\n      currentAgent: null,\n      completed: false\n    };\n\n    this.activeChains.set(chainId, chain);\n\n    logger.info(`🔗 Starting agent chain: ${chainId}`, {\n      agents: agentIds,\n      context: context.filePath\n    });\n\n    this.emit(AgentEvent.CHAIN_STARTED, { chainId, agents: agentIds });\n\n    // Activate first agent immediately\n    await this.activateNextAgent(chainId, context);\n\n    return chainId;\n  }\n\n  /**\n   * Activate next agent in the chain\n   */\n  private async activateNextAgent(\n    chainId: string,\n    context: AgentActivationContext\n  ): Promise<void> {\n    const chain = this.activeChains.get(chainId);\n    if (!chain || chain.completed) {\n      return;\n    }\n\n    // Find next agent in chain\n    const currentIndex = chain.currentAgent\n      ? chain.agents.indexOf(chain.currentAgent)\n      : -1;\n    const nextIndex = currentIndex + 1;\n\n    if (nextIndex >= chain.agents.length) {\n      // Chain complete\n      this.completeChain(chainId);\n      return;\n    }\n\n    const nextAgentId = chain.agents[nextIndex];\n    chain.currentAgent = nextAgentId;\n\n    const startTime = Date.now();\n\n    try {\n      // Get agent from pool (warm activation - 50% faster)\n      const agent = await this.agentPool.getAgent(nextAgentId);\n\n      // Emit activation event\n      this.emit(AgentEvent.ACTIVATED, {\n        agentId: nextAgentId,\n        context,\n        timestamp: Date.now()\n      } as AgentEventData);\n\n      logger.info(`🤖 Agent activated: ${nextAgentId}`, {\n        chainId,\n        position: `${nextIndex + 1}/${chain.agents.length}`\n      });\n\n      // Execute agent\n      const result = await agent.activate(context);\n\n      const endTime = Date.now();\n      const latency = endTime - startTime;\n\n      // Track metrics\n      this.updateHandoffMetrics(latency, true);\n\n      // Emit completion event (triggers next handoff)\n      this.emit(AgentEvent.COMPLETED, {\n        agentId: nextAgentId,\n        context,\n        result,\n        timestamp: endTime\n      } as AgentEventData);\n\n      // Return agent to pool\n      await this.agentPool.releaseAgent(agent);\n\n      // Check for explicit handoffs in response\n      if (result.handoffTo && result.handoffTo.length > 0) {\n        this.handleExplicitHandoffs(nextAgentId, result, context);\n      }\n\n    } catch (error: any) {\n      const endTime = Date.now();\n      const latency = endTime - startTime;\n\n      this.updateHandoffMetrics(latency, false);\n\n      logger.error(`❌ Agent activation failed: ${nextAgentId}`, { error: error.message });\n\n      this.emit(AgentEvent.ERROR, {\n        agentId: nextAgentId,\n        context,\n        error,\n        timestamp: endTime\n      } as AgentEventData);\n\n      // Continue chain despite error (graceful degradation)\n      await this.activateNextAgent(chainId, context);\n    }\n  }\n\n  /**\n   * Handle agent completion and continue chain\n   */\n  private handleAgentCompletion(data: AgentEventData): void {\n    logger.info(`✅ Agent completed: ${data.agentId}`);\n\n    // Find chains this agent is part of\n    for (const [chainId, chain] of this.activeChains.entries()) {\n      if (chain.currentAgent === data.agentId && !chain.completed) {\n        // Continue chain with next agent (immediate, no polling!)\n        setImmediate(() => {\n          this.activateNextAgent(chainId, data.context);\n        });\n      }\n    }\n  }\n\n  /**\n   * Handle explicit handoff requests\n   */\n  private handleHandoffRequest(handoff: HandoffRequest): void {\n    logger.info(`🔄 Handoff request: ${handoff.fromAgent} → ${handoff.toAgent}`, {\n      priority: handoff.priority,\n      reason: handoff.reason\n    });\n\n    // Add to priority queue\n    this.addToQueue(handoff);\n\n    // Process immediately if high/urgent priority\n    if (handoff.priority === 'high' || handoff.priority === 'urgent') {\n      setImmediate(() => this.processQueue());\n    } else {\n      // Process on next tick for medium/low priority\n      process.nextTick(() => this.processQueue());\n    }\n  }\n\n  /**\n   * Handle explicit handoffs from agent responses\n   */\n  private handleExplicitHandoffs(\n    fromAgent: string,\n    result: AgentResponse,\n    context: AgentActivationContext\n  ): void {\n    if (!result.handoffTo || result.handoffTo.length === 0) {\n      return;\n    }\n\n    for (const toAgent of result.handoffTo) {\n      const priority = (result.priority === 'low' || result.priority === 'medium' ||\n                       result.priority === 'high' || result.priority === 'urgent')\n        ? result.priority\n        : 'medium';\n\n      const handoff: HandoffRequest = {\n        fromAgent,\n        toAgent,\n        context,\n        priority,\n        reason: `Explicit handoff from ${fromAgent}`,\n        timestamp: Date.now(),\n        metadata: result.context\n      };\n\n      this.emit(AgentEvent.HANDOFF, handoff);\n    }\n  }\n\n  /**\n   * Add handoff to priority queue\n   */\n  private addToQueue(handoff: HandoffRequest): void {\n    // Insert based on priority\n    const priorityOrder = { urgent: 0, high: 1, medium: 2, low: 3 };\n    const insertIndex = this.handoffQueue.findIndex(\n      h => priorityOrder[h.priority] > priorityOrder[handoff.priority]\n    );\n\n    if (insertIndex === -1) {\n      this.handoffQueue.push(handoff);\n    } else {\n      this.handoffQueue.splice(insertIndex, 0, handoff);\n    }\n  }\n\n  /**\n   * Process handoff queue\n   */\n  private async processQueue(): Promise<void> {\n    if (this.handoffQueue.length === 0) {\n      return;\n    }\n\n    const handoff = this.handoffQueue.shift()!;\n    const startTime = Date.now();\n\n    try {\n      // Get agent from pool\n      const agent = await this.agentPool.getAgent(handoff.toAgent);\n\n      // Emit activation\n      this.emit(AgentEvent.ACTIVATED, {\n        agentId: handoff.toAgent,\n        context: handoff.context,\n        timestamp: Date.now()\n      } as AgentEventData);\n\n      // Execute\n      const result = await agent.activate(handoff.context);\n\n      const endTime = Date.now();\n      const latency = endTime - startTime;\n\n      this.updateHandoffMetrics(latency, true);\n\n      // Emit completion\n      this.emit(AgentEvent.COMPLETED, {\n        agentId: handoff.toAgent,\n        context: handoff.context,\n        result,\n        timestamp: endTime\n      } as AgentEventData);\n\n      // Return to pool\n      await this.agentPool.releaseAgent(agent);\n\n      logger.info(`✅ Handoff completed: ${handoff.fromAgent} → ${handoff.toAgent}`, {\n        latency: `${latency}ms`\n      });\n\n    } catch (error: any) {\n      const endTime = Date.now();\n      const latency = endTime - startTime;\n\n      this.updateHandoffMetrics(latency, false);\n\n      logger.error(`❌ Handoff failed: ${handoff.fromAgent} → ${handoff.toAgent}`, {\n        error: error.message\n      });\n\n      this.emit(AgentEvent.ERROR, {\n        agentId: handoff.toAgent,\n        context: handoff.context,\n        error,\n        timestamp: endTime\n      } as AgentEventData);\n    }\n\n    // Process next in queue\n    if (this.handoffQueue.length > 0) {\n      setImmediate(() => this.processQueue());\n    }\n  }\n\n  /**\n   * Handle agent errors\n   */\n  private handleAgentError(data: AgentEventData): void {\n    logger.error(`❌ Agent error: ${data.agentId}`, {\n      error: data.error?.message\n    });\n\n    // Find chains this agent is part of\n    for (const [chainId, chain] of this.activeChains.entries()) {\n      if (chain.currentAgent === data.agentId && !chain.completed) {\n        // Continue chain despite error (graceful degradation)\n        setImmediate(() => {\n          this.activateNextAgent(chainId, data.context);\n        });\n      }\n    }\n  }\n\n  /**\n   * Complete a chain\n   */\n  private completeChain(chainId: string): void {\n    const chain = this.activeChains.get(chainId);\n    if (!chain) {\n      return;\n    }\n\n    chain.completed = true;\n    const duration = Date.now() - chain.startTime;\n\n    logger.info(`✅ Chain completed: ${chainId}`, {\n      agents: chain.agents.length,\n      duration: `${duration}ms`\n    });\n\n    this.emit(AgentEvent.CHAIN_COMPLETED, {\n      chainId,\n      agents: chain.agents,\n      duration\n    });\n\n    // Cleanup after 1 minute\n    setTimeout(() => {\n      this.activeChains.delete(chainId);\n    }, 60000);\n  }\n\n  /**\n   * Update handoff metrics\n   */\n  private updateHandoffMetrics(latency: number, success: boolean): void {\n    this.handoffMetrics.totalHandoffs++;\n    this.handoffMetrics.latencies.push(latency);\n\n    // Keep last 100 latencies\n    if (this.handoffMetrics.latencies.length > 100) {\n      this.handoffMetrics.latencies.shift();\n    }\n\n    // Calculate average\n    this.handoffMetrics.averageLatency =\n      this.handoffMetrics.latencies.reduce((a, b) => a + b, 0) /\n      this.handoffMetrics.latencies.length;\n\n    // Update success rate\n    const successCount = success\n      ? this.handoffMetrics.totalHandoffs * (this.handoffMetrics.successRate / 100) + 1\n      : this.handoffMetrics.totalHandoffs * (this.handoffMetrics.successRate / 100);\n\n    this.handoffMetrics.successRate = (successCount / this.handoffMetrics.totalHandoffs) * 100;\n  }\n\n  /**\n   * Get handoff metrics\n   */\n  getMetrics(): {\n    totalHandoffs: number;\n    averageLatency: number;\n    successRate: number;\n    targetLatency: number;\n    improvement: string;\n  } {\n    const targetLatency = 150; // Sprint 1 target: <150ms\n    const improvement = ((500 - this.handoffMetrics.averageLatency) / 500) * 100;\n\n    return {\n      ...this.handoffMetrics,\n      targetLatency,\n      improvement: `${improvement.toFixed(1)}%`\n    };\n  }\n\n  /**\n   * Get active chains\n   */\n  getActiveChains(): HandoffChain[] {\n    return Array.from(this.activeChains.values());\n  }\n\n  /**\n   * Shutdown orchestrator\n   */\n  async shutdown(): Promise<void> {\n    logger.info('🛑 Shutting down event-driven orchestrator...');\n\n    // Wait for active chains to complete (with timeout)\n    const timeout = 10000; // 10 seconds\n    const startTime = Date.now();\n\n    while (this.activeChains.size > 0 && Date.now() - startTime < timeout) {\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n\n    // Clear queue\n    this.handoffQueue = [];\n\n    // Remove all listeners\n    this.removeAllListeners();\n\n    logger.info('✅ Event-driven orchestrator shutdown complete');\n  }\n}\n"],"version":3}