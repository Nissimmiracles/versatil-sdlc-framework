{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/tests/unit/config/preference-manager.test.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/tests/unit/config/preference-manager.test.ts"],"sourcesContent":["/**\n * Test Suite: PreferenceManager\n * Tests for v3.0.0 user preference management\n * Target: 90%+ coverage\n */\n\nimport { PreferenceManager, UserPreferences } from '../../../src/config/preference-manager';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as os from 'os';\n\n// Mock fs module\njest.mock('fs/promises');\n\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('PreferenceManager', () => {\n  let preferenceManager: PreferenceManager;\n  let mockPreferencesFile: string;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    preferenceManager = new PreferenceManager();\n    mockPreferencesFile = path.join(os.homedir(), '.versatil', 'preferences.json');\n\n    // Default mocks\n    mockFs.mkdir.mockResolvedValue(undefined);\n    mockFs.writeFile.mockResolvedValue(undefined);\n    mockFs.readFile.mockRejectedValue(new Error('ENOENT'));\n    mockFs.access.mockRejectedValue(new Error('ENOENT'));\n  });\n\n  describe('Scenario 1: Get Default Preferences', () => {\n    it('should return defaults when no preferences file exists', async () => {\n      mockFs.readFile.mockRejectedValue(new Error('ENOENT'));\n\n      const prefs = await preferenceManager.getPreferences();\n\n      expect(prefs.updateBehavior).toBe('notify');\n      expect(prefs.updateChannel).toBe('stable');\n      expect(prefs.safetyLevel).toBe('balanced');\n      expect(prefs.checkFrequency).toBe(24);\n      expect(prefs.maxRollbackPoints).toBe(5);\n    });\n\n    it('should return defaults from getDefaultPreferences()', () => {\n      const defaults = preferenceManager.getDefaultPreferences();\n\n      expect(defaults.updateBehavior).toBe('notify');\n      expect(defaults.rollbackBehavior).toBe('prompt');\n      expect(defaults.notificationLevel).toBe('important');\n      expect(defaults.enableTelemetry).toBe(true);\n      expect(defaults.backupBeforeUpdate).toBe(true);\n      expect(defaults.validateAfterUpdate).toBe(true);\n    });\n  });\n\n  describe('Scenario 2: Save Preferences', () => {\n    it('should save preferences successfully', async () => {\n      mockFs.readFile.mockResolvedValue(JSON.stringify(preferenceManager.getDefaultPreferences()));\n\n      await preferenceManager.savePreferences({\n        updateBehavior: 'auto',\n        checkFrequency: 12\n      });\n\n      expect(mockFs.mkdir).toHaveBeenCalledWith(\n        expect.stringContaining('.versatil'),\n        { recursive: true }\n      );\n      expect(mockFs.writeFile).toHaveBeenCalledWith(\n        mockPreferencesFile,\n        expect.stringMatching(/\"updateBehavior\"\\s*:\\s*\"auto\"/)\n      );\n    });\n\n    it('should merge partial preferences with existing', async () => {\n      const existing: UserPreferences = {\n        ...preferenceManager.getDefaultPreferences(),\n        updateBehavior: 'manual'\n      };\n\n      mockFs.readFile.mockResolvedValue(JSON.stringify(existing));\n\n      await preferenceManager.savePreferences({ checkFrequency: 48 });\n\n      expect(mockFs.writeFile).toHaveBeenCalledWith(\n        mockPreferencesFile,\n        expect.stringMatching(/\"updateBehavior\"\\s*:\\s*\"manual\"/)\n      );\n    });\n\n    it('should update lastModified timestamp', async () => {\n      mockFs.readFile.mockResolvedValue(JSON.stringify(preferenceManager.getDefaultPreferences()));\n\n      const beforeSave = new Date();\n      await preferenceManager.savePreferences({ updateBehavior: 'auto' });\n\n      const writeCall = mockFs.writeFile.mock.calls[0][1] as string;\n      const saved = JSON.parse(writeCall);\n\n      expect(new Date(saved.lastModified).getTime()).toBeGreaterThanOrEqual(beforeSave.getTime());\n    });\n  });\n\n  describe('Scenario 3: Get/Set Single Preference', () => {\n    it('should get specific preference', async () => {\n      const mockPrefs: UserPreferences = {\n        ...preferenceManager.getDefaultPreferences(),\n        updateChannel: 'beta'\n      };\n\n      mockFs.readFile.mockResolvedValue(JSON.stringify(mockPrefs));\n\n      const channel = await preferenceManager.getPreference('updateChannel');\n\n      expect(channel).toBe('beta');\n    });\n\n    it('should set specific preference', async () => {\n      mockFs.readFile.mockResolvedValue(JSON.stringify(preferenceManager.getDefaultPreferences()));\n\n      await preferenceManager.setPreference('updateBehavior', 'auto');\n\n      expect(mockFs.writeFile).toHaveBeenCalledWith(\n        mockPreferencesFile,\n        expect.stringMatching(/\"updateBehavior\"\\s*:\\s*\"auto\"/)\n      );\n    });\n\n    it('should update lastModified when setting preference', async () => {\n      mockFs.readFile.mockResolvedValue(JSON.stringify(preferenceManager.getDefaultPreferences()));\n\n      await preferenceManager.setPreference('checkFrequency', 12);\n\n      const writeCall = mockFs.writeFile.mock.calls[0][1] as string;\n      const saved = JSON.parse(writeCall);\n\n      expect(saved.lastModified).toBeDefined();\n    });\n  });\n\n  describe('Scenario 4: Update Multiple Preferences', () => {\n    it('should update multiple preferences at once', async () => {\n      mockFs.readFile.mockResolvedValue(JSON.stringify(preferenceManager.getDefaultPreferences()));\n\n      await preferenceManager.updatePreferences({\n        updateBehavior: 'auto',\n        updateChannel: 'beta',\n        checkFrequency: 6\n      });\n\n      const writeCall = mockFs.writeFile.mock.calls[0][1] as string;\n      const saved = JSON.parse(writeCall);\n\n      expect(saved.updateBehavior).toBe('auto');\n      expect(saved.updateChannel).toBe('beta');\n      expect(saved.checkFrequency).toBe(6);\n    });\n  });\n\n  describe('Scenario 5: Reset to Defaults', () => {\n    it('should reset preferences to defaults', async () => {\n      await preferenceManager.resetToDefaults();\n\n      const writeCall = mockFs.writeFile.mock.calls[0][1] as string;\n      const saved = JSON.parse(writeCall);\n\n      expect(saved.updateBehavior).toBe('notify');\n      expect(saved.updateChannel).toBe('stable');\n      expect(saved.safetyLevel).toBe('balanced');\n    });\n\n    it('should create directory when resetting', async () => {\n      await preferenceManager.resetToDefaults();\n\n      expect(mockFs.mkdir).toHaveBeenCalledWith(\n        expect.stringContaining('.versatil'),\n        { recursive: true }\n      );\n    });\n  });\n\n  describe('Scenario 6: Validate Preferences', () => {\n    it('should validate correct preferences', () => {\n      const prefs: Partial<UserPreferences> = {\n        updateBehavior: 'auto',\n        updateChannel: 'stable',\n        safetyLevel: 'balanced'\n      };\n\n      const result = preferenceManager.validatePreferences(prefs);\n\n      expect(result.valid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should detect invalid update behavior', () => {\n      const prefs: Partial<UserPreferences> = {\n        updateBehavior: 'invalid' as any\n      };\n\n      const result = preferenceManager.validatePreferences(prefs);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors.some(e => e.includes('updateBehavior'))).toBe(true);\n    });\n\n    it('should detect invalid update channel', () => {\n      const prefs: Partial<UserPreferences> = {\n        updateChannel: 'experimental' as any\n      };\n\n      const result = preferenceManager.validatePreferences(prefs);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors.some(e => e.includes('updateChannel'))).toBe(true);\n    });\n\n    it('should detect invalid check frequency', () => {\n      const prefs: Partial<UserPreferences> = {\n        checkFrequency: -5\n      };\n\n      const result = preferenceManager.validatePreferences(prefs);\n\n      expect(result.valid).toBe(false);\n    });\n\n    it('should detect invalid max rollback points', () => {\n      const prefs: Partial<UserPreferences> = {\n        maxRollbackPoints: -1\n      };\n\n      const result = preferenceManager.validatePreferences(prefs);\n\n      expect(result.valid).toBe(false);\n    });\n  });\n\n  describe('Scenario 7: Get Preferences Summary', () => {\n    it('should generate human-readable summary', async () => {\n      mockFs.readFile.mockResolvedValue(JSON.stringify(preferenceManager.getDefaultPreferences()));\n\n      const summary = await preferenceManager.getSummary();\n\n      expect(summary).toContain('📦 Updates:');\n      expect(summary).toContain('Behavior: notify');\n      expect(summary).toContain('Channel: stable');\n      expect(summary).toContain('🔄 Rollback:');\n      expect(summary).toContain('🔔 Notifications:');\n      expect(summary).toContain('📊 Telemetry:');\n    });\n\n    it('should show custom preferences in summary', async () => {\n      const customPrefs: UserPreferences = {\n        ...preferenceManager.getDefaultPreferences(),\n        updateBehavior: 'auto',\n        updateChannel: 'beta',\n        maxRollbackPoints: 10\n      };\n\n      mockFs.readFile.mockResolvedValue(JSON.stringify(customPrefs));\n\n      const summary = await preferenceManager.getSummary();\n\n      expect(summary).toContain('Behavior: auto');\n      expect(summary).toContain('Channel: beta');\n      expect(summary).toContain('Max Points: 10');\n    });\n  });\n\n  describe('Scenario 8: Export/Import Preferences', () => {\n    it('should export preferences to file', async () => {\n      const mockPrefs = preferenceManager.getDefaultPreferences();\n      mockFs.readFile.mockResolvedValue(JSON.stringify(mockPrefs));\n\n      await preferenceManager.exportPreferences('/tmp/prefs.json');\n\n      expect(mockFs.writeFile).toHaveBeenCalledWith(\n        '/tmp/prefs.json',\n        expect.stringContaining('updateBehavior')\n      );\n    });\n\n    it('should import preferences from file', async () => {\n      const importedPrefs: UserPreferences = {\n        ...preferenceManager.getDefaultPreferences(),\n        updateBehavior: 'auto',\n        updateChannel: 'beta'\n      };\n\n      mockFs.readFile\n        .mockResolvedValueOnce(JSON.stringify(importedPrefs)) // Import read\n        .mockResolvedValueOnce(JSON.stringify(preferenceManager.getDefaultPreferences())); // Get current prefs\n\n      await preferenceManager.importPreferences('/tmp/prefs.json');\n\n      const writeCall = mockFs.writeFile.mock.calls[0][1] as string;\n      const saved = JSON.parse(writeCall);\n\n      expect(saved.updateBehavior).toBe('auto');\n      expect(saved.updateChannel).toBe('beta');\n    });\n\n    it('should reject invalid imported preferences', async () => {\n      const invalidPrefs: Partial<UserPreferences> = {\n        updateBehavior: 'invalid' as any\n      };\n\n      mockFs.readFile.mockResolvedValue(JSON.stringify(invalidPrefs));\n\n      await expect(\n        preferenceManager.importPreferences('/tmp/invalid.json')\n      ).rejects.toThrow('Invalid preferences');\n    });\n  });\n\n  describe('Scenario 9: Migrate Preferences', () => {\n    it('should migrate old version preferences', async () => {\n      const oldPrefs = {\n        updateBehavior: 'auto',\n        version: '0.9.0' // Old version\n      };\n\n      mockFs.readFile.mockResolvedValue(JSON.stringify(oldPrefs));\n\n      const prefs = await preferenceManager.getPreferences();\n\n      expect(prefs.version).toBe('1.0.0'); // Migrated to current version\n      expect(prefs.updateBehavior).toBe('auto'); // Preserved old setting\n      expect(prefs.updateChannel).toBe('stable'); // Default for new field\n    });\n\n    it('should not migrate if version matches', async () => {\n      const currentPrefs: UserPreferences = {\n        ...preferenceManager.getDefaultPreferences(),\n        version: '1.0.0'\n      };\n\n      mockFs.readFile.mockResolvedValue(JSON.stringify(currentPrefs));\n\n      const prefs = await preferenceManager.getPreferences();\n\n      expect(prefs.version).toBe('1.0.0');\n      // Should not write file (no migration needed)\n      expect(mockFs.writeFile).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Scenario 10: Check Setup Wizard Requirement', () => {\n    it('should require setup wizard when no preferences exist', async () => {\n      mockFs.access.mockRejectedValue(new Error('ENOENT'));\n\n      const shouldRun = await preferenceManager.shouldRunSetupWizard();\n\n      expect(shouldRun).toBe(true);\n    });\n\n    it('should not require setup wizard when preferences exist', async () => {\n      mockFs.access.mockResolvedValue(undefined);\n\n      const shouldRun = await preferenceManager.shouldRunSetupWizard();\n\n      expect(shouldRun).toBe(false);\n    });\n  });\n});\n"],"version":3}