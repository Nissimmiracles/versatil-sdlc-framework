a3e35c13a339058f53546f9a142969b7
"use strict";
/**
 * Agent Handoff Contract System
 *
 * Ensures reliable agent-to-agent communication with validation,
 * memory snapshots, and state verification.
 *
 * Use Cases:
 * - Three-tier handoffs: Alex-BA → (Dana + Marcus + James)
 * - Sequential handoffs: Marcus → Maria-QA
 * - Complex workflows: Sarah-PM orchestrating multi-agent tasks
 *
 * Philosophy: "Make implicit expectations explicit through contracts"
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractBuilder = exports.CONTRACT_VERSION = void 0;
/**
 * Contract version for backward compatibility
 */
exports.CONTRACT_VERSION = '1.0.0';
/**
 * Contract builder for easier contract creation
 */
class ContractBuilder {
    constructor(sender) {
        this.contract = {
            contractId: this.generateId(),
            version: exports.CONTRACT_VERSION,
            createdAt: new Date(),
            sender: { agentId: sender },
            receivers: [],
            workItems: [],
            type: 'sequential',
            priority: 'normal',
            status: 'pending',
            expectedOutput: {
                artifacts: [],
                successCriteria: []
            },
            memorySnapshot: {
                agentId: sender,
                timestamp: new Date(),
                memoryFiles: {},
                criticalPatterns: [],
                contextSummary: '',
                estimatedTokens: 0
            }
        };
    }
    /**
     * Add a receiver to the contract
     */
    addReceiver(agentId, role) {
        this.contract.receivers.push({ agentId, role });
        return this;
    }
    /**
     * Set handoff type
     */
    setType(type) {
        this.contract.type = type;
        return this;
    }
    /**
     * Set priority
     */
    setPriority(priority) {
        this.contract.priority = priority;
        return this;
    }
    /**
     * Add work item
     */
    addWorkItem(workItem) {
        this.contract.workItems.push(workItem);
        return this;
    }
    /**
     * Set expected output
     */
    setExpectedOutput(output) {
        this.contract.expectedOutput = output;
        return this;
    }
    /**
     * Add memory snapshot
     */
    setMemorySnapshot(snapshot) {
        this.contract.memorySnapshot = snapshot;
        return this;
    }
    /**
     * Set context
     */
    setContext(context) {
        this.contract.context = context;
        return this;
    }
    /**
     * Set expiration time
     */
    setExpiration(hours) {
        const expiresAt = new Date();
        expiresAt.setHours(expiresAt.getHours() + hours);
        this.contract.expiresAt = expiresAt;
        return this;
    }
    /**
     * Build the final contract
     */
    build() {
        if (!this.contract.receivers || this.contract.receivers.length === 0) {
            throw new Error('Contract must have at least one receiver');
        }
        if (!this.contract.workItems || this.contract.workItems.length === 0) {
            throw new Error('Contract must have at least one work item');
        }
        return this.contract;
    }
    /**
     * Generate unique contract ID
     */
    generateId() {
        return `contract-${Date.now()}-${Math.random().toString(36).substring(7)}`;
    }
}
exports.ContractBuilder = ContractBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL25pc3NpbW1lbmFzaGUvVkVSU0FUSUwgU0RMQyBGVy9zcmMvYWdlbnRzL2NvbnRyYWN0cy9hZ2VudC1oYW5kb2ZmLWNvbnRyYWN0LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7O0dBWUc7OztBQUlIOztHQUVHO0FBQ1UsUUFBQSxnQkFBZ0IsR0FBRyxPQUFPLENBQUM7QUE2Y3hDOztHQUVHO0FBQ0gsTUFBYSxlQUFlO0lBRzFCLFlBQVksTUFBZTtRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHO1lBQ2QsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDN0IsT0FBTyxFQUFFLHdCQUFnQjtZQUN6QixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUU7WUFDckIsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTtZQUMzQixTQUFTLEVBQUUsRUFBRTtZQUNiLFNBQVMsRUFBRSxFQUFFO1lBQ2IsSUFBSSxFQUFFLFlBQVk7WUFDbEIsUUFBUSxFQUFFLFFBQVE7WUFDbEIsTUFBTSxFQUFFLFNBQVM7WUFDakIsY0FBYyxFQUFFO2dCQUNkLFNBQVMsRUFBRSxFQUFFO2dCQUNiLGVBQWUsRUFBRSxFQUFFO2FBQ3BCO1lBQ0QsY0FBYyxFQUFFO2dCQUNkLE9BQU8sRUFBRSxNQUFNO2dCQUNmLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRTtnQkFDckIsV0FBVyxFQUFFLEVBQUU7Z0JBQ2YsZ0JBQWdCLEVBQUUsRUFBRTtnQkFDcEIsY0FBYyxFQUFFLEVBQUU7Z0JBQ2xCLGVBQWUsRUFBRSxDQUFDO2FBQ25CO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVcsQ0FBQyxPQUFnQixFQUFFLElBQWE7UUFDekMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDakQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxPQUFPLENBQUMsSUFBaUI7UUFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQzFCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOztPQUVHO0lBQ0gsV0FBVyxDQUFDLFFBQXlCO1FBQ25DLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUNsQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVcsQ0FBQyxRQUFrQjtRQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxpQkFBaUIsQ0FBQyxNQUFzQjtRQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUM7UUFDdEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxpQkFBaUIsQ0FBQyxRQUF3QjtRQUN4QyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUM7UUFDeEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxVQUFVLENBQUMsT0FBd0M7UUFDakQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ2hDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOztPQUVHO0lBQ0gsYUFBYSxDQUFDLEtBQWE7UUFDekIsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUM3QixTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDcEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLO1FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNyRSxNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7UUFDOUQsQ0FBQztRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDckUsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO1FBQy9ELENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQyxRQUFnQyxDQUFDO0lBQy9DLENBQUM7SUFFRDs7T0FFRztJQUNLLFVBQVU7UUFDaEIsT0FBTyxZQUFZLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzdFLENBQUM7Q0FDRjtBQXBIRCwwQ0FvSEMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL25pc3NpbW1lbmFzaGUvVkVSU0FUSUwgU0RMQyBGVy9zcmMvYWdlbnRzL2NvbnRyYWN0cy9hZ2VudC1oYW5kb2ZmLWNvbnRyYWN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQWdlbnQgSGFuZG9mZiBDb250cmFjdCBTeXN0ZW1cbiAqXG4gKiBFbnN1cmVzIHJlbGlhYmxlIGFnZW50LXRvLWFnZW50IGNvbW11bmljYXRpb24gd2l0aCB2YWxpZGF0aW9uLFxuICogbWVtb3J5IHNuYXBzaG90cywgYW5kIHN0YXRlIHZlcmlmaWNhdGlvbi5cbiAqXG4gKiBVc2UgQ2FzZXM6XG4gKiAtIFRocmVlLXRpZXIgaGFuZG9mZnM6IEFsZXgtQkEg4oaSIChEYW5hICsgTWFyY3VzICsgSmFtZXMpXG4gKiAtIFNlcXVlbnRpYWwgaGFuZG9mZnM6IE1hcmN1cyDihpIgTWFyaWEtUUFcbiAqIC0gQ29tcGxleCB3b3JrZmxvd3M6IFNhcmFoLVBNIG9yY2hlc3RyYXRpbmcgbXVsdGktYWdlbnQgdGFza3NcbiAqXG4gKiBQaGlsb3NvcGh5OiBcIk1ha2UgaW1wbGljaXQgZXhwZWN0YXRpb25zIGV4cGxpY2l0IHRocm91Z2ggY29udHJhY3RzXCJcbiAqL1xuXG5pbXBvcnQgeyBBZ2VudElkIH0gZnJvbSAnLi4vLi4vbWVtb3J5L21lbW9yeS10b29sLWNvbmZpZy5qcyc7XG5cbi8qKlxuICogQ29udHJhY3QgdmVyc2lvbiBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICovXG5leHBvcnQgY29uc3QgQ09OVFJBQ1RfVkVSU0lPTiA9ICcxLjAuMCc7XG5cbi8qKlxuICogSGFuZG9mZiB0eXBlcyBzdXBwb3J0ZWRcbiAqL1xuZXhwb3J0IHR5cGUgSGFuZG9mZlR5cGUgPVxuICB8ICdzZXF1ZW50aWFsJyAgICAgIC8vIE9uZSBhZ2VudCDihpIgb25lIGFnZW50IChNYXJjdXMg4oaSIE1hcmlhKVxuICB8ICdwYXJhbGxlbCcgICAgICAgIC8vIE9uZSBhZ2VudCDihpIgbXVsdGlwbGUgYWdlbnRzIChBbGV4IOKGkiBEYW5hK01hcmN1cytKYW1lcylcbiAgfCAnYWdncmVnYXRpb24nICAgICAvLyBNdWx0aXBsZSBhZ2VudHMg4oaSIG9uZSBhZ2VudCAoRGFuYStNYXJjdXMrSmFtZXMg4oaSIE1hcmlhKVxuICB8ICdicm9hZGNhc3QnICAgICAgIC8vIE9uZSBhZ2VudCDihpIgYWxsIGFnZW50cyAoU2FyYWgg4oaSIGV2ZXJ5b25lKVxuICB8ICdjb25kaXRpb25hbCc7ICAgIC8vIEhhbmRvZmYgYmFzZWQgb24gY29uZGl0aW9ucyAoaWYgZXJyb3IsIGdvdG8gTWFyaWEpXG5cbi8qKlxuICogUHJpb3JpdHkgbGV2ZWxzIGZvciBoYW5kb2ZmIHVyZ2VuY3lcbiAqL1xuZXhwb3J0IHR5cGUgSGFuZG9mZlByaW9yaXR5ID0gJ2xvdycgfCAnbm9ybWFsJyB8ICdoaWdoJyB8ICdjcml0aWNhbCc7XG5cbi8qKlxuICogSGFuZG9mZiBzdGF0dXMgZm9yIHRyYWNraW5nXG4gKi9cbmV4cG9ydCB0eXBlIEhhbmRvZmZTdGF0dXMgPVxuICB8ICdwZW5kaW5nJyAgICAgICAgIC8vIENvbnRyYWN0IGNyZWF0ZWQsIG5vdCB5ZXQgc2VudFxuICB8ICdpbl90cmFuc2l0JyAgICAgIC8vIFNlbnQgdG8gcmVjZWl2aW5nIGFnZW50KHMpXG4gIHwgJ2FjY2VwdGVkJyAgICAgICAgLy8gUmVjZWl2aW5nIGFnZW50IGFja25vd2xlZGdlZFxuICB8ICdyZWplY3RlZCcgICAgICAgIC8vIFJlY2VpdmluZyBhZ2VudCByZWplY3RlZCAodmFsaWRhdGlvbiBmYWlsZWQpXG4gIHwgJ2NvbXBsZXRlZCcgICAgICAgLy8gV29yayBmaW5pc2hlZCBieSByZWNlaXZpbmcgYWdlbnRcbiAgfCAnZmFpbGVkJyAgICAgICAgICAvLyBIYW5kb2ZmIGZhaWxlZCAodGltZW91dCwgZXJyb3IsIGV0Yy4pXG4gIHwgJ2NhbmNlbGxlZCc7ICAgICAgLy8gSGFuZG9mZiBjYW5jZWxsZWQgYnkgc2VuZGVyXG5cbi8qKlxuICogTWVtb3J5IHNuYXBzaG90IGF0IGhhbmRvZmYgcG9pbnRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNZW1vcnlTbmFwc2hvdCB7XG4gIC8qKlxuICAgKiBBZ2VudCB0aGF0IGNyZWF0ZWQgdGhlIHNuYXBzaG90XG4gICAqL1xuICBhZ2VudElkOiBBZ2VudElkO1xuXG4gIC8qKlxuICAgKiBUaW1lc3RhbXAgb2Ygc25hcHNob3QgY3JlYXRpb25cbiAgICovXG4gIHRpbWVzdGFtcDogRGF0ZTtcblxuICAvKipcbiAgICogTWVtb3J5IGZpbGVzIGluY2x1ZGVkIGluIHNuYXBzaG90XG4gICAqIEtleTogcmVsYXRpdmUgcGF0aCAoZS5nLiwgXCJ0ZXN0LXBhdHRlcm5zLm1kXCIpXG4gICAqIFZhbHVlOiBmaWxlIGNvbnRlbnRcbiAgICovXG4gIG1lbW9yeUZpbGVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBDcml0aWNhbCBwYXR0ZXJucyB0byBwcmVzZXJ2ZVxuICAgKiBFeHRyYWN0ZWQgZnJvbSBtZW1vcnkgZmlsZXMgZm9yIHF1aWNrIHJlZmVyZW5jZVxuICAgKi9cbiAgY3JpdGljYWxQYXR0ZXJuczogQXJyYXk8e1xuICAgIGNhdGVnb3J5OiBzdHJpbmc7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBjb250ZW50OiBzdHJpbmc7XG4gIH0+O1xuXG4gIC8qKlxuICAgKiBDb250ZXh0IHN1bW1hcnkgKGhpZ2gtbGV2ZWwgc3RhdGUpXG4gICAqL1xuICBjb250ZXh0U3VtbWFyeTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUb2tlbiBjb3VudCBpbiBzbmFwc2hvdCAoZm9yIGNvbnRleHQgbWFuYWdlbWVudClcbiAgICovXG4gIGVzdGltYXRlZFRva2VuczogbnVtYmVyO1xufVxuXG4vKipcbiAqIFdvcmsgaXRlbSB0byBiZSBwZXJmb3JtZWQgYnkgcmVjZWl2aW5nIGFnZW50XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgV29ya0l0ZW0ge1xuICAvKipcbiAgICogVW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgd29yayBpdGVtXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHdvcmsgKGltcGxlbWVudGF0aW9uLCByZXZpZXcsIHRlc3RpbmcsIGV0Yy4pXG4gICAqL1xuICB0eXBlOiAnaW1wbGVtZW50YXRpb24nIHwgJ3JldmlldycgfCAndGVzdGluZycgfCAnYW5hbHlzaXMnIHwgJ2RvY3VtZW50YXRpb24nIHwgJ2J1Z2ZpeCc7XG5cbiAgLyoqXG4gICAqIERlc2NyaXB0aW9uIG9mIHdvcmsgdG8gYmUgZG9uZVxuICAgKi9cbiAgZGVzY3JpcHRpb246IHN0cmluZztcblxuICAvKipcbiAgICogQWNjZXB0YW5jZSBjcml0ZXJpYSAoaG93IHRvIGtub3cgaXQncyBkb25lKVxuICAgKi9cbiAgYWNjZXB0YW5jZUNyaXRlcmlhOiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogRmlsZXMgaW52b2x2ZWQgaW4gdGhpcyB3b3JrXG4gICAqL1xuICBmaWxlcz86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBFc3RpbWF0ZWQgZWZmb3J0IChob3VycylcbiAgICovXG4gIGVzdGltYXRlZEVmZm9ydD86IG51bWJlcjtcblxuICAvKipcbiAgICogUHJpb3JpdHkgb2YgdGhpcyB3b3JrIGl0ZW1cbiAgICovXG4gIHByaW9yaXR5OiBIYW5kb2ZmUHJpb3JpdHk7XG5cbiAgLyoqXG4gICAqIERlcGVuZGVuY2llcyAob3RoZXIgd29yayBpdGVtIElEcyB0aGF0IG11c3QgY29tcGxldGUgZmlyc3QpXG4gICAqL1xuICBkZXBlbmRlbmNpZXM/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogTWV0YWRhdGEgc3BlY2lmaWMgdG8gd29yayB0eXBlXG4gICAqL1xuICBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT47XG59XG5cbi8qKlxuICogRXhwZWN0ZWQgb3V0cHV0IGZyb20gcmVjZWl2aW5nIGFnZW50XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRXhwZWN0ZWRPdXRwdXQge1xuICAvKipcbiAgICogV2hhdCBhcnRpZmFjdHMgc2hvdWxkIGJlIHByb2R1Y2VkXG4gICAqL1xuICBhcnRpZmFjdHM6IEFycmF5PHtcbiAgICB0eXBlOiAnY29kZScgfCAndGVzdHMnIHwgJ2RvY3VtZW50YXRpb24nIHwgJ3JlcG9ydCcgfCAnZGF0YSc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICByZXF1aXJlZDogYm9vbGVhbjtcbiAgfT47XG5cbiAgLyoqXG4gICAqIFF1YWxpdHkgZ2F0ZXMgdGhhdCBtdXN0IHBhc3NcbiAgICovXG4gIHF1YWxpdHlHYXRlcz86IEFycmF5PHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICB0aHJlc2hvbGQ6IG51bWJlciB8IHN0cmluZztcbiAgfT47XG5cbiAgLyoqXG4gICAqIEV4cGVjdGVkIGNvbXBsZXRpb24gdGltZSAoaG91cnMpXG4gICAqL1xuICBleHBlY3RlZER1cmF0aW9uPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBTdWNjZXNzIGNyaXRlcmlhXG4gICAqL1xuICBzdWNjZXNzQ3JpdGVyaWE6IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIEFnZW50IEhhbmRvZmYgQ29udHJhY3RcbiAqXG4gKiBGb3JtYWwgY29udHJhY3QgYmV0d2VlbiBzZW5kaW5nIGFuZCByZWNlaXZpbmcgYWdlbnRzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWdlbnRIYW5kb2ZmQ29udHJhY3Qge1xuICAvKipcbiAgICogQ29udHJhY3QgbWV0YWRhdGFcbiAgICovXG4gIGNvbnRyYWN0SWQ6IHN0cmluZztcbiAgdmVyc2lvbjogc3RyaW5nO1xuICBjcmVhdGVkQXQ6IERhdGU7XG4gIGV4cGlyZXNBdD86IERhdGU7XG5cbiAgLyoqXG4gICAqIEhhbmRvZmYgcGFydGljaXBhbnRzXG4gICAqL1xuICBzZW5kZXI6IHtcbiAgICBhZ2VudElkOiBBZ2VudElkO1xuICAgIHNlc3Npb25JZD86IHN0cmluZztcbiAgfTtcblxuICByZWNlaXZlcnM6IEFycmF5PHtcbiAgICBhZ2VudElkOiBBZ2VudElkO1xuICAgIHNlc3Npb25JZD86IHN0cmluZztcbiAgICByb2xlPzogc3RyaW5nOyAvLyBlLmcuLCBcImRhdGFiYXNlXCIsIFwiYXBpXCIsIFwiZnJvbnRlbmRcIlxuICB9PjtcblxuICAvKipcbiAgICogSGFuZG9mZiBjb25maWd1cmF0aW9uXG4gICAqL1xuICB0eXBlOiBIYW5kb2ZmVHlwZTtcbiAgcHJpb3JpdHk6IEhhbmRvZmZQcmlvcml0eTtcbiAgc3RhdHVzOiBIYW5kb2ZmU3RhdHVzO1xuXG4gIC8qKlxuICAgKiBXb3JrIHRvIGJlIHBlcmZvcm1lZFxuICAgKi9cbiAgd29ya0l0ZW1zOiBXb3JrSXRlbVtdO1xuXG4gIC8qKlxuICAgKiBFeHBlY3RlZCBvdXRwdXRzXG4gICAqL1xuICBleHBlY3RlZE91dHB1dDogRXhwZWN0ZWRPdXRwdXQ7XG5cbiAgLyoqXG4gICAqIE1lbW9yeSBzbmFwc2hvdCBmcm9tIHNlbmRlclxuICAgKi9cbiAgbWVtb3J5U25hcHNob3Q6IE1lbW9yeVNuYXBzaG90O1xuXG4gIC8qKlxuICAgKiBDb250ZXh0IHByb3ZpZGVkIHRvIHJlY2VpdmVyc1xuICAgKi9cbiAgY29udGV4dDoge1xuICAgIC8qKlxuICAgICAqIFByb2plY3QgY29udGV4dCAodGVjaCBzdGFjaywgY29udmVudGlvbnMsIGV0Yy4pXG4gICAgICovXG4gICAgcHJvamVjdD86IHtcbiAgICAgIG5hbWU/OiBzdHJpbmc7XG4gICAgICB0ZWNoU3RhY2s/OiBzdHJpbmdbXTtcbiAgICAgIGNvbnZlbnRpb25zPzogc3RyaW5nW107XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZlYXR1cmUgY29udGV4dCAod2hhdCB3ZSdyZSBidWlsZGluZylcbiAgICAgKi9cbiAgICBmZWF0dXJlPzoge1xuICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgIHVzZXJTdG9yaWVzPzogc3RyaW5nW107XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRlY2huaWNhbCBjb250ZXh0IChBUEkgY29udHJhY3RzLCBzY2hlbWFzLCBldGMuKVxuICAgICAqL1xuICAgIHRlY2huaWNhbD86IHtcbiAgICAgIGFwaUNvbnRyYWN0PzogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgICAgIGRhdGFiYXNlU2NoZW1hPzogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgICAgIGRlcGVuZGVuY2llcz86IHN0cmluZ1tdO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBCdXNpbmVzcyBjb250ZXh0ICh3aHkgd2UncmUgYnVpbGRpbmcgdGhpcylcbiAgICAgKi9cbiAgICBidXNpbmVzcz86IHtcbiAgICAgIGdvYWxzPzogc3RyaW5nW107XG4gICAgICBjb25zdHJhaW50cz86IHN0cmluZ1tdO1xuICAgICAgc3Rha2Vob2xkZXJzPzogc3RyaW5nW107XG4gICAgfTtcbiAgfTtcblxuICAvKipcbiAgICogQ29tbXVuaWNhdGlvbiBwcmVmZXJlbmNlc1xuICAgKi9cbiAgY29tbXVuaWNhdGlvbj86IHtcbiAgICAvKipcbiAgICAgKiBIb3cgc2hvdWxkIHJlY2VpdmVycyByZXBvcnQgcHJvZ3Jlc3M/XG4gICAgICovXG4gICAgcHJvZ3Jlc3NSZXBvcnRpbmc/OiAnbm9uZScgfCAnbWlsZXN0b25lcycgfCAnZnJlcXVlbnQnO1xuXG4gICAgLyoqXG4gICAgICogSG93IHNob3VsZCByZWNlaXZlcnMgYXNrIHF1ZXN0aW9ucz9cbiAgICAgKi9cbiAgICBxdWVzdGlvbkhhbmRsaW5nPzogJ2Jsb2NrJyB8ICdhc3N1bWUnIHwgJ2VzY2FsYXRlJztcblxuICAgIC8qKlxuICAgICAqIFByZWZlcnJlZCB1cGRhdGUgZnJlcXVlbmN5IChtaW51dGVzKVxuICAgICAqL1xuICAgIHVwZGF0ZUZyZXF1ZW5jeT86IG51bWJlcjtcbiAgfTtcblxuICAvKipcbiAgICogVmFsaWRhdGlvbiBydWxlc1xuICAgKi9cbiAgdmFsaWRhdGlvbj86IHtcbiAgICAvKipcbiAgICAgKiBSZXF1aXJlZCBmaWVsZHMgdGhhdCBtdXN0IGJlIHByZXNlbnRcbiAgICAgKi9cbiAgICByZXF1aXJlZEZpZWxkcz86IHN0cmluZ1tdO1xuXG4gICAgLyoqXG4gICAgICogQ3VzdG9tIHZhbGlkYXRpb24gZnVuY3Rpb25zIChzZXJpYWxpemVkKVxuICAgICAqL1xuICAgIGN1c3RvbVZhbGlkYXRvcnM/OiBBcnJheTx7XG4gICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICBydWxlOiBzdHJpbmc7IC8vIFNlcmlhbGl6ZWQgZnVuY3Rpb25cbiAgICAgIGVycm9yTWVzc2FnZTogc3RyaW5nO1xuICAgIH0+O1xuICB9O1xuXG4gIC8qKlxuICAgKiBBY3R1YWwgcmVzdWx0cyAoZmlsbGVkIGJ5IHJlY2VpdmluZyBhZ2VudHMpXG4gICAqL1xuICByZXN1bHRzPzoge1xuICAgIC8qKlxuICAgICAqIEFnZW50IHRoYXQgY29tcGxldGVkIHRoZSB3b3JrXG4gICAgICovXG4gICAgY29tcGxldGVkQnk/OiBBZ2VudElkO1xuXG4gICAgLyoqXG4gICAgICogQ29tcGxldGlvbiB0aW1lc3RhbXBcbiAgICAgKi9cbiAgICBjb21wbGV0ZWRBdD86IERhdGU7XG5cbiAgICAvKipcbiAgICAgKiBBY3R1YWwgYXJ0aWZhY3RzIHByb2R1Y2VkXG4gICAgICovXG4gICAgYXJ0aWZhY3RzPzogQXJyYXk8e1xuICAgICAgdHlwZTogc3RyaW5nO1xuICAgICAgcGF0aDogc3RyaW5nO1xuICAgICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICB9PjtcblxuICAgIC8qKlxuICAgICAqIFF1YWxpdHkgZ2F0ZSByZXN1bHRzXG4gICAgICovXG4gICAgcXVhbGl0eVJlc3VsdHM/OiBBcnJheTx7XG4gICAgICBnYXRlOiBzdHJpbmc7XG4gICAgICBwYXNzZWQ6IGJvb2xlYW47XG4gICAgICBhY3R1YWxWYWx1ZTogbnVtYmVyIHwgc3RyaW5nO1xuICAgICAgdGhyZXNob2xkOiBudW1iZXIgfCBzdHJpbmc7XG4gICAgfT47XG5cbiAgICAvKipcbiAgICAgKiBBY3R1YWwgZWZmb3J0IHNwZW50IChob3VycylcbiAgICAgKi9cbiAgICBhY3R1YWxFZmZvcnQ/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBJc3N1ZXMgZW5jb3VudGVyZWRcbiAgICAgKi9cbiAgICBpc3N1ZXM/OiBBcnJheTx7XG4gICAgICBzZXZlcml0eTogJ2xvdycgfCAnbWVkaXVtJyB8ICdoaWdoJyB8ICdjcml0aWNhbCc7XG4gICAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgICAgcmVzb2x1dGlvbj86IHN0cmluZztcbiAgICB9PjtcblxuICAgIC8qKlxuICAgICAqIE5vdGVzIGZyb20gcmVjZWl2aW5nIGFnZW50XG4gICAgICovXG4gICAgbm90ZXM/OiBzdHJpbmc7XG4gIH07XG5cbiAgLyoqXG4gICAqIE1ldGFkYXRhIGZvciB0cmFja2luZyBhbmQgYW5hbHl0aWNzXG4gICAqL1xuICBtZXRhZGF0YT86IHtcbiAgICAvKipcbiAgICAgKiBUYWdzIGZvciBjYXRlZ29yaXphdGlvblxuICAgICAqL1xuICAgIHRhZ3M/OiBzdHJpbmdbXTtcblxuICAgIC8qKlxuICAgICAqIEN1c3RvbSBtZXRhZGF0YVxuICAgICAqL1xuICAgIGN1c3RvbT86IFJlY29yZDxzdHJpbmcsIGFueT47XG4gIH07XG59XG5cbi8qKlxuICogVGhyZWUtdGllciBoYW5kb2ZmIGNvbnRyYWN0IChBbGV4LUJBIOKGkiBEYW5hICsgTWFyY3VzICsgSmFtZXMpXG4gKlxuICogU3BlY2lhbGl6ZWQgY29udHJhY3QgZm9yIGZ1bGwtc3RhY2sgZmVhdHVyZSBkZXZlbG9wbWVudFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRocmVlVGllckhhbmRvZmZDb250cmFjdCBleHRlbmRzIEFnZW50SGFuZG9mZkNvbnRyYWN0IHtcbiAgdHlwZTogJ3BhcmFsbGVsJztcblxuICAvKipcbiAgICogQVBJIGNvbnRyYWN0IHNoYXJlZCBiZXR3ZWVuIGFsbCB0aWVyc1xuICAgKi9cbiAgYXBpQ29udHJhY3Q6IHtcbiAgICAvKipcbiAgICAgKiBFbmRwb2ludHMgd2l0aCByZXF1ZXN0L3Jlc3BvbnNlIHNjaGVtYXNcbiAgICAgKi9cbiAgICBlbmRwb2ludHM6IEFycmF5PHtcbiAgICAgIG1ldGhvZDogJ0dFVCcgfCAnUE9TVCcgfCAnUFVUJyB8ICdERUxFVEUnIHwgJ1BBVENIJztcbiAgICAgIHBhdGg6IHN0cmluZztcbiAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgICByZXF1ZXN0U2NoZW1hPzogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgICAgIHJlc3BvbnNlU2NoZW1hPzogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgICAgIGF1dGhlbnRpY2F0aW9uPzogYm9vbGVhbjtcbiAgICB9PjtcblxuICAgIC8qKlxuICAgICAqIFNoYXJlZCB0eXBlcy9tb2RlbHNcbiAgICAgKi9cbiAgICBzaGFyZWRUeXBlcz86IFJlY29yZDxzdHJpbmcsIGFueT47XG4gIH07XG5cbiAgLyoqXG4gICAqIERhdGFiYXNlIHNjaGVtYSBmb3IgZGF0YSB0aWVyXG4gICAqL1xuICBkYXRhYmFzZVNjaGVtYToge1xuICAgIC8qKlxuICAgICAqIFRhYmxlcyB0byBjcmVhdGUvbW9kaWZ5XG4gICAgICovXG4gICAgdGFibGVzOiBBcnJheTx7XG4gICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICBjb2x1bW5zOiBBcnJheTx7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgdHlwZTogc3RyaW5nO1xuICAgICAgICBudWxsYWJsZT86IGJvb2xlYW47XG4gICAgICAgIHVuaXF1ZT86IGJvb2xlYW47XG4gICAgICAgIGRlZmF1bHQ/OiBhbnk7XG4gICAgICB9PjtcbiAgICAgIGluZGV4ZXM/OiBBcnJheTx7XG4gICAgICAgIGNvbHVtbnM6IHN0cmluZ1tdO1xuICAgICAgICB1bmlxdWU/OiBib29sZWFuO1xuICAgICAgfT47XG4gICAgICBmb3JlaWduS2V5cz86IEFycmF5PHtcbiAgICAgICAgY29sdW1uOiBzdHJpbmc7XG4gICAgICAgIHJlZmVyZW5jZXM6IHN0cmluZztcbiAgICAgICAgb25EZWxldGU/OiAnQ0FTQ0FERScgfCAnU0VUIE5VTEwnIHwgJ1JFU1RSSUNUJztcbiAgICAgIH0+O1xuICAgIH0+O1xuXG4gICAgLyoqXG4gICAgICogUkxTIHBvbGljaWVzIGZvciBzZWN1cml0eVxuICAgICAqL1xuICAgIHJsc1BvbGljaWVzPzogQXJyYXk8e1xuICAgICAgdGFibGU6IHN0cmluZztcbiAgICAgIG9wZXJhdGlvbjogJ1NFTEVDVCcgfCAnSU5TRVJUJyB8ICdVUERBVEUnIHwgJ0RFTEVURSc7XG4gICAgICB1c2luZzogc3RyaW5nOyAvLyBTUUwgY29uZGl0aW9uXG4gICAgfT47XG4gIH07XG5cbiAgLyoqXG4gICAqIFVJIHJlcXVpcmVtZW50cyBmb3IgcHJlc2VudGF0aW9uIHRpZXJcbiAgICovXG4gIHVpUmVxdWlyZW1lbnRzOiB7XG4gICAgLyoqXG4gICAgICogQ29tcG9uZW50cyB0byBidWlsZFxuICAgICAqL1xuICAgIGNvbXBvbmVudHM6IEFycmF5PHtcbiAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgIHR5cGU6ICdwYWdlJyB8ICdjb21wb25lbnQnIHwgJ2hvb2snIHwgJ3V0aWwnO1xuICAgICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgIHByb3BzPzogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgICB9PjtcblxuICAgIC8qKlxuICAgICAqIEFjY2Vzc2liaWxpdHkgcmVxdWlyZW1lbnRzIChXQ0FHIGxldmVsKVxuICAgICAqL1xuICAgIGFjY2Vzc2liaWxpdHk6ICdBJyB8ICdBQScgfCAnQUFBJztcblxuICAgIC8qKlxuICAgICAqIFJlc3BvbnNpdmUgYnJlYWtwb2ludHNcbiAgICAgKi9cbiAgICByZXNwb25zaXZlPzogc3RyaW5nW107XG5cbiAgICAvKipcbiAgICAgKiBEZXNpZ24gc3lzdGVtL3RoZW1lXG4gICAgICovXG4gICAgZGVzaWduU3lzdGVtPzogc3RyaW5nO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJbnRlZ3JhdGlvbiBjaGVja3BvaW50c1xuICAgKi9cbiAgaW50ZWdyYXRpb25DaGVja3BvaW50czogQXJyYXk8e1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIHBhcnRpY2lwYW50czogQWdlbnRJZFtdO1xuICAgIGFjY2VwdGFuY2VDcml0ZXJpYTogc3RyaW5nW107XG4gIH0+O1xufVxuXG4vKipcbiAqIENvbnRyYWN0IGJ1aWxkZXIgZm9yIGVhc2llciBjb250cmFjdCBjcmVhdGlvblxuICovXG5leHBvcnQgY2xhc3MgQ29udHJhY3RCdWlsZGVyIHtcbiAgcHJpdmF0ZSBjb250cmFjdDogUGFydGlhbDxBZ2VudEhhbmRvZmZDb250cmFjdD47XG5cbiAgY29uc3RydWN0b3Ioc2VuZGVyOiBBZ2VudElkKSB7XG4gICAgdGhpcy5jb250cmFjdCA9IHtcbiAgICAgIGNvbnRyYWN0SWQ6IHRoaXMuZ2VuZXJhdGVJZCgpLFxuICAgICAgdmVyc2lvbjogQ09OVFJBQ1RfVkVSU0lPTixcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIHNlbmRlcjogeyBhZ2VudElkOiBzZW5kZXIgfSxcbiAgICAgIHJlY2VpdmVyczogW10sXG4gICAgICB3b3JrSXRlbXM6IFtdLFxuICAgICAgdHlwZTogJ3NlcXVlbnRpYWwnLFxuICAgICAgcHJpb3JpdHk6ICdub3JtYWwnLFxuICAgICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgICBleHBlY3RlZE91dHB1dDoge1xuICAgICAgICBhcnRpZmFjdHM6IFtdLFxuICAgICAgICBzdWNjZXNzQ3JpdGVyaWE6IFtdXG4gICAgICB9LFxuICAgICAgbWVtb3J5U25hcHNob3Q6IHtcbiAgICAgICAgYWdlbnRJZDogc2VuZGVyLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIG1lbW9yeUZpbGVzOiB7fSxcbiAgICAgICAgY3JpdGljYWxQYXR0ZXJuczogW10sXG4gICAgICAgIGNvbnRleHRTdW1tYXJ5OiAnJyxcbiAgICAgICAgZXN0aW1hdGVkVG9rZW5zOiAwXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSByZWNlaXZlciB0byB0aGUgY29udHJhY3RcbiAgICovXG4gIGFkZFJlY2VpdmVyKGFnZW50SWQ6IEFnZW50SWQsIHJvbGU/OiBzdHJpbmcpOiB0aGlzIHtcbiAgICB0aGlzLmNvbnRyYWN0LnJlY2VpdmVycyEucHVzaCh7IGFnZW50SWQsIHJvbGUgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGhhbmRvZmYgdHlwZVxuICAgKi9cbiAgc2V0VHlwZSh0eXBlOiBIYW5kb2ZmVHlwZSk6IHRoaXMge1xuICAgIHRoaXMuY29udHJhY3QudHlwZSA9IHR5cGU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHByaW9yaXR5XG4gICAqL1xuICBzZXRQcmlvcml0eShwcmlvcml0eTogSGFuZG9mZlByaW9yaXR5KTogdGhpcyB7XG4gICAgdGhpcy5jb250cmFjdC5wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCB3b3JrIGl0ZW1cbiAgICovXG4gIGFkZFdvcmtJdGVtKHdvcmtJdGVtOiBXb3JrSXRlbSk6IHRoaXMge1xuICAgIHRoaXMuY29udHJhY3Qud29ya0l0ZW1zIS5wdXNoKHdvcmtJdGVtKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgZXhwZWN0ZWQgb3V0cHV0XG4gICAqL1xuICBzZXRFeHBlY3RlZE91dHB1dChvdXRwdXQ6IEV4cGVjdGVkT3V0cHV0KTogdGhpcyB7XG4gICAgdGhpcy5jb250cmFjdC5leHBlY3RlZE91dHB1dCA9IG91dHB1dDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgbWVtb3J5IHNuYXBzaG90XG4gICAqL1xuICBzZXRNZW1vcnlTbmFwc2hvdChzbmFwc2hvdDogTWVtb3J5U25hcHNob3QpOiB0aGlzIHtcbiAgICB0aGlzLmNvbnRyYWN0Lm1lbW9yeVNuYXBzaG90ID0gc25hcHNob3Q7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGNvbnRleHRcbiAgICovXG4gIHNldENvbnRleHQoY29udGV4dDogQWdlbnRIYW5kb2ZmQ29udHJhY3RbJ2NvbnRleHQnXSk6IHRoaXMge1xuICAgIHRoaXMuY29udHJhY3QuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGV4cGlyYXRpb24gdGltZVxuICAgKi9cbiAgc2V0RXhwaXJhdGlvbihob3VyczogbnVtYmVyKTogdGhpcyB7XG4gICAgY29uc3QgZXhwaXJlc0F0ID0gbmV3IERhdGUoKTtcbiAgICBleHBpcmVzQXQuc2V0SG91cnMoZXhwaXJlc0F0LmdldEhvdXJzKCkgKyBob3Vycyk7XG4gICAgdGhpcy5jb250cmFjdC5leHBpcmVzQXQgPSBleHBpcmVzQXQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQnVpbGQgdGhlIGZpbmFsIGNvbnRyYWN0XG4gICAqL1xuICBidWlsZCgpOiBBZ2VudEhhbmRvZmZDb250cmFjdCB7XG4gICAgaWYgKCF0aGlzLmNvbnRyYWN0LnJlY2VpdmVycyB8fCB0aGlzLmNvbnRyYWN0LnJlY2VpdmVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ29udHJhY3QgbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSByZWNlaXZlcicpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5jb250cmFjdC53b3JrSXRlbXMgfHwgdGhpcy5jb250cmFjdC53b3JrSXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbnRyYWN0IG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgd29yayBpdGVtJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY29udHJhY3QgYXMgQWdlbnRIYW5kb2ZmQ29udHJhY3Q7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgdW5pcXVlIGNvbnRyYWN0IElEXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlSWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYGNvbnRyYWN0LSR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNyl9YDtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9