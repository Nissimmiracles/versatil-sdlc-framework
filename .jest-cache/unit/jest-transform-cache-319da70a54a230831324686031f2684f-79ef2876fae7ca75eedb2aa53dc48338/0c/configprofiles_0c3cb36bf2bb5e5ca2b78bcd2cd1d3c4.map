{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/src/config/config-profiles.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/src/config/config-profiles.ts"],"sourcesContent":["/**\n * VERSATIL SDLC Framework - Configuration Profiles\n * Preset configuration profiles for different use cases\n */\n\nimport { UserPreferences } from './preference-manager.js';\n\nexport interface ConfigProfile {\n  name: string;\n  description: string;\n  emoji: string;\n  bestFor: string;\n  preferences: UserPreferences;\n}\n\nexport class ConfigProfileManager {\n  /**\n   * Get all available profiles\n   */\n  getAvailableProfiles(): ConfigProfile[] {\n    return [this.getConservativeProfile(), this.getBalancedProfile(), this.getAggressiveProfile()];\n  }\n\n  /**\n   * Get profile by name\n   */\n  getProfile(name: 'conservative' | 'balanced' | 'aggressive'): ConfigProfile | null {\n    switch (name) {\n      case 'conservative':\n        return this.getConservativeProfile();\n      case 'balanced':\n        return this.getBalancedProfile();\n      case 'aggressive':\n        return this.getAggressiveProfile();\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Conservative profile - Maximum safety\n   */\n  private getConservativeProfile(): ConfigProfile {\n    return {\n      name: 'Conservative',\n      description: 'Maximum safety and stability. Updates are carefully vetted.',\n      emoji: 'üõ°Ô∏è',\n      bestFor: 'Production environments, risk-averse teams, enterprise use',\n      preferences: {\n        // Update preferences - Very cautious\n        updateBehavior: 'manual', // User must manually trigger updates\n        updateChannel: 'stable', // Only stable releases\n        safetyLevel: 'conservative',\n        checkFrequency: 168, // Check weekly (7 days)\n        autoInstallSecurity: false, // Even security updates need approval\n\n        // Rollback preferences - Maximum backups\n        rollbackBehavior: 'prompt', // Always ask before rollback\n        maxRollbackPoints: 10, // Keep many backups\n        rollbackOnFailure: true, // Auto-rollback on failure\n\n        // Notification preferences - All notifications\n        notificationLevel: 'all', // See everything\n        notifyOnUpdateAvailable: true,\n        notifyOnUpdateInstalled: true,\n        notifyOnSecurityUpdate: true,\n        notifyOnBreakingChange: true,\n\n        // Telemetry preferences - Minimal sharing\n        enableTelemetry: true,\n        shareErrorReports: true,\n        shareUsageStatistics: false,\n\n        // Advanced preferences - Maximum safety\n        backupBeforeUpdate: true,\n        validateAfterUpdate: true,\n        allowPrerelease: false,\n        skipOptionalDependencies: false,\n\n        // Metadata\n        createdAt: new Date().toISOString(),\n        lastModified: new Date().toISOString(),\n        version: '1.0.0'\n      }\n    };\n  }\n\n  /**\n   * Balanced profile - Recommended for most users\n   */\n  private getBalancedProfile(): ConfigProfile {\n    return {\n      name: 'Balanced',\n      description: 'Good balance between safety and staying up-to-date.',\n      emoji: '‚öñÔ∏è',\n      bestFor: 'Most teams, development environments, general use',\n      preferences: {\n        // Update preferences - Balanced approach\n        updateBehavior: 'notify', // Notify and get approval\n        updateChannel: 'stable', // Stable releases\n        safetyLevel: 'balanced',\n        checkFrequency: 24, // Check daily\n        autoInstallSecurity: true, // Auto-install security updates\n\n        // Rollback preferences - Standard backups\n        rollbackBehavior: 'prompt', // Ask before rollback\n        maxRollbackPoints: 5, // Keep 5 backups\n        rollbackOnFailure: true, // Auto-rollback on failure\n\n        // Notification preferences - Important only\n        notificationLevel: 'important',\n        notifyOnUpdateAvailable: true,\n        notifyOnUpdateInstalled: true,\n        notifyOnSecurityUpdate: true,\n        notifyOnBreakingChange: true,\n\n        // Telemetry preferences - Help improve framework\n        enableTelemetry: true,\n        shareErrorReports: true,\n        shareUsageStatistics: false,\n\n        // Advanced preferences - Standard safety\n        backupBeforeUpdate: true,\n        validateAfterUpdate: true,\n        allowPrerelease: false,\n        skipOptionalDependencies: false,\n\n        // Metadata\n        createdAt: new Date().toISOString(),\n        lastModified: new Date().toISOString(),\n        version: '1.0.0'\n      }\n    };\n  }\n\n  /**\n   * Aggressive profile - Latest features\n   */\n  private getAggressiveProfile(): ConfigProfile {\n    return {\n      name: 'Aggressive',\n      description: 'Stay on the bleeding edge. Get new features as soon as they\\'re available.',\n      emoji: '‚ö°',\n      bestFor: 'Early adopters, testing environments, framework contributors',\n      preferences: {\n        // Update preferences - Fast updates\n        updateBehavior: 'auto', // Auto-install updates\n        updateChannel: 'beta', // Beta releases (or even alpha if user wants)\n        safetyLevel: 'fast',\n        checkFrequency: 6, // Check every 6 hours\n        autoInstallSecurity: true, // Auto-install security updates\n\n        // Rollback preferences - Minimal backups\n        rollbackBehavior: 'auto', // Auto-rollback without asking\n        maxRollbackPoints: 3, // Keep 3 backups\n        rollbackOnFailure: true, // Auto-rollback on failure\n\n        // Notification preferences - Critical only\n        notificationLevel: 'critical',\n        notifyOnUpdateAvailable: false, // Don't notify, just install\n        notifyOnUpdateInstalled: true, // Notify after install\n        notifyOnSecurityUpdate: true,\n        notifyOnBreakingChange: true,\n\n        // Telemetry preferences - Full sharing\n        enableTelemetry: true,\n        shareErrorReports: true,\n        shareUsageStatistics: true,\n\n        // Advanced preferences - Speed over safety\n        backupBeforeUpdate: true, // Still backup (safety net)\n        validateAfterUpdate: true, // Still validate (catch issues)\n        allowPrerelease: true, // Allow beta/alpha versions\n        skipOptionalDependencies: true, // Faster installs\n\n        // Metadata\n        createdAt: new Date().toISOString(),\n        lastModified: new Date().toISOString(),\n        version: '1.0.0'\n      }\n    };\n  }\n\n  /**\n   * CI/CD profile - For automated environments\n   */\n  getCICDProfile(): ConfigProfile {\n    return {\n      name: 'CI/CD',\n      description: 'Optimized for continuous integration and deployment pipelines.',\n      emoji: 'ü§ñ',\n      bestFor: 'CI/CD pipelines, Docker containers, automated testing',\n      preferences: {\n        // Update preferences - Manual control\n        updateBehavior: 'manual', // Updates controlled by CI/CD\n        updateChannel: 'stable',\n        safetyLevel: 'balanced',\n        checkFrequency: 0, // Don't auto-check\n        autoInstallSecurity: false, // CI/CD controls updates\n\n        // Rollback preferences - Automated\n        rollbackBehavior: 'auto',\n        maxRollbackPoints: 2, // Minimal backups (ephemeral environment)\n        rollbackOnFailure: true,\n\n        // Notification preferences - No notifications\n        notificationLevel: 'none',\n        notifyOnUpdateAvailable: false,\n        notifyOnUpdateInstalled: false,\n        notifyOnSecurityUpdate: false,\n        notifyOnBreakingChange: false,\n\n        // Telemetry preferences - No telemetry in CI\n        enableTelemetry: false,\n        shareErrorReports: false,\n        shareUsageStatistics: false,\n\n        // Advanced preferences - Fast, minimal validation\n        backupBeforeUpdate: false, // Ephemeral, no need for backups\n        validateAfterUpdate: true, // Always validate\n        allowPrerelease: false,\n        skipOptionalDependencies: true,\n\n        // Metadata\n        createdAt: new Date().toISOString(),\n        lastModified: new Date().toISOString(),\n        version: '1.0.0'\n      }\n    };\n  }\n\n  /**\n   * Development profile - For active development\n   */\n  getDevelopmentProfile(): ConfigProfile {\n    return {\n      name: 'Development',\n      description: 'Optimized for active framework development and testing.',\n      emoji: 'üë®‚Äçüíª',\n      bestFor: 'Framework contributors, local development, testing new features',\n      preferences: {\n        // Update preferences - Stay current but cautious\n        updateBehavior: 'notify',\n        updateChannel: 'alpha', // Get all updates including alpha\n        safetyLevel: 'balanced',\n        checkFrequency: 12, // Check twice daily\n        autoInstallSecurity: true,\n\n        // Rollback preferences - Many backups for testing\n        rollbackBehavior: 'prompt',\n        maxRollbackPoints: 10, // Keep many versions for testing\n        rollbackOnFailure: true,\n\n        // Notification preferences - All notifications\n        notificationLevel: 'all',\n        notifyOnUpdateAvailable: true,\n        notifyOnUpdateInstalled: true,\n        notifyOnSecurityUpdate: true,\n        notifyOnBreakingChange: true,\n\n        // Telemetry preferences - Full participation\n        enableTelemetry: true,\n        shareErrorReports: true,\n        shareUsageStatistics: true,\n\n        // Advanced preferences - Enable all features\n        backupBeforeUpdate: true,\n        validateAfterUpdate: true,\n        allowPrerelease: true, // Allow all prereleases\n        skipOptionalDependencies: false,\n\n        // Metadata\n        createdAt: new Date().toISOString(),\n        lastModified: new Date().toISOString(),\n        version: '1.0.0'\n      }\n    };\n  }\n\n  /**\n   * Get profile recommendations based on environment\n   */\n  getRecommendedProfile(): ConfigProfile {\n    // Detect environment\n    const isCI = process.env.CI === 'true' || process.env.GITHUB_ACTIONS === 'true';\n    const isDev = process.env.NODE_ENV === 'development';\n    const isProd = process.env.NODE_ENV === 'production';\n\n    if (isCI) {\n      return this.getCICDProfile();\n    }\n\n    if (isDev) {\n      return this.getDevelopmentProfile();\n    }\n\n    if (isProd) {\n      return this.getConservativeProfile();\n    }\n\n    // Default: balanced\n    return this.getBalancedProfile();\n  }\n\n  /**\n   * Get profile comparison\n   */\n  getProfileComparison(): string {\n    const profiles = [this.getConservativeProfile(), this.getBalancedProfile(), this.getAggressiveProfile()];\n\n    const lines: string[] = [];\n\n    lines.push('üìä Profile Comparison:\\n');\n\n    // Header\n    lines.push('Feature                ‚îÇ Conservative  ‚îÇ Balanced      ‚îÇ Aggressive');\n    lines.push('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');\n\n    // Update behavior\n    lines.push(\n      `Update Behavior        ‚îÇ ${this.padRight(profiles[0].preferences.updateBehavior, 13)} ‚îÇ ${this.padRight(profiles[1].preferences.updateBehavior, 13)} ‚îÇ ${profiles[2].preferences.updateBehavior}`\n    );\n\n    // Update channel\n    lines.push(\n      `Update Channel         ‚îÇ ${this.padRight(profiles[0].preferences.updateChannel, 13)} ‚îÇ ${this.padRight(profiles[1].preferences.updateChannel, 13)} ‚îÇ ${profiles[2].preferences.updateChannel}`\n    );\n\n    // Check frequency\n    lines.push(\n      `Check Frequency        ‚îÇ ${this.padRight('Weekly', 13)} ‚îÇ ${this.padRight('Daily', 13)} ‚îÇ Every 6h`\n    );\n\n    // Auto security\n    lines.push(\n      `Auto Security Updates  ‚îÇ ${this.padRight(profiles[0].preferences.autoInstallSecurity ? 'No' : 'No', 13)} ‚îÇ ${this.padRight(profiles[1].preferences.autoInstallSecurity ? 'Yes' : 'No', 13)} ‚îÇ ${profiles[2].preferences.autoInstallSecurity ? 'Yes' : 'No'}`\n    );\n\n    // Rollback points\n    lines.push(\n      `Rollback Points        ‚îÇ ${this.padRight('10', 13)} ‚îÇ ${this.padRight('5', 13)} ‚îÇ 3`\n    );\n\n    // Allow prerelease\n    lines.push(\n      `Allow Prerelease       ‚îÇ ${this.padRight(profiles[0].preferences.allowPrerelease ? 'Yes' : 'No', 13)} ‚îÇ ${this.padRight(profiles[1].preferences.allowPrerelease ? 'Yes' : 'No', 13)} ‚îÇ ${profiles[2].preferences.allowPrerelease ? 'Yes' : 'No'}`\n    );\n\n    lines.push('');\n    lines.push('Best For:');\n    profiles.forEach(profile => {\n      lines.push(`  ${profile.emoji} ${profile.name}: ${profile.bestFor}`);\n    });\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * Pad string to right\n   */\n  private padRight(str: string, length: number): string {\n    return str + ' '.repeat(Math.max(0, length - str.length));\n  }\n}\n\n/**\n * Default config profile manager instance\n */\nexport const defaultConfigProfileManager = new ConfigProfileManager();\n"],"version":3}