8833ca5d0281e1f22e2411b9dc7f2a63
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.agentRegistry = exports.log = exports.AgentRegistry = void 0;
const enhanced_maria_1 = require("./enhanced-maria");
const enhanced_james_1 = require("./enhanced-james");
const enhanced_marcus_1 = require("./enhanced-marcus");
const sarah_pm_1 = require("./sarah-pm");
const alex_ba_1 = require("./alex-ba");
const dr_ai_ml_1 = require("./dr-ai-ml");
const devops_dan_1 = require("./devops-dan");
const security_sam_1 = require("./security-sam");
const architecture_dan_1 = require("./architecture-dan");
const deployment_orchestrator_1 = require("./deployment-orchestrator");
const introspective_agent_1 = require("./introspective-agent");
const simulation_qa_1 = require("./simulation-qa");
class AgentRegistry {
    constructor() {
        this.agents = new Map();
        this.registerAllAgents();
    }
    registerAllAgents() {
        this.agents.set('enhanced-maria', new enhanced_maria_1.EnhancedMaria());
        this.agents.set('enhanced-james', new enhanced_james_1.EnhancedJames());
        this.agents.set('enhanced-marcus', new enhanced_marcus_1.EnhancedMarcus());
        this.agents.set('sarah-pm', new sarah_pm_1.SarahPm());
        this.agents.set('alex-ba', new alex_ba_1.AlexBa());
        this.agents.set('dr-ai-ml', new dr_ai_ml_1.DrAiMl());
        this.agents.set('devops-dan', new devops_dan_1.DevopsDan());
        this.agents.set('security-sam', new security_sam_1.SecuritySam());
        this.agents.set('architecture-dan', new architecture_dan_1.ArchitectureDan());
        this.agents.set('deployment-orchestrator', new deployment_orchestrator_1.DeploymentOrchestrator());
        this.agents.set('introspective-agent', new introspective_agent_1.IntrospectiveAgent());
        this.agents.set('simulation-qa', new simulation_qa_1.SimulationQa());
    }
    getAgent(id) {
        return this.agents.get(id);
    }
    getAllAgents() {
        return Array.from(this.agents.values());
    }
    listAgents() {
        return this.getAllAgents();
    }
    registerAgent(id, agent) {
        this.agents.set(id, agent);
    }
    getAgentsForFilePattern(pattern) {
        return this.getAllAgents();
    }
    getStatus() {
        return {
            totalAgents: this.agents.size,
            agents: Array.from(this.agents.entries()).map(([id, agent]) => ({
                id,
                name: agent.name,
                specialization: agent.specialization
            }))
        };
    }
    isHealthy() {
        return this.agents.size > 0;
    }
    getAgentMetadata(id) {
        const agent = this.agents.get(id);
        if (!agent)
            return undefined;
        const metadata = {
            name: agent.name,
            specialization: agent.specialization,
            autoActivate: false,
            priority: id === 'introspective-agent' ? 4 : 3,
            triggers: {
                keywords: this.getKeywordsForAgent(id),
                patterns: [],
                fileTypes: []
            },
            collaborators: this.getCollaboratorIds(id)
        };
        // Add MCP tools for introspective agent
        if (id === 'introspective-agent') {
            metadata.mcpTools = ['Read MCP', 'Bash MCP', 'WebFetch MCP'];
        }
        return metadata;
    }
    getCollaborators(id) {
        const collaboratorIds = this.getCollaboratorIds(id);
        return collaboratorIds
            .map(collabId => this.agents.get(collabId))
            .filter((agent) => agent !== undefined);
    }
    getKeywordsForAgent(id) {
        const keywordMap = {
            'introspective-agent': ['introspection', 'optimization', 'performance', 'learning'],
            'enhanced-maria': ['test', 'quality', 'coverage', 'validation'],
            'enhanced-james': ['ui', 'frontend', 'component', 'accessibility'],
            'enhanced-marcus': ['api', 'backend', 'security', 'database'],
            'sarah-pm': ['project', 'sprint', 'milestone', 'timeline'],
            'alex-ba': ['requirements', 'business', 'analysis', 'stakeholder'],
            'dr-ai-ml': ['machine learning', 'model', 'training', 'prediction']
        };
        return keywordMap[id] || [];
    }
    getCollaboratorIds(id) {
        const collabMap = {
            'introspective-agent': ['enhanced-maria', 'enhanced-james', 'enhanced-marcus'],
            'enhanced-maria': ['enhanced-james', 'enhanced-marcus'],
            'enhanced-james': ['enhanced-maria', 'enhanced-marcus'],
            'enhanced-marcus': ['enhanced-maria', 'enhanced-james'],
            'sarah-pm': ['enhanced-maria', 'enhanced-james', 'enhanced-marcus', 'alex-ba'],
            'alex-ba': ['sarah-pm', 'enhanced-maria'],
            'dr-ai-ml': ['enhanced-marcus', 'enhanced-maria']
        };
        return collabMap[id] || [];
    }
}
exports.AgentRegistry = AgentRegistry;
exports.log = console;
// Export singleton instance for easy import
exports.agentRegistry = new AgentRegistry();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,