d839d42b3e14b78b66bdc1a326a993bc
"use strict";
/**
 * Unit Tests: Three-Tier Handoff Helper
 *
 * Coverage Target: 85%+
 *
 * Test Coverage:
 * - ThreeTierHandoffBuilder construction and configuration
 * - API endpoint, database table, UI component addition
 * - Contract building and validation
 * - Work item generation for Dana, Marcus, James
 * - Integration checkpoints creation
 * - RLS policy generation
 * - Effort estimation
 * - Error handling
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const three_tier_handoff_js_1 = require("../../../src/agents/contracts/three-tier-handoff.js");
(0, globals_1.describe)('ThreeTierHandoffBuilder', () => {
    let requirements;
    let builder;
    (0, globals_1.beforeEach)(() => {
        requirements = {
            name: 'User Authentication',
            description: 'Implement secure user login and session management',
            userStories: [
                'As a user, I want to login with email and password',
                'As a user, I want to stay logged in across sessions'
            ],
            goals: ['Secure authentication', 'Good UX'],
            constraints: ['Must use JWT', 'Must be WCAG 2.1 AA compliant']
        };
        builder = new three_tier_handoff_js_1.ThreeTierHandoffBuilder(requirements);
    });
    (0, globals_1.describe)('Builder Construction', () => {
        (0, globals_1.it)('should create builder with requirements', () => {
            (0, globals_1.expect)(builder).toBeDefined();
            (0, globals_1.expect)(builder).toBeInstanceOf(three_tier_handoff_js_1.ThreeTierHandoffBuilder);
        });
        (0, globals_1.it)('should initialize with empty endpoints, tables, components', async () => {
            const contract = await builder.build();
            // Should have default structure even with no additions
            (0, globals_1.expect)(contract.apiContract).toBeDefined();
            (0, globals_1.expect)(contract.databaseSchema).toBeDefined();
            (0, globals_1.expect)(contract.uiRequirements).toBeDefined();
        });
    });
    (0, globals_1.describe)('Adding API Endpoints', () => {
        (0, globals_1.it)('should add API endpoint', async () => {
            const endpoint = {
                method: 'POST',
                path: '/api/auth/login',
                description: 'User login endpoint'
            };
            builder.addEndpoint(endpoint);
            const contract = await builder.build();
            (0, globals_1.expect)(contract.apiContract.endpoints).toHaveLength(1);
            (0, globals_1.expect)(contract.apiContract.endpoints[0].method).toBe('POST');
            (0, globals_1.expect)(contract.apiContract.endpoints[0].path).toBe('/api/auth/login');
        });
        (0, globals_1.it)('should add multiple endpoints', async () => {
            builder
                .addEndpoint({
                method: 'POST',
                path: '/api/auth/login',
                description: 'Login'
            })
                .addEndpoint({
                method: 'POST',
                path: '/api/auth/logout',
                description: 'Logout'
            })
                .addEndpoint({
                method: 'GET',
                path: '/api/auth/me',
                description: 'Get current user'
            });
            const contract = await builder.build();
            (0, globals_1.expect)(contract.apiContract.endpoints).toHaveLength(3);
        });
        (0, globals_1.it)('should support endpoint with request/response schemas', async () => {
            builder.addEndpoint({
                method: 'POST',
                path: '/api/auth/login',
                description: 'Login',
                requestSchema: {
                    email: 'string',
                    password: 'string'
                },
                responseSchema: {
                    token: 'string',
                    user: 'object'
                },
                authentication: false
            });
            const contract = await builder.build();
            const endpoint = contract.apiContract.endpoints[0];
            (0, globals_1.expect)(endpoint.requestSchema).toEqual({
                email: 'string',
                password: 'string'
            });
            (0, globals_1.expect)(endpoint.responseSchema).toEqual({
                token: 'string',
                user: 'object'
            });
            (0, globals_1.expect)(endpoint.authentication).toBe(false);
        });
        (0, globals_1.it)('should create work item for Marcus when endpoints added', async () => {
            builder.addEndpoint({
                method: 'POST',
                path: '/api/auth/login',
                description: 'Login'
            });
            const contract = await builder.build();
            const marcusWork = contract.workItems.find(w => w.description.includes('API endpoints'));
            (0, globals_1.expect)(marcusWork).toBeDefined();
            (0, globals_1.expect)(marcusWork?.estimatedEffort).toBe(2); // 2 hours per endpoint
            (0, globals_1.expect)(marcusWork?.acceptanceCriteria).toContain('All endpoints implemented');
            (0, globals_1.expect)(marcusWork?.acceptanceCriteria).toContain('OWASP security compliance');
        });
    });
    (0, globals_1.describe)('Adding Database Tables', () => {
        (0, globals_1.it)('should add database table', async () => {
            const table = {
                name: 'users',
                columns: [
                    { name: 'id', type: 'uuid', nullable: false },
                    { name: 'email', type: 'text', nullable: false, unique: true }
                ]
            };
            builder.addTable(table);
            const contract = await builder.build();
            (0, globals_1.expect)(contract.databaseSchema.tables).toHaveLength(1);
            (0, globals_1.expect)(contract.databaseSchema.tables[0].name).toBe('users');
            (0, globals_1.expect)(contract.databaseSchema.tables[0].columns).toHaveLength(2);
        });
        (0, globals_1.it)('should add multiple tables', async () => {
            builder
                .addTable({
                name: 'users',
                columns: [{ name: 'id', type: 'uuid', nullable: false }]
            })
                .addTable({
                name: 'sessions',
                columns: [{ name: 'id', type: 'uuid', nullable: false }]
            });
            const contract = await builder.build();
            (0, globals_1.expect)(contract.databaseSchema.tables).toHaveLength(2);
        });
        (0, globals_1.it)('should support table with indexes', async () => {
            builder.addTable({
                name: 'users',
                columns: [
                    { name: 'id', type: 'uuid', nullable: false },
                    { name: 'email', type: 'text', nullable: false }
                ],
                indexes: [
                    { columns: ['email'], unique: true }
                ]
            });
            const contract = await builder.build();
            const table = contract.databaseSchema.tables[0];
            (0, globals_1.expect)(table.indexes).toHaveLength(1);
            (0, globals_1.expect)(table.indexes[0].unique).toBe(true);
        });
        (0, globals_1.it)('should support table with foreign keys', async () => {
            builder.addTable({
                name: 'sessions',
                columns: [
                    { name: 'id', type: 'uuid', nullable: false },
                    { name: 'user_id', type: 'uuid', nullable: false }
                ],
                foreignKeys: [
                    {
                        column: 'user_id',
                        references: 'users.id',
                        onDelete: 'CASCADE'
                    }
                ]
            });
            const contract = await builder.build();
            const table = contract.databaseSchema.tables[0];
            (0, globals_1.expect)(table.foreignKeys).toHaveLength(1);
            (0, globals_1.expect)(table.foreignKeys[0].onDelete).toBe('CASCADE');
        });
        (0, globals_1.it)('should create work item for Dana when tables added', async () => {
            builder.addTable({
                name: 'users',
                columns: [{ name: 'id', type: 'uuid', nullable: false }]
            });
            const contract = await builder.build();
            const danaWork = contract.workItems.find(w => w.description.includes('database schema'));
            (0, globals_1.expect)(danaWork).toBeDefined();
            (0, globals_1.expect)(danaWork?.estimatedEffort).toBe(1.5); // 1.5 hours per table
            (0, globals_1.expect)(danaWork?.acceptanceCriteria).toContain('All tables created with correct schema');
            (0, globals_1.expect)(danaWork?.acceptanceCriteria).toContain('RLS policies implemented');
        });
        (0, globals_1.it)('should generate RLS policies for tables', async () => {
            builder.addTable({
                name: 'users',
                columns: [{ name: 'id', type: 'uuid', nullable: false }]
            });
            const contract = await builder.build();
            (0, globals_1.expect)(contract.databaseSchema.rlsPolicies).toBeDefined();
            (0, globals_1.expect)(contract.databaseSchema.rlsPolicies.length).toBeGreaterThan(0);
            // Should have policies for SELECT, INSERT, UPDATE, DELETE
            const operations = contract.databaseSchema.rlsPolicies.map(p => p.operation);
            (0, globals_1.expect)(operations).toContain('SELECT');
            (0, globals_1.expect)(operations).toContain('INSERT');
            (0, globals_1.expect)(operations).toContain('UPDATE');
            (0, globals_1.expect)(operations).toContain('DELETE');
        });
        (0, globals_1.it)('should generate authentication check in RLS policies', async () => {
            builder.addTable({
                name: 'users',
                columns: [{ name: 'id', type: 'uuid', nullable: false }]
            });
            const contract = await builder.build();
            const selectPolicy = contract.databaseSchema.rlsPolicies.find(p => p.table === 'users' && p.operation === 'SELECT');
            (0, globals_1.expect)(selectPolicy?.using).toBe('auth.uid() IS NOT NULL');
        });
    });
    (0, globals_1.describe)('Adding UI Components', () => {
        (0, globals_1.it)('should add UI component', async () => {
            const component = {
                name: 'LoginForm',
                type: 'component',
                description: 'User login form with email and password'
            };
            builder.addComponent(component);
            const contract = await builder.build();
            (0, globals_1.expect)(contract.uiRequirements.components).toHaveLength(1);
            (0, globals_1.expect)(contract.uiRequirements.components[0].name).toBe('LoginForm');
        });
        (0, globals_1.it)('should add multiple components', async () => {
            builder
                .addComponent({
                name: 'LoginForm',
                type: 'component',
                description: 'Login form'
            })
                .addComponent({
                name: 'useAuth',
                type: 'hook',
                description: 'Authentication hook'
            })
                .addComponent({
                name: 'LoginPage',
                type: 'page',
                description: 'Login page'
            });
            const contract = await builder.build();
            (0, globals_1.expect)(contract.uiRequirements.components).toHaveLength(3);
        });
        (0, globals_1.it)('should support component with props', async () => {
            builder.addComponent({
                name: 'LoginForm',
                type: 'component',
                description: 'Login form',
                props: {
                    onSubmit: 'function',
                    loading: 'boolean'
                }
            });
            const contract = await builder.build();
            const component = contract.uiRequirements.components[0];
            (0, globals_1.expect)(component.props).toEqual({
                onSubmit: 'function',
                loading: 'boolean'
            });
        });
        (0, globals_1.it)('should create work item for James when components added', async () => {
            builder.addComponent({
                name: 'LoginForm',
                type: 'component',
                description: 'Login form'
            });
            const contract = await builder.build();
            const jamesWork = contract.workItems.find(w => w.description.includes('UI components'));
            (0, globals_1.expect)(jamesWork).toBeDefined();
            (0, globals_1.expect)(jamesWork?.estimatedEffort).toBe(1.5); // 1.5 hours per component
            (0, globals_1.expect)(jamesWork?.acceptanceCriteria).toContain('All components implemented');
            (0, globals_1.expect)(jamesWork?.acceptanceCriteria).toContain('WCAG 2.1 AA accessibility');
        });
        (0, globals_1.it)('should set accessibility requirement to AA', async () => {
            const contract = await builder.build();
            (0, globals_1.expect)(contract.uiRequirements.accessibility).toBe('AA');
        });
        (0, globals_1.it)('should set responsive breakpoints', async () => {
            const contract = await builder.build();
            (0, globals_1.expect)(contract.uiRequirements.responsive).toEqual([
                'mobile',
                'tablet',
                'desktop'
            ]);
        });
    });
    (0, globals_1.describe)('Memory Snapshot', () => {
        (0, globals_1.it)('should create minimal snapshot by default', async () => {
            const contract = await builder.build();
            (0, globals_1.expect)(contract.memorySnapshot).toBeDefined();
            (0, globals_1.expect)(contract.memorySnapshot.agentId).toBe('alex-ba');
            (0, globals_1.expect)(contract.memorySnapshot.contextSummary).toContain('User Authentication');
        });
        (0, globals_1.it)('should use provided memory snapshot', async () => {
            const customSnapshot = {
                agentId: 'alex-ba',
                timestamp: new Date(),
                memoryFiles: {
                    'requirements/auth.md': 'Authentication requirements'
                },
                criticalPatterns: [
                    {
                        category: 'security',
                        title: 'JWT pattern',
                        content: 'Use httpOnly cookies'
                    }
                ],
                contextSummary: 'Custom summary',
                estimatedTokens: 3000
            };
            builder.setMemorySnapshot(customSnapshot);
            const contract = await builder.build();
            (0, globals_1.expect)(contract.memorySnapshot.estimatedTokens).toBe(3000);
            (0, globals_1.expect)(contract.memorySnapshot.contextSummary).toBe('Custom summary');
            (0, globals_1.expect)(contract.memorySnapshot.memoryFiles['requirements/auth.md']).toBe('Authentication requirements');
        });
    });
    (0, globals_1.describe)('Work Item Dependencies', () => {
        (0, globals_1.it)('should make Marcus depend on Dana when both have work', async () => {
            builder
                .addTable({
                name: 'users',
                columns: [{ name: 'id', type: 'uuid', nullable: false }]
            })
                .addEndpoint({
                method: 'POST',
                path: '/api/auth/login',
                description: 'Login'
            });
            const contract = await builder.build();
            const marcusWork = contract.workItems.find(w => w.description.includes('API endpoints'));
            (0, globals_1.expect)(marcusWork?.dependencies).toBeDefined();
            (0, globals_1.expect)(marcusWork?.dependencies.length).toBeGreaterThan(0);
        });
        (0, globals_1.it)('should make James depend on Marcus when both have work', async () => {
            builder
                .addEndpoint({
                method: 'POST',
                path: '/api/auth/login',
                description: 'Login'
            })
                .addComponent({
                name: 'LoginForm',
                type: 'component',
                description: 'Login form'
            });
            const contract = await builder.build();
            const jamesWork = contract.workItems.find(w => w.description.includes('UI components'));
            (0, globals_1.expect)(jamesWork?.dependencies).toBeDefined();
            (0, globals_1.expect)(jamesWork?.dependencies.length).toBeGreaterThan(0);
        });
    });
    (0, globals_1.describe)('Integration Checkpoints', () => {
        (0, globals_1.it)('should create integration checkpoints', async () => {
            builder
                .addTable({
                name: 'users',
                columns: [{ name: 'id', type: 'uuid', nullable: false }]
            })
                .addEndpoint({
                method: 'POST',
                path: '/api/auth/login',
                description: 'Login'
            })
                .addComponent({
                name: 'LoginForm',
                type: 'component',
                description: 'Login form'
            });
            const contract = await builder.build();
            (0, globals_1.expect)(contract.integrationCheckpoints).toHaveLength(3);
        });
        (0, globals_1.it)('should create Database → API checkpoint', async () => {
            builder
                .addTable({
                name: 'users',
                columns: [{ name: 'id', type: 'uuid', nullable: false }]
            })
                .addEndpoint({
                method: 'POST',
                path: '/api/auth/login',
                description: 'Login'
            });
            const contract = await builder.build();
            const checkpoint = contract.integrationCheckpoints.find(c => c.name === 'Database → API Integration');
            (0, globals_1.expect)(checkpoint).toBeDefined();
            (0, globals_1.expect)(checkpoint?.participants).toContain('dana-database');
            (0, globals_1.expect)(checkpoint?.participants).toContain('marcus-backend');
        });
        (0, globals_1.it)('should create API → Frontend checkpoint', async () => {
            builder
                .addEndpoint({
                method: 'POST',
                path: '/api/auth/login',
                description: 'Login'
            })
                .addComponent({
                name: 'LoginForm',
                type: 'component',
                description: 'Login form'
            });
            const contract = await builder.build();
            const checkpoint = contract.integrationCheckpoints.find(c => c.name === 'API → Frontend Integration');
            (0, globals_1.expect)(checkpoint).toBeDefined();
            (0, globals_1.expect)(checkpoint?.participants).toContain('marcus-backend');
            (0, globals_1.expect)(checkpoint?.participants).toContain('james-frontend');
        });
        (0, globals_1.it)('should create End-to-End checkpoint', async () => {
            const contract = await builder.build();
            const checkpoint = contract.integrationCheckpoints.find(c => c.name === 'End-to-End Validation');
            (0, globals_1.expect)(checkpoint).toBeDefined();
            (0, globals_1.expect)(checkpoint?.participants).toContain('dana-database');
            (0, globals_1.expect)(checkpoint?.participants).toContain('marcus-backend');
            (0, globals_1.expect)(checkpoint?.participants).toContain('james-frontend');
        });
    });
    (0, globals_1.describe)('Contract Building', () => {
        (0, globals_1.it)('should build complete three-tier contract', async () => {
            builder
                .addTable({
                name: 'users',
                columns: [{ name: 'id', type: 'uuid', nullable: false }]
            })
                .addEndpoint({
                method: 'POST',
                path: '/api/auth/login',
                description: 'Login'
            })
                .addComponent({
                name: 'LoginForm',
                type: 'component',
                description: 'Login form'
            });
            const contract = await builder.build();
            (0, globals_1.expect)(contract.type).toBe('parallel');
            (0, globals_1.expect)(contract.receivers).toHaveLength(3);
            (0, globals_1.expect)(contract.workItems.length).toBeGreaterThan(0);
            (0, globals_1.expect)(contract.apiContract).toBeDefined();
            (0, globals_1.expect)(contract.databaseSchema).toBeDefined();
            (0, globals_1.expect)(contract.uiRequirements).toBeDefined();
            (0, globals_1.expect)(contract.integrationCheckpoints).toBeDefined();
        });
        (0, globals_1.it)('should set correct receivers for three-tier', async () => {
            const contract = await builder.build();
            const receiverIds = contract.receivers.map(r => r.agentId);
            (0, globals_1.expect)(receiverIds).toContain('dana-database');
            (0, globals_1.expect)(receiverIds).toContain('marcus-backend');
            (0, globals_1.expect)(receiverIds).toContain('james-frontend');
        });
        (0, globals_1.it)('should set receiver roles', async () => {
            const contract = await builder.build();
            const danaReceiver = contract.receivers.find(r => r.agentId === 'dana-database');
            const marcusReceiver = contract.receivers.find(r => r.agentId === 'marcus-backend');
            const jamesReceiver = contract.receivers.find(r => r.agentId === 'james-frontend');
            (0, globals_1.expect)(danaReceiver?.role).toBe('database');
            (0, globals_1.expect)(marcusReceiver?.role).toBe('api');
            (0, globals_1.expect)(jamesReceiver?.role).toBe('frontend');
        });
        (0, globals_1.it)('should set contract expiration to 24 hours', async () => {
            const contract = await builder.build();
            (0, globals_1.expect)(contract.expiresAt).toBeDefined();
            const now = new Date();
            const expiresAt = new Date(contract.expiresAt);
            const diffHours = (expiresAt.getTime() - now.getTime()) / (1000 * 60 * 60);
            (0, globals_1.expect)(diffHours).toBeCloseTo(24, 0);
        });
        (0, globals_1.it)('should include feature context', async () => {
            const contract = await builder.build();
            (0, globals_1.expect)(contract.context.feature?.name).toBe('User Authentication');
            (0, globals_1.expect)(contract.context.feature?.description).toBe('Implement secure user login and session management');
            (0, globals_1.expect)(contract.context.feature?.userStories).toHaveLength(2);
        });
        (0, globals_1.it)('should include business context', async () => {
            const contract = await builder.build();
            (0, globals_1.expect)(contract.context.business?.goals).toEqual(['Secure authentication', 'Good UX']);
            (0, globals_1.expect)(contract.context.business?.constraints).toEqual([
                'Must use JWT',
                'Must be WCAG 2.1 AA compliant'
            ]);
        });
        (0, globals_1.it)('should include technical context', async () => {
            builder.addEndpoint({
                method: 'POST',
                path: '/api/auth/login',
                description: 'Login'
            });
            const contract = await builder.build();
            (0, globals_1.expect)(contract.context.technical?.apiContract).toBeDefined();
            (0, globals_1.expect)(contract.context.technical?.databaseSchema).toBeDefined();
        });
    });
    (0, globals_1.describe)('Build and Validate', () => {
        (0, globals_1.it)('should build and validate contract', async () => {
            builder
                .addTable({
                name: 'users',
                columns: [{ name: 'id', type: 'uuid', nullable: false }]
            })
                .addEndpoint({
                method: 'POST',
                path: '/api/auth/login',
                description: 'Login'
            })
                .addComponent({
                name: 'LoginForm',
                type: 'component',
                description: 'Login form'
            });
            const result = await builder.buildAndValidate();
            (0, globals_1.expect)(result.contract).toBeDefined();
            (0, globals_1.expect)(result.validation).toBeDefined();
            (0, globals_1.expect)(result.validation.valid).toBe(true);
        });
        (0, globals_1.it)('should throw error if validation fails', async () => {
            // Don't add any components (will fail three-tier validation)
            await (0, globals_1.expect)(builder.buildAndValidate()).rejects.toThrow('Contract validation failed');
        });
    });
    (0, globals_1.describe)('Quick Helper Function', () => {
        (0, globals_1.it)('should create three-tier handoff using helper', async () => {
            const contract = await (0, three_tier_handoff_js_1.createThreeTierHandoff)(requirements, {
                endpoints: [
                    {
                        method: 'POST',
                        path: '/api/auth/login',
                        description: 'Login'
                    }
                ],
                tables: [
                    {
                        name: 'users',
                        columns: [{ name: 'id', type: 'uuid', nullable: false }]
                    }
                ],
                components: [
                    {
                        name: 'LoginForm',
                        type: 'component',
                        description: 'Login form'
                    }
                ]
            });
            (0, globals_1.expect)(contract).toBeDefined();
            (0, globals_1.expect)(contract.type).toBe('parallel');
            (0, globals_1.expect)(contract.apiContract.endpoints).toHaveLength(1);
            (0, globals_1.expect)(contract.databaseSchema.tables).toHaveLength(1);
            (0, globals_1.expect)(contract.uiRequirements.components).toHaveLength(1);
        });
        (0, globals_1.it)('should use provided memory snapshot in helper', async () => {
            const customSnapshot = {
                agentId: 'alex-ba',
                timestamp: new Date(),
                memoryFiles: {},
                criticalPatterns: [],
                contextSummary: 'Custom',
                estimatedTokens: 2000
            };
            const contract = await (0, three_tier_handoff_js_1.createThreeTierHandoff)(requirements, {
                endpoints: [
                    {
                        method: 'POST',
                        path: '/api/auth/login',
                        description: 'Login'
                    }
                ],
                tables: [
                    {
                        name: 'users',
                        columns: [{ name: 'id', type: 'uuid', nullable: false }]
                    }
                ],
                components: [
                    {
                        name: 'LoginForm',
                        type: 'component',
                        description: 'Login form'
                    }
                ],
                memorySnapshot: customSnapshot
            });
            (0, globals_1.expect)(contract.memorySnapshot.estimatedTokens).toBe(2000);
        });
        (0, globals_1.it)('should throw on validation failure in helper', async () => {
            await (0, globals_1.expect)((0, three_tier_handoff_js_1.createThreeTierHandoff)(requirements, {
                endpoints: [],
                tables: [],
                components: []
            })).rejects.toThrow('Contract validation failed');
        });
    });
    (0, globals_1.describe)('Effort Estimation', () => {
        (0, globals_1.it)('should calculate total expected duration', async () => {
            builder
                .addTable({
                name: 'users',
                columns: [{ name: 'id', type: 'uuid', nullable: false }]
            })
                .addEndpoint({
                method: 'POST',
                path: '/api/auth/login',
                description: 'Login'
            })
                .addComponent({
                name: 'LoginForm',
                type: 'component',
                description: 'Login form'
            });
            const contract = await builder.build();
            const totalEffort = contract.workItems.reduce((sum, item) => sum + (item.estimatedEffort || 0), 0);
            (0, globals_1.expect)(contract.expectedOutput.expectedDuration).toBe(totalEffort);
            (0, globals_1.expect)(totalEffort).toBe(5); // 1.5 (Dana) + 2 (Marcus) + 1.5 (James)
        });
        (0, globals_1.it)('should scale effort with number of endpoints', async () => {
            builder
                .addEndpoint({
                method: 'POST',
                path: '/api/auth/login',
                description: 'Login'
            })
                .addEndpoint({
                method: 'POST',
                path: '/api/auth/logout',
                description: 'Logout'
            });
            const contract = await builder.build();
            const marcusWork = contract.workItems.find(w => w.description.includes('API endpoints'));
            (0, globals_1.expect)(marcusWork?.estimatedEffort).toBe(4); // 2 endpoints * 2 hours
        });
        (0, globals_1.it)('should scale effort with number of tables', async () => {
            builder
                .addTable({
                name: 'users',
                columns: [{ name: 'id', type: 'uuid', nullable: false }]
            })
                .addTable({
                name: 'sessions',
                columns: [{ name: 'id', type: 'uuid', nullable: false }]
            });
            const contract = await builder.build();
            const danaWork = contract.workItems.find(w => w.description.includes('database schema'));
            (0, globals_1.expect)(danaWork?.estimatedEffort).toBe(3); // 2 tables * 1.5 hours
        });
        (0, globals_1.it)('should scale effort with number of components', async () => {
            builder
                .addComponent({
                name: 'LoginForm',
                type: 'component',
                description: 'Login form'
            })
                .addComponent({
                name: 'useAuth',
                type: 'hook',
                description: 'Auth hook'
            });
            const contract = await builder.build();
            const jamesWork = contract.workItems.find(w => w.description.includes('UI components'));
            (0, globals_1.expect)(jamesWork?.estimatedEffort).toBe(3); // 2 components * 1.5 hours
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,