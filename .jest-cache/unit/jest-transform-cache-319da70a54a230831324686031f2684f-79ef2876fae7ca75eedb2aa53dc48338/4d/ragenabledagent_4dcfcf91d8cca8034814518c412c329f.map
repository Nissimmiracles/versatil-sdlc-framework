{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/src/agents/rag-enabled-agent.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/src/agents/rag-enabled-agent.ts"],"sourcesContent":["/**\n * VERSATIL SDLC Framework - RAG-Enabled Agent Base Class\n *\n * Extends BaseAgent with direct RAG capabilities, allowing each agent to:\n * - Retrieve domain-specific context from vector memory\n * - Store successful patterns for future learning\n * - Generate context-aware prompts with historical knowledge\n */\n\nimport { BaseAgent, AgentResponse, AgentActivationContext } from './base-agent.js';\nimport { EnhancedVectorMemoryStore, MemoryDocument, RAGQuery } from '../rag/enhanced-vector-memory-store.js';\nimport { AnalysisResult } from '../intelligence/pattern-analyzer.js';\n\nexport interface RAGConfig {\n  maxExamples: number;\n  similarityThreshold: number;\n  agentDomain: string;\n  enableLearning: boolean;\n}\n\nexport interface AgentRAGContext {\n  similarCode: MemoryDocument[];\n  previousSolutions: { [issueType: string]: MemoryDocument[] };\n  projectStandards: MemoryDocument[];\n  agentExpertise: MemoryDocument[];\n  metadata?: {\n    [key: string]: any;\n  };\n}\n\n/**\n * RAG cache entry with TTL\n */\ninterface RAGCacheEntry {\n  context: AgentRAGContext;\n  timestamp: number;\n  query: string;\n}\n\nexport abstract class RAGEnabledAgent extends BaseAgent {\n  protected vectorStore?: EnhancedVectorMemoryStore;\n  protected ragConfig: RAGConfig;\n  private ragCache: Map<string, RAGCacheEntry>;\n  private readonly RAG_CACHE_TTL = 5 * 60 * 1000; // 5 minutes\n  private cacheCleanupInterval: NodeJS.Timeout | null = null;\n\n  constructor(vectorStore?: EnhancedVectorMemoryStore) {\n    super();\n    this.vectorStore = vectorStore;\n    this.ragConfig = this.getDefaultRAGConfig();\n    this.ragCache = new Map();\n\n    // Cleanup expired cache entries every minute (store reference for cleanup)\n    this.cacheCleanupInterval = setInterval(() => this.cleanupExpiredCache(), 60 * 1000);\n  }\n\n  /**\n   * Override this in each agent to define domain-specific RAG configuration\n   */\n  protected abstract getDefaultRAGConfig(): RAGConfig;\n\n  /**\n   * Main analysis method with RAG enhancement\n   */\n  async activate(context: AgentActivationContext): Promise<AgentResponse> {\n    // Level 1: Standard pattern analysis\n    const patternAnalysis = await this.runPatternAnalysis(context);\n\n    // Level 2: RAG enhancement (if vector store available)\n    let ragContext: AgentRAGContext | undefined;\n    if (this.vectorStore) {\n      ragContext = await this.retrieveRelevantContext(context, patternAnalysis);\n    }\n\n    // Level 3: Generate enhanced response\n    const enhancedResponse = await this.generateRAGEnhancedResponse(\n      context,\n      patternAnalysis,\n      ragContext\n    );\n\n    // Level 4: Store successful patterns for learning\n    if (this.vectorStore && this.ragConfig.enableLearning) {\n      await this.storeNewPatterns(context, patternAnalysis, enhancedResponse);\n    }\n\n    return enhancedResponse;\n  }\n\n  /**\n   * Run domain-specific pattern analysis - to be implemented by each agent\n   */\n  protected abstract runPatternAnalysis(context: AgentActivationContext): Promise<AnalysisResult>;\n\n  /**\n   * Retrieve relevant context from vector memory (with caching)\n   */\n  protected async retrieveRelevantContext(\n    context: AgentActivationContext,\n    analysis: AnalysisResult\n  ): Promise<AgentRAGContext> {\n    if (!this.vectorStore) {\n      return this.getEmptyRAGContext();\n    }\n\n    // Generate cache key from file path and content hash\n    const cacheKey = this.generateCacheKey(context);\n\n    // Check cache first (5-minute TTL)\n    const cached = this.ragCache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < this.RAG_CACHE_TTL) {\n      console.log(`[${this.id}] RAG cache hit for ${context.filePath}`);\n      return cached.context;\n    }\n\n    const retrievals: AgentRAGContext = {\n      similarCode: [],\n      previousSolutions: {},\n      projectStandards: [],\n      agentExpertise: []\n    };\n\n    try {\n      // 1. Find similar code patterns for this agent's domain\n      retrievals.similarCode = await this.retrieveSimilarCodePatterns(context);\n\n      // 2. Find previous solutions for similar issues\n      retrievals.previousSolutions = await this.retrievePreviousSolutions(analysis);\n\n      // 3. Get project-specific standards for this domain\n      retrievals.projectStandards = await this.retrieveProjectStandards(context);\n\n      // 4. Get agent-specific expertise\n      retrievals.agentExpertise = await this.retrieveAgentExpertise(context);\n\n      // Store in cache\n      this.ragCache.set(cacheKey, {\n        context: retrievals,\n        timestamp: Date.now(),\n        query: context.filePath || 'unknown'\n      });\n\n      console.log(`[${this.id}] RAG cache stored for ${context.filePath}`);\n\n    } catch (error: any) {\n      console.warn(`RAG retrieval failed for ${this.id}:`, error.message);\n    }\n\n    return retrievals;\n  }\n\n  /**\n   * Generate cache key from context\n   */\n  private generateCacheKey(context: AgentActivationContext): string {\n    const filePath = context.filePath || 'unknown';\n    const contentHash = this.hashContent(context.content || '');\n    return `${this.id}:${filePath}:${contentHash}`;\n  }\n\n  /**\n   * Simple content hash for cache key\n   */\n  private hashContent(content: string): string {\n    let hash = 0;\n    for (let i = 0; i < Math.min(content.length, 1000); i++) {\n      const char = content.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash.toString(36);\n  }\n\n  /**\n   * Cleanup expired cache entries\n   */\n  private cleanupExpiredCache(): void {\n    const now = Date.now();\n    let expiredCount = 0;\n\n    for (const [key, entry] of this.ragCache.entries()) {\n      if (now - entry.timestamp >= this.RAG_CACHE_TTL) {\n        this.ragCache.delete(key);\n        expiredCount++;\n      }\n    }\n\n    if (expiredCount > 0) {\n      console.log(`[${this.id}] Cleaned up ${expiredCount} expired RAG cache entries`);\n    }\n  }\n\n  /**\n   * Clear all cache (useful for testing)\n   */\n  protected clearRAGCache(): void {\n    this.ragCache.clear();\n    console.log(`[${this.id}] RAG cache cleared`);\n  }\n\n  /**\n   * Get cache statistics\n   */\n  protected getRAGCacheStats(): {\n    size: number;\n    oldest: number | null;\n    newest: number | null;\n  } {\n    const entries = Array.from(this.ragCache.values());\n    return {\n      size: entries.length,\n      oldest: entries.length > 0 ? Math.min(...entries.map(e => e.timestamp)) : null,\n      newest: entries.length > 0 ? Math.max(...entries.map(e => e.timestamp)) : null\n    };\n  }\n\n  /**\n   * Destroy agent and cleanup resources (prevent memory leaks)\n   */\n  public destroy(): void {\n    // Clear cache cleanup interval\n    if (this.cacheCleanupInterval) {\n      clearInterval(this.cacheCleanupInterval);\n      this.cacheCleanupInterval = null;\n    }\n\n    // Clear cache\n    this.ragCache.clear();\n\n    console.log(`[${this.id}] Agent destroyed and resources cleaned up`);\n  }\n\n  /**\n   * Retrieve similar code patterns based on content and domain\n   */\n  protected async retrieveSimilarCodePatterns(context: AgentActivationContext): Promise<MemoryDocument[]> {\n    if (!this.vectorStore) return [];\n\n    const query: RAGQuery = {\n      query: this.createSemanticQuery(context.content, context.filePath),\n      queryType: 'semantic',\n      agentId: this.id,\n      topK: this.ragConfig.maxExamples,\n      filters: {\n        tags: [this.ragConfig.agentDomain, 'pattern', this.detectLanguage(context.filePath)],\n        contentTypes: ['code']\n      }\n    };\n\n    const result = await this.vectorStore.queryMemories(query);\n    return result.documents || [];\n  }\n\n  /**\n   * Retrieve previous solutions for similar issues\n   */\n  protected async retrievePreviousSolutions(analysis: AnalysisResult): Promise<{ [issueType: string]: MemoryDocument[] }> {\n    if (!this.vectorStore) return {};\n\n    const solutions: { [issueType: string]: MemoryDocument[] } = {};\n\n    for (const issue of analysis.patterns) {\n      const query: RAGQuery = {\n        query: `${issue.type} ${issue.message}`,\n        queryType: 'semantic',\n        agentId: this.id,\n        topK: 2,\n        filters: {\n          tags: [issue.type, 'solution', this.ragConfig.agentDomain],\n          contentTypes: ['text', 'code']\n        }\n      };\n\n      try {\n        const result = await this.vectorStore.queryMemories(query);\n        solutions[issue.type] = result.documents || [];\n      } catch (error) {\n        console.warn(`Failed to retrieve solutions for ${issue.type}:`, error.message);\n        solutions[issue.type] = [];\n      }\n    }\n\n    return solutions;\n  }\n\n  /**\n   * Retrieve project standards specific to this agent's domain\n   */\n  protected async retrieveProjectStandards(context: AgentActivationContext): Promise<MemoryDocument[]> {\n    if (!this.vectorStore) return [];\n\n    const query: RAGQuery = {\n      query: `${context.filePath} ${this.ragConfig.agentDomain} standards conventions`,\n      queryType: 'semantic',\n      agentId: this.id,\n      topK: 3,\n      filters: {\n        tags: [this.ragConfig.agentDomain, 'standard', 'convention'],\n        contentTypes: ['text']\n      }\n    };\n\n    const result = await this.vectorStore.queryMemories(query);\n    return result.documents || [];\n  }\n\n  /**\n   * Retrieve agent-specific expertise and insights\n   */\n  protected async retrieveAgentExpertise(context: AgentActivationContext): Promise<MemoryDocument[]> {\n    if (!this.vectorStore) return [];\n\n    const query: RAGQuery = {\n      query: this.createSemanticQuery(context.content, context.filePath),\n      queryType: 'semantic',\n      agentId: this.id,\n      topK: 3,\n      filters: {\n        tags: [this.id, 'expertise', this.ragConfig.agentDomain],\n        contentTypes: ['text', 'code']\n      }\n    };\n\n    const result = await this.vectorStore.queryMemories(query);\n    return result.documents || [];\n  }\n\n  /**\n   * Generate enhanced response with RAG context\n   */\n  protected async generateRAGEnhancedResponse(\n    context: AgentActivationContext,\n    analysis: AnalysisResult,\n    ragContext?: AgentRAGContext\n  ): Promise<AgentResponse> {\n    // Convert analysis to suggestions\n    const suggestions = analysis.patterns.map(p => ({\n      type: p.type,\n      description: p.message,\n      location: `${context.filePath}:${p.line}`,\n      priority: p.severity,\n      action: p.suggestion\n    }));\n\n    // Enhance suggestions with RAG context\n    if (ragContext) {\n      this.enhanceSuggestionsWithRAG(suggestions, ragContext);\n    }\n\n    // Generate domain-specific handoffs\n    const handoffTo = this.generateDomainHandoffs(analysis);\n\n    // Create enhanced message with RAG insights\n    const message = this.generateEnhancedMessage(analysis, ragContext);\n\n    return {\n      agentId: this.id,\n      message,\n      suggestions,\n      priority: this.calculatePriorityWithRAG(analysis, ragContext),\n      handoffTo,\n      context: {\n        analysisScore: analysis.score,\n        totalIssues: analysis.patterns.length,\n        criticalIssues: analysis.patterns.filter(p => p.severity === 'critical').length,\n        ragEnhanced: !!ragContext,\n        ragInsights: ragContext ? this.summarizeRAGInsights(ragContext) : undefined,\n        generatedPrompt: this.generateRAGEnhancedPrompt(context, analysis, ragContext),\n        recommendations: analysis.recommendations,\n        summary: analysis.summary\n      }\n    };\n  }\n\n  /**\n   * Generate RAG-enhanced prompt with retrieved context\n   */\n  protected generateRAGEnhancedPrompt(\n    context: AgentActivationContext,\n    analysis: AnalysisResult,\n    ragContext?: AgentRAGContext\n  ): string {\n    let prompt = this.getBasePromptTemplate();\n\n    if (ragContext) {\n      prompt += '\\n## Retrieved Context\\n\\n';\n\n      // Similar Code Patterns\n      if (ragContext.similarCode.length > 0) {\n        prompt += '### Similar Code Patterns From This Project:\\n';\n        ragContext.similarCode.forEach((pattern, index) => {\n          const tags = pattern.metadata?.tags?.join(', ') || 'N/A';\n          const score = Math.round((pattern.metadata?.relevanceScore || 0) * 100);\n          prompt += `Example ${index + 1} (${score}% relevance, tags: ${tags}):\\n`;\n          prompt += '```\\n' + pattern.content.slice(0, 200) + '...\\n```\\n\\n';\n        });\n      }\n\n      // Previous Solutions\n      const solutionEntries = Object.entries(ragContext.previousSolutions).filter(([_, solutions]) => solutions.length > 0);\n      if (solutionEntries.length > 0) {\n        prompt += '### Previous Solutions for Similar Issues:\\n';\n        solutionEntries.forEach(([issueType, solutions]) => {\n          prompt += `For ${issueType}:\\n`;\n          solutions.forEach(solution => {\n            prompt += `- ${solution.content.slice(0, 150)}...\\n`;\n          });\n          prompt += '\\n';\n        });\n      }\n\n      // Project Standards\n      if (ragContext.projectStandards.length > 0) {\n        prompt += '### Project Standards:\\n';\n        ragContext.projectStandards.forEach(standard => {\n          prompt += `- ${standard.content.slice(0, 100)}...\\n`;\n        });\n        prompt += '\\n';\n      }\n    }\n\n    // Current context\n    prompt += '## Current Context\\n';\n    prompt += `File: ${context.filePath}\\n`;\n    prompt += `Issues Found: ${JSON.stringify(analysis.patterns.map(p => ({ type: p.type, severity: p.severity, message: p.message })), null, 2)}\\n\\n`;\n\n    // Code to analyze\n    prompt += `## Code to Analyze\\n`;\n    prompt += '```' + this.detectLanguage(context.filePath) + '\\n';\n    prompt += context.content + '\\n';\n    prompt += '```\\n\\n';\n\n    prompt += 'Using the retrieved context above as reference, provide your analysis and recommendations.\\n';\n\n    return prompt;\n  }\n\n  /**\n   * Store successful patterns for future learning\n   */\n  protected async storeNewPatterns(\n    context: AgentActivationContext,\n    analysis: AnalysisResult,\n    response: AgentResponse\n  ): Promise<void> {\n    if (!this.vectorStore) return;\n\n    try {\n      const language = this.detectLanguage(context.filePath);\n\n      // Store high-quality code patterns (score >= 80)\n      if (analysis.score >= 80) {\n        const patternDoc: MemoryDocument = {\n          id: `pattern_${this.id}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n          content: context.content,\n          contentType: 'code',\n          metadata: {\n            agentId: this.id,\n            timestamp: Date.now(),\n            fileType: context.filePath.split('.').pop() || '',\n            projectContext: 'VERSATIL Framework',\n            tags: [language, this.ragConfig.agentDomain, 'pattern', 'high-quality'],\n            relevanceScore: analysis.score / 100,\n            language,\n            framework: this.detectFramework(context.content)\n          }\n        };\n\n        await this.vectorStore.storeMemory(patternDoc);\n      }\n\n      // Store successful solutions for detected issues\n      for (const suggestion of response.suggestions) {\n        if (suggestion.priority !== 'low') {\n          const solutionDoc: MemoryDocument = {\n            id: `solution_${this.id}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n            content: suggestion.action,\n            contentType: 'text',\n            metadata: {\n              agentId: this.id,\n              timestamp: Date.now(),\n              projectContext: 'VERSATIL Framework',\n              tags: [language, this.ragConfig.agentDomain, suggestion.type, 'solution'],\n              relevanceScore: suggestion.priority === 'critical' ? 1.0 : suggestion.priority === 'high' ? 0.8 : 0.6,\n              language\n            }\n          };\n\n          await this.vectorStore.storeMemory(solutionDoc);\n        }\n      }\n    } catch (error) {\n      console.warn(`Failed to store patterns for ${this.id}:`, error.message);\n    }\n  }\n\n  // Helper methods\n\n  protected getEmptyRAGContext(): AgentRAGContext {\n    return {\n      similarCode: [],\n      previousSolutions: {},\n      projectStandards: [],\n      agentExpertise: []\n    };\n  }\n\n  protected createSemanticQuery(content: string, filePath: string): string {\n    // Extract key concepts and create semantic query\n    const lines = content.split('\\n');\n    const keywords: string[] = [];\n\n    // Extract function/class names\n    const functionMatches = content.match(/(?:function|class|const|let|var)\\s+(\\w+)/g);\n    if (functionMatches) {\n      keywords.push(...functionMatches.map(match => match.split(/\\s+/)[1]));\n    }\n\n    // Add file path context\n    const pathParts = filePath.split('/').filter(part => part && !part.includes('.'));\n    keywords.push(...pathParts);\n\n    // Create concise semantic query\n    const uniqueKeywords = [...new Set(keywords)].filter(k => k && k.length > 2).slice(0, 8);\n    return uniqueKeywords.join(' ') || content.slice(0, 150);\n  }\n\n  protected detectLanguage(filePath: string): string {\n    const ext = filePath.split('.').pop()?.toLowerCase() || '';\n    const langMap: Record<string, string> = {\n      'js': 'javascript', 'jsx': 'javascriptreact',\n      'ts': 'typescript', 'tsx': 'typescriptreact',\n      'py': 'python', 'vue': 'vue', 'svelte': 'svelte'\n    };\n    return langMap[ext] || 'plaintext';\n  }\n\n  protected detectFramework(content: string): string {\n    if (content.includes('react') || content.includes('useState')) return 'react';\n    if (content.includes('vue') || content.includes('Vue')) return 'vue';\n    if (content.includes('angular')) return 'angular';\n    if (content.includes('express') || content.includes('app.get')) return 'express';\n    return '';\n  }\n\n  protected enhanceSuggestionsWithRAG(suggestions: any[], ragContext: AgentRAGContext): void {\n    // Add RAG-derived suggestions\n    if (ragContext.similarCode.length > 0) {\n      suggestions.push({\n        type: 'rag-pattern',\n        description: `Found ${ragContext.similarCode.length} similar patterns in project history`,\n        location: 'RAG Context',\n        priority: 'info',\n        action: 'Review similar implementations for consistency and best practices'\n      });\n    }\n  }\n\n  protected generateEnhancedMessage(analysis: AnalysisResult, ragContext?: AgentRAGContext): string {\n    let message = `${this.ragConfig.agentDomain} Analysis Complete: Score ${analysis.score}/100. ${analysis.patterns.length} issues found.`;\n\n    if (ragContext) {\n      const ragInsights = [];\n      if (ragContext.similarCode.length > 0) ragInsights.push(`${ragContext.similarCode.length} similar patterns`);\n      if (Object.keys(ragContext.previousSolutions).length > 0) ragInsights.push(`solutions for ${Object.keys(ragContext.previousSolutions).length} issue types`);\n      if (ragContext.projectStandards.length > 0) ragInsights.push(`${ragContext.projectStandards.length} project standards`);\n\n      if (ragInsights.length > 0) {\n        message += ` RAG-Enhanced: ${ragInsights.join(', ')}.`;\n      }\n    }\n\n    return message;\n  }\n\n  protected summarizeRAGInsights(ragContext: AgentRAGContext): any {\n    return {\n      similarPatterns: ragContext.similarCode.length,\n      solutionTypes: Object.keys(ragContext.previousSolutions).length,\n      projectStandards: ragContext.projectStandards.length,\n      expertise: ragContext.agentExpertise.length\n    };\n  }\n\n  protected calculatePriorityWithRAG(analysis: AnalysisResult, ragContext?: AgentRAGContext): string {\n    // Check for critical severity issues first\n    const hasCritical = analysis.patterns.some(p => p.severity === 'critical');\n    if (hasCritical) return 'critical';\n\n    const hasHigh = analysis.patterns.some(p => p.severity === 'high');\n    if (hasHigh) return 'high';\n\n    // Fall back to score-based priority\n    let basePriority = analysis.score < 60 ? 'high' : analysis.score < 80 ? 'medium' : 'low';\n\n    // Boost priority if RAG context shows this is a recurring issue\n    if (ragContext && Object.keys(ragContext.previousSolutions).length > 2) {\n      if (basePriority === 'low') basePriority = 'medium';\n      if (basePriority === 'medium') basePriority = 'high';\n    }\n\n    return basePriority;\n  }\n\n  // Abstract methods to be implemented by specific agents\n  protected abstract getBasePromptTemplate(): string;\n  protected abstract generateDomainHandoffs(analysis: AnalysisResult): string[];\n}"],"version":3}