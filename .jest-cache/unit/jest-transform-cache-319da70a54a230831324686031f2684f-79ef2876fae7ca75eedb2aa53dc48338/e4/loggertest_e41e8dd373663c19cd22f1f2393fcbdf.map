{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/tests/unit/utils/logger.test.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/tests/unit/utils/logger.test.ts"],"sourcesContent":["/**\n * VERSATIL SDLC Framework - Logger Unit Tests\n * Enhanced Maria-QA Quality Assurance Testing\n *\n * Testing framework's own logging system\n */\n\nimport { VERSATILLogger } from '../../../src/utils/logger';\n\ndescribe('VERSATILLogger', () => {\n  let logger: VERSATILLogger;\n  let consoleSpy: jest.SpyInstance;\n\n  beforeEach(() => {\n    logger = new VERSATILLogger();\n    consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n  });\n\n  afterEach(() => {\n    consoleSpy.mockRestore();\n  });\n\n  describe('Logging Methods', () => {\n    it('should log debug messages correctly', () => {\n      logger.debug('Test debug message', { key: 'value' }, 'test-component');\n\n      expect(consoleSpy).toHaveBeenCalled();\n      const logCall = consoleSpy.mock.calls[0][0];\n      expect(logCall).toContain('DEBUG');\n      expect(logCall).toContain('Test debug message');\n    });\n\n    it('should log info messages correctly', () => {\n      logger.info('Test info message', { key: 'value' }, 'test-component');\n\n      expect(consoleSpy).toHaveBeenCalled();\n      const logCall = consoleSpy.mock.calls[0][0];\n      expect(logCall).toContain('INFO');\n      expect(logCall).toContain('Test info message');\n    });\n\n    it('should log warning messages correctly', () => {\n      logger.warn('Test warning message', { key: 'value' }, 'test-component');\n\n      expect(consoleSpy).toHaveBeenCalled();\n      const logCall = consoleSpy.mock.calls[0][0];\n      expect(logCall).toContain('WARN');\n      expect(logCall).toContain('Test warning message');\n    });\n\n    it('should log error messages correctly', () => {\n      logger.error('Test error message', { key: 'value' }, 'test-component');\n\n      expect(consoleSpy).toHaveBeenCalled();\n      const logCall = consoleSpy.mock.calls[0][0];\n      expect(logCall).toContain('ERROR');\n      expect(logCall).toContain('Test error message');\n    });\n  });\n\n  describe('Framework Self-Logging Validation', () => {\n    it('should support enhanced BMAD logging patterns', () => {\n      const metadata = {\n        agentId: 'maria-qa',\n        activationTime: Date.now(),\n        context: 'self-testing'\n      };\n\n      logger.info('Framework self-testing initiated', metadata, 'versatil-framework');\n\n      expect(consoleSpy).toHaveBeenCalled();\n      const logCall = consoleSpy.mock.calls[0][0];\n      expect(logCall).toContain('maria-qa');\n      expect(logCall).toContain('self-testing');\n    });\n\n    it('should handle structured logging for agent orchestration', () => {\n      const agentContext = {\n        agent: 'Enhanced Maria-QA',\n        action: 'quality-validation',\n        filePath: '/test/path',\n        timestamp: new Date().toISOString()\n      };\n\n      logger.debug('Agent activation logged', agentContext, 'agent-orchestration');\n\n      expect(consoleSpy).toHaveBeenCalled();\n      expect(consoleSpy.mock.calls[0][0]).toContain('Enhanced Maria-QA');\n    });\n  });\n\n  describe('Performance Requirements', () => {\n    it('should log messages within performance thresholds', () => {\n      const startTime = Date.now();\n\n      for (let i = 0; i < 100; i++) {\n        logger.info(`Performance test message ${i}`, { iteration: i }, 'performance-test');\n      }\n\n      const executionTime = Date.now() - startTime;\n\n      // BMAD requirement: 100 log messages should complete in under 100ms\n      expect(executionTime).toBeLessThan(100);\n      expect(consoleSpy).toHaveBeenCalledTimes(100);\n    });\n  });\n});"],"version":3}