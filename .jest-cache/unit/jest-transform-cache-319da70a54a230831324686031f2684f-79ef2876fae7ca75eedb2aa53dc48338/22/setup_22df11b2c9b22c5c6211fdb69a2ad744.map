{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/tests/setup.ts","mappings":";;AAAA,2CAAqC;AAqCrC,8BAA8B;AAC9B,cAAI,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC;IAC9B,QAAQ,EAAE,cAAI,CAAC,EAAE,EAAE;IACnB,SAAS,EAAE,cAAI,CAAC,EAAE,EAAE;IACpB,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;IACjB,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;IAChB,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;CAChB,CAAC,CAAC,CAAC;AAEJ,6BAA6B;AAC7B,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC;IAC3B,KAAK,EAAE,cAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;QACpB,EAAE,EAAE,cAAI,CAAC,EAAE,EAAE;QACb,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;KACjB,CAAC,CAAC;CACJ,CAAC,CAAC,CAAC;AAlDJ,oBAAoB;AACpB,SAAS,CAAC,GAAG,EAAE;IACb,iCAAiC;IACjC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC;IACjC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,SAAS,CAAC;IAExC,+CAA+C;IAC/C,MAAM,CAAC,OAAO,GAAG;QACf,GAAG,OAAO;QACV,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE;QACd,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;QAChB,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;QACf,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;QACf,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;KACjB,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,4BAA4B;AAC5B,UAAU,CAAC,GAAG,EAAE;IACd,cAAI,CAAC,aAAa,EAAE,CAAC;AACvB,CAAC,CAAC,CAAC;AAEH,sCAAsC;AACtC,cAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAEvB,mDAAmD;AACnD,IAAI,CAAC;IACH,cAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,GAAG,EAAE,CAAC,CAAC;QACxC,UAAU,EAAE,cAAI,CAAC,EAAE,EAAE;QACrB,UAAU,EAAE,cAAI,CAAC,EAAE,EAAE;KACtB,CAAC,CAAC,CAAC;AACN,CAAC;AAAC,OAAO,KAAK,EAAE,CAAC;IACf,4CAA4C;AAC9C,CAAC","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/tests/setup.ts"],"sourcesContent":["import { jest } from '@jest/globals';\n\n// Global test setup\nbeforeAll(() => {\n  // Set test environment variables\n  process.env['NODE_ENV'] = 'test';\n  process.env['VERSATIL_ENV'] = 'testing';\n\n  // Mock console methods for cleaner test output\n  global.console = {\n    ...console,\n    log: jest.fn(),\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  };\n});\n\n// Reset mocks between tests\nbeforeEach(() => {\n  jest.clearAllMocks();\n});\n\n// Global timeout for async operations\njest.setTimeout(30000);\n\n// Mock MCP tools for testing (optional dependency)\ntry {\n  jest.mock('@anthropic-ai/mcp-sdk', () => ({\n    createTool: jest.fn(),\n    invokeTool: jest.fn(),\n  }));\n} catch (error) {\n  // MCP SDK not available in test environment\n}\n\n// Mock file system operations\njest.mock('fs/promises', () => ({\n  readFile: jest.fn(),\n  writeFile: jest.fn(),\n  access: jest.fn(),\n  mkdir: jest.fn(),\n  stat: jest.fn(),\n}));\n\n// Mock chokidar file watcher\njest.mock('chokidar', () => ({\n  watch: jest.fn(() => ({\n    on: jest.fn(),\n    close: jest.fn(),\n  })),\n}));\n\nexport {};"],"version":3}