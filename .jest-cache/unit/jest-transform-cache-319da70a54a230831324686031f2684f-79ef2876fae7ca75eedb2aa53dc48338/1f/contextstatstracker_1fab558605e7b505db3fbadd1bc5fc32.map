{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/src/memory/context-stats-tracker.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/src/memory/context-stats-tracker.ts"],"sourcesContent":["/**\n * Context Statistics Tracker\n *\n * Tracks token usage, context clearing events, and memory operations\n * to provide insights into context management effectiveness.\n *\n * Part of Phase 2: Context Editing Enhancement\n */\n\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as os from 'os';\n\nexport interface ContextClearEvent {\n  timestamp: Date;\n  inputTokens: number;\n  toolUsesCleared: number;\n  tokensSaved: number;\n  triggerType: 'input_tokens' | 'manual';\n  triggerValue: number;\n  agentId?: string;\n}\n\nexport interface MemoryOperation {\n  timestamp: Date;\n  operation: 'view' | 'create' | 'str_replace' | 'insert' | 'delete' | 'rename';\n  path: string;\n  success: boolean;\n  agentId?: string;\n  tokensUsed?: number;\n}\n\nexport interface ContextStatistics {\n  totalTokensProcessed: number;\n  totalClearEvents: number;\n  totalTokensSaved: number;\n  totalMemoryOperations: number;\n  avgTokensPerClear: number;\n  memoryOperationsByType: Record<string, number>;\n  clearEventsByAgent: Record<string, number>;\n  lastClearEvent?: ContextClearEvent;\n  uptime: number; // seconds since first stat\n}\n\nexport interface SessionMetrics {\n  sessionId: string;\n  startTime: Date;\n  endTime?: Date;\n  totalInputTokens: number;\n  totalOutputTokens: number;\n  clearEvents: number;\n  tokensSaved: number;\n  memoryOperations: number;\n  agentId?: string;\n  peakTokens: number;\n}\n\nexport class ContextStatsTracker {\n  private statsDir: string;\n  private currentSession: SessionMetrics | null = null;\n  private clearEvents: ContextClearEvent[] = [];\n  private memoryOps: MemoryOperation[] = [];\n  private startTime: Date = new Date();\n\n  constructor(baseDir: string = path.join(os.homedir(), '.versatil', 'stats')) {\n    this.statsDir = baseDir;\n  }\n\n  /**\n   * Initialize statistics directory and load existing stats\n   */\n  async initialize(): Promise<void> {\n    await fs.mkdir(this.statsDir, { recursive: true });\n\n    // Load existing events from disk\n    try {\n      const clearEventsPath = path.join(this.statsDir, 'clear-events.json');\n      const memoryOpsPath = path.join(this.statsDir, 'memory-ops.json');\n\n      if (await this.fileExists(clearEventsPath)) {\n        const data = await fs.readFile(clearEventsPath, 'utf-8');\n        this.clearEvents = JSON.parse(data, this.dateReviver);\n      }\n\n      if (await this.fileExists(memoryOpsPath)) {\n        const data = await fs.readFile(memoryOpsPath, 'utf-8');\n        this.memoryOps = JSON.parse(data, this.dateReviver);\n      }\n    } catch (error) {\n      console.warn('Failed to load existing stats:', error);\n    }\n  }\n\n  /**\n   * Start a new session for tracking\n   */\n  startSession(agentId?: string): string {\n    const sessionId = `session-${Date.now()}-${Math.random().toString(36).substring(7)}`;\n\n    this.currentSession = {\n      sessionId,\n      startTime: new Date(),\n      totalInputTokens: 0,\n      totalOutputTokens: 0,\n      clearEvents: 0,\n      tokensSaved: 0,\n      memoryOperations: 0,\n      agentId,\n      peakTokens: 0\n    };\n\n    return sessionId;\n  }\n\n  /**\n   * End the current session\n   */\n  async endSession(): Promise<SessionMetrics | null> {\n    if (!this.currentSession) {\n      return null;\n    }\n\n    this.currentSession.endTime = new Date();\n\n    // Save session to disk\n    const sessionsPath = path.join(this.statsDir, 'sessions.jsonl');\n    await fs.appendFile(\n      sessionsPath,\n      JSON.stringify(this.currentSession) + '\\n',\n      'utf-8'\n    );\n\n    const completedSession = this.currentSession;\n    this.currentSession = null;\n\n    return completedSession;\n  }\n\n  /**\n   * Track a context clear event\n   */\n  async trackClearEvent(event: Omit<ContextClearEvent, 'timestamp'>): Promise<void> {\n    const clearEvent: ContextClearEvent = {\n      ...event,\n      timestamp: new Date()\n    };\n\n    this.clearEvents.push(clearEvent);\n\n    // Update current session\n    if (this.currentSession) {\n      this.currentSession.clearEvents++;\n      this.currentSession.tokensSaved += event.tokensSaved;\n    }\n\n    // Persist to disk (keep last 1000 events)\n    if (this.clearEvents.length > 1000) {\n      this.clearEvents = this.clearEvents.slice(-1000);\n    }\n\n    await this.persistClearEvents();\n  }\n\n  /**\n   * Track a memory operation\n   */\n  async trackMemoryOperation(op: Omit<MemoryOperation, 'timestamp'>): Promise<void> {\n    const memoryOp: MemoryOperation = {\n      ...op,\n      timestamp: new Date()\n    };\n\n    this.memoryOps.push(memoryOp);\n\n    // Update current session\n    if (this.currentSession) {\n      this.currentSession.memoryOperations++;\n    }\n\n    // Persist to disk (keep last 5000 operations)\n    if (this.memoryOps.length > 5000) {\n      this.memoryOps = this.memoryOps.slice(-5000);\n    }\n\n    await this.persistMemoryOps();\n  }\n\n  /**\n   * Update token usage for current session\n   */\n  updateTokenUsage(inputTokens: number, outputTokens: number): void {\n    if (!this.currentSession) {\n      return;\n    }\n\n    this.currentSession.totalInputTokens += inputTokens;\n    this.currentSession.totalOutputTokens += outputTokens;\n    this.currentSession.peakTokens = Math.max(\n      this.currentSession.peakTokens,\n      inputTokens\n    );\n  }\n\n  /**\n   * Get current statistics\n   */\n  getStatistics(): ContextStatistics {\n    const totalTokensProcessed = this.clearEvents.reduce(\n      (sum, event) => sum + event.inputTokens,\n      0\n    );\n\n    const totalTokensSaved = this.clearEvents.reduce(\n      (sum, event) => sum + event.tokensSaved,\n      0\n    );\n\n    const memoryOperationsByType: Record<string, number> = {};\n    this.memoryOps.forEach(op => {\n      memoryOperationsByType[op.operation] = (memoryOperationsByType[op.operation] || 0) + 1;\n    });\n\n    const clearEventsByAgent: Record<string, number> = {};\n    this.clearEvents.forEach(event => {\n      if (event.agentId) {\n        clearEventsByAgent[event.agentId] = (clearEventsByAgent[event.agentId] || 0) + 1;\n      }\n    });\n\n    const uptime = (Date.now() - this.startTime.getTime()) / 1000;\n\n    return {\n      totalTokensProcessed,\n      totalClearEvents: this.clearEvents.length,\n      totalTokensSaved,\n      totalMemoryOperations: this.memoryOps.length,\n      avgTokensPerClear: this.clearEvents.length > 0\n        ? totalTokensSaved / this.clearEvents.length\n        : 0,\n      memoryOperationsByType,\n      clearEventsByAgent,\n      lastClearEvent: this.clearEvents[this.clearEvents.length - 1],\n      uptime\n    };\n  }\n\n  /**\n   * Get session metrics (current or specific session ID)\n   */\n  async getSessionMetrics(sessionId?: string): Promise<SessionMetrics | null> {\n    if (!sessionId && this.currentSession) {\n      return this.currentSession;\n    }\n\n    if (!sessionId) {\n      return null;\n    }\n\n    // Load from disk\n    const sessionsPath = path.join(this.statsDir, 'sessions.jsonl');\n\n    if (!await this.fileExists(sessionsPath)) {\n      return null;\n    }\n\n    const data = await fs.readFile(sessionsPath, 'utf-8');\n    const sessions = data\n      .split('\\n')\n      .filter(line => line.trim())\n      .map(line => JSON.parse(line, this.dateReviver) as SessionMetrics);\n\n    return sessions.find(s => s.sessionId === sessionId) || null;\n  }\n\n  /**\n   * Get clear events within time range\n   */\n  getClearEvents(since?: Date, until?: Date): ContextClearEvent[] {\n    return this.clearEvents.filter(event => {\n      if (since && event.timestamp < since) return false;\n      if (until && event.timestamp > until) return false;\n      return true;\n    });\n  }\n\n  /**\n   * Get memory operations within time range\n   */\n  getMemoryOperations(since?: Date, until?: Date): MemoryOperation[] {\n    return this.memoryOps.filter(op => {\n      if (since && op.timestamp < since) return false;\n      if (until && op.timestamp > until) return false;\n      return true;\n    });\n  }\n\n  /**\n   * Generate a report for a time period\n   */\n  async generateReport(since?: Date, until?: Date): Promise<string> {\n    const stats = this.getStatistics();\n    const clearEvents = this.getClearEvents(since, until);\n    const memoryOps = this.getMemoryOperations(since, until);\n\n    const report = `\n# Context Management Report\n\n**Generated**: ${new Date().toISOString()}\n**Period**: ${since ? since.toISOString() : 'All time'} to ${until ? until.toISOString() : 'Now'}\n\n## Summary Statistics\n\n- **Total Tokens Processed**: ${stats.totalTokensProcessed.toLocaleString()}\n- **Total Clear Events**: ${stats.totalClearEvents}\n- **Total Tokens Saved**: ${stats.totalTokensSaved.toLocaleString()}\n- **Avg Tokens Saved per Clear**: ${Math.round(stats.avgTokensPerClear).toLocaleString()}\n- **Total Memory Operations**: ${stats.totalMemoryOperations}\n\n## Clear Events by Agent\n\n${Object.entries(stats.clearEventsByAgent)\n  .map(([agent, count]) => `- **${agent}**: ${count} clears`)\n  .join('\\n')}\n\n## Memory Operations by Type\n\n${Object.entries(stats.memoryOperationsByType)\n  .map(([type, count]) => `- **${type}**: ${count} operations`)\n  .join('\\n')}\n\n## Recent Clear Events (Last 5)\n\n${clearEvents\n  .slice(-5)\n  .reverse()\n  .map(event => `\n### ${event.timestamp.toISOString()} ${event.agentId ? `(${event.agentId})` : ''}\n- Input Tokens: ${event.inputTokens.toLocaleString()}\n- Tool Uses Cleared: ${event.toolUsesCleared}\n- Tokens Saved: ${event.tokensSaved.toLocaleString()}\n- Trigger: ${event.triggerType} (${event.triggerValue.toLocaleString()})\n`).join('\\n')}\n\n## Efficiency Metrics\n\n- **Token Savings Rate**: ${stats.totalTokensProcessed > 0\n    ? ((stats.totalTokensSaved / stats.totalTokensProcessed) * 100).toFixed(2)\n    : 0}%\n- **Memory Ops per Clear**: ${stats.totalClearEvents > 0\n    ? (stats.totalMemoryOperations / stats.totalClearEvents).toFixed(2)\n    : 0}\n- **Uptime**: ${Math.round(stats.uptime)} seconds (${(stats.uptime / 3600).toFixed(2)} hours)\n\n---\n*Generated by VERSATIL Context Stats Tracker*\n`;\n\n    return report.trim();\n  }\n\n  /**\n   * Clear old statistics (keep last N days)\n   */\n  async cleanup(daysToKeep: number = 30): Promise<void> {\n    const cutoffDate = new Date(Date.now() - daysToKeep * 24 * 60 * 60 * 1000);\n\n    this.clearEvents = this.clearEvents.filter(\n      event => event.timestamp >= cutoffDate\n    );\n\n    this.memoryOps = this.memoryOps.filter(\n      op => op.timestamp >= cutoffDate\n    );\n\n    await Promise.all([\n      this.persistClearEvents(),\n      this.persistMemoryOps()\n    ]);\n  }\n\n  // Private helper methods\n\n  private async persistClearEvents(): Promise<void> {\n    const filePath = path.join(this.statsDir, 'clear-events.json');\n    await fs.writeFile(\n      filePath,\n      JSON.stringify(this.clearEvents, null, 2),\n      'utf-8'\n    );\n  }\n\n  private async persistMemoryOps(): Promise<void> {\n    const filePath = path.join(this.statsDir, 'memory-ops.json');\n    await fs.writeFile(\n      filePath,\n      JSON.stringify(this.memoryOps, null, 2),\n      'utf-8'\n    );\n  }\n\n  private async fileExists(filePath: string): Promise<boolean> {\n    try {\n      await fs.access(filePath);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  private dateReviver(key: string, value: any): any {\n    if (typeof value === 'string' && /^\\d{4}-\\d{2}-\\d{2}T/.test(value)) {\n      return new Date(value);\n    }\n    return value;\n  }\n}\n\n/**\n * Global singleton instance\n */\nlet globalTracker: ContextStatsTracker | null = null;\n\nexport function getGlobalContextTracker(): ContextStatsTracker {\n  if (!globalTracker) {\n    globalTracker = new ContextStatsTracker();\n    globalTracker.initialize().catch(console.error);\n  }\n  return globalTracker;\n}\n"],"version":3}