{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/src/agents/introspective-agent.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/src/agents/introspective-agent.ts"],"sourcesContent":["/**\n * IntrospectiveAgent - Testable without mocks\n * Uses dependency injection for real testing\n */\n\nimport { BaseAgent, AgentResponse, AgentActivationContext } from './base-agent.js';\nimport { VERSATILLogger } from '../utils/logger.js';\nimport { PerformanceMonitor } from '../analytics/performance-monitor.js';\n\nexport interface IntrospectionResult {\n  insights: Insight[];\n  recommendations: Recommendation[];\n  timestamp: number;\n  confidence: number;\n  healthScore: number;\n}\n\nexport interface Insight {\n  type: string;\n  description: string;\n  confidence: number;\n  impact?: string;\n  actionable?: boolean;\n}\n\nexport interface Recommendation {\n  type: string;\n  message: string;\n  priority: string;\n  estimatedEffort?: string;\n  autoFixable?: boolean;\n}\n\nexport interface ImprovementRecord {\n  id: string;\n  timestamp: number;\n  description: string;\n  impact: string;\n  success: boolean;\n}\n\nexport interface FrameworkHealth {\n  score: number;\n  configFiles: { [key: string]: boolean };\n  dependencies: { total: number; outdated: number };\n  vulnerabilities: number;\n  issues: string[];\n}\n\nexport interface PerformanceMetrics {\n  buildTime: number;\n  testTime: number;\n  lintTime: number;\n  memoryUsage: NodeJS.MemoryUsage;\n}\n\n// Abstraction for file system operations\nexport interface FileSystemProvider {\n  fileExists(path: string): Promise<boolean>;\n  readFile(path: string): Promise<string>;\n}\n\n// Abstraction for command execution\nexport interface CommandExecutor {\n  execute(command: string, timeoutMs: number): Promise<{ stdout: string; stderr: string }>;\n}\n\n// Real implementations for production\nexport class RealFileSystemProvider implements FileSystemProvider {\n  async fileExists(path: string): Promise<boolean> {\n    try {\n      const fs = await import('fs-extra');\n      await fs.access(path);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async readFile(path: string): Promise<string> {\n    const fs = await import('fs-extra');\n    return await fs.readFile(path, 'utf-8');\n  }\n}\n\nexport class RealCommandExecutor implements CommandExecutor {\n  async execute(command: string, timeoutMs: number): Promise<{ stdout: string; stderr: string }> {\n    const { exec } = await import('child_process');\n    const { promisify } = await import('util');\n    const execAsync = promisify(exec);\n\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Command timeout: ${command}`));\n      }, timeoutMs);\n\n      execAsync(command)\n        .then(result => {\n          clearTimeout(timeout);\n          resolve(result);\n        })\n        .catch(error => {\n          clearTimeout(timeout);\n          reject(error);\n        });\n    });\n  }\n}\n\n// Test implementations (lightweight, real behavior)\nexport class TestFileSystemProvider implements FileSystemProvider {\n  private files: Map<string, string> = new Map();\n\n  constructor(initialFiles: { [path: string]: string } = {}) {\n    for (const [path, content] of Object.entries(initialFiles)) {\n      this.files.set(path, content);\n    }\n  }\n\n  async fileExists(path: string): Promise<boolean> {\n    return this.files.has(path);\n  }\n\n  async readFile(path: string): Promise<string> {\n    const content = this.files.get(path);\n    if (content === undefined) {\n      throw new Error(`File not found: ${path}`);\n    }\n    return content;\n  }\n\n  addFile(path: string, content: string): void {\n    this.files.set(path, content);\n  }\n}\n\nexport class TestCommandExecutor implements CommandExecutor {\n  private responses: Map<string, { stdout: string; stderr: string; delay: number }> = new Map();\n\n  async execute(command: string, timeoutMs: number): Promise<{ stdout: string; stderr: string }> {\n    // Simulate delay\n    await new Promise(resolve => setTimeout(resolve, 10));\n\n    const response = this.responses.get(command) || { stdout: '', stderr: '', delay: 10 };\n\n    // Simulate actual command delay if configured\n    if (response.delay > 0) {\n      await new Promise(resolve => setTimeout(resolve, response.delay));\n    }\n\n    // If stderr is present, throw error (simulating command failure)\n    if (response.stderr) {\n      const error: any = new Error(`Command failed: ${command}`);\n      error.stdout = response.stdout;\n      error.stderr = response.stderr;\n      throw error;\n    }\n\n    return { stdout: response.stdout, stderr: response.stderr };\n  }\n\n  setResponse(command: string, stdout: string, stderr: string = '', delay: number = 10): void {\n    this.responses.set(command, { stdout, stderr, delay });\n  }\n}\n\n/**\n * IntrospectiveAgent - Testable implementation\n */\nexport class IntrospectiveAgent extends BaseAgent {\n  name = 'IntrospectiveAgent';\n  id = 'introspective-agent';\n  specialization = 'Self-Monitoring & Optimization Controller';\n  systemPrompt = 'Autonomous agent responsible for framework introspection, optimization, and self-improvement';\n\n  private logger: VERSATILLogger;\n  private performanceMonitor: PerformanceMonitor;\n  private learningInsights: Map<string, Insight> = new Map();\n  private improvementHistory: ImprovementRecord[] = [];\n\n  // Injected dependencies\n  private fileSystem: FileSystemProvider;\n  private commandExecutor: CommandExecutor;\n\n  constructor(\n    fileSystem?: FileSystemProvider,\n    commandExecutor?: CommandExecutor\n  ) {\n    super();\n    this.logger = VERSATILLogger.getInstance();\n    this.performanceMonitor = new PerformanceMonitor();\n\n    // Use injected or default to real implementations\n    this.fileSystem = fileSystem || new RealFileSystemProvider();\n    this.commandExecutor = commandExecutor || new RealCommandExecutor();\n\n    this.logger.info(\n      'IntrospectiveAgent initialized with tool-based controller architecture',\n      {\n        features: [\n          'Framework Health Monitoring',\n          'Performance Optimization Engine',\n          'Pattern Recognition System',\n          'Meta-Learning Capabilities',\n          'Autonomous Improvement Engine'\n        ]\n      },\n      'IntrospectiveAgent'\n    );\n  }\n\n  /**\n   * Main activation method\n   */\n  async activate(context: AgentActivationContext): Promise<AgentResponse> {\n    const startTime = Date.now();\n\n    this.logger.info(\n      '🔍 Starting introspective analysis using tool controllers',\n      {\n        context: context.trigger || 'unknown'\n      },\n      'IntrospectiveAgent'\n    );\n\n    try {\n      // Perform analysis\n      const healthAssessment = await this.assessFrameworkHealth();\n      const performanceMetrics = await this.analyzePerformance();\n      const patterns = await this.discoverPatterns(context);\n      const learningInsights = await this.performMetaLearning();\n\n      const confidence = this.calculateConfidence(healthAssessment, performanceMetrics);\n      const suggestions = this.generateSuggestions(\n        healthAssessment,\n        performanceMetrics,\n        patterns,\n        learningInsights\n      );\n\n      const handoffTo = this.determineHandoffsFromAnalysis(suggestions);\n      const priority = this.calculatePriorityFromSuggestions(suggestions);\n      const executionTime = Date.now() - startTime;\n\n      this.logger.info(\n        '✅ Introspective analysis completed',\n        {\n          executionTime: `${executionTime}ms`,\n          improvements: suggestions.length,\n          confidence\n        },\n        'IntrospectiveAgent'\n      );\n\n      return {\n        agentId: this.id,\n        message: `Introspective analysis completed with ${suggestions.length} insights`,\n        suggestions,\n        priority,\n        handoffTo,\n        context: {\n          confidence,\n          introspectionTime: executionTime,\n          healthScore: healthAssessment.score,\n          performanceMetrics,\n          patterns: patterns.length,\n          learningInsights: learningInsights.length,\n          // Additional fields for test compatibility\n          patternsDiscovered: patterns.length,\n          learningUpdates: learningInsights.length,\n          optimizationsApplied: suggestions.filter(s => s.autoFixable).length,\n          qualityGates: {\n            config: healthAssessment.score >= 0.8,\n            security: healthAssessment.vulnerabilities === 0,\n            performance: performanceMetrics.buildTime > 0 && performanceMetrics.buildTime < 30000,\n            overall: confidence >= 0.7\n          }\n        }\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n\n      this.logger.error(\n        '❌ Introspective analysis failed',\n        {\n          error: errorMessage,\n          context: context.trigger || 'unknown'\n        },\n        'IntrospectiveAgent'\n      );\n\n      return {\n        agentId: this.id,\n        message: `Framework encountered errors and requires investigation: ${errorMessage}`,\n        suggestions: [{\n          type: 'error-recovery',\n          message: 'Run framework recovery: npm run recover',\n          priority: 'high'\n        }, {\n          type: 'configuration-check',\n          message: 'Verify framework configuration and dependencies',\n          priority: 'medium'\n        }],\n        priority: 'low',\n        handoffTo: [],\n        context: {\n          confidence: 0.1,\n          error: true,\n          errorMessage\n        }\n      };\n    }\n  }\n\n  /**\n   * Assess framework health\n   */\n  private async assessFrameworkHealth(): Promise<FrameworkHealth> {\n    const configFiles = {\n      'package.json': false,\n      'tsconfig.json': false,\n      'jest.config.cjs': false,\n      '.versatil-project.json': false\n    };\n\n    const issues: string[] = [];\n\n    // Check configuration files using injected file system\n    for (const file of Object.keys(configFiles)) {\n      const exists = await this.fileSystem.fileExists(file);\n      configFiles[file] = exists;\n      if (!exists) {\n        issues.push(`Missing configuration file: ${file}`);\n      }\n    }\n\n    // Check for vulnerabilities using injected command executor\n    let vulnerabilities = 0;\n    try {\n      const auditResult = await this.commandExecutor.execute('npm audit --json', 5000);\n      const auditData = JSON.parse(auditResult.stdout);\n      vulnerabilities = auditData.metadata?.vulnerabilities?.total || 0;\n    } catch (error) {\n      // npm audit returns non-zero for vulnerabilities, try parsing anyway\n      if (error instanceof Error && 'stdout' in (error as any)) {\n        try {\n          const auditData = JSON.parse((error as any).stdout);\n          vulnerabilities = auditData.metadata?.vulnerabilities?.total || 0;\n        } catch {\n          // Parsing failed, assume no vulnerabilities\n        }\n      }\n    }\n\n    // Calculate health score\n    const configScore = Object.values(configFiles).filter(Boolean).length / Object.keys(configFiles).length;\n    const securityScore = vulnerabilities === 0 ? 1 : Math.max(0, 1 - (vulnerabilities * 0.1));\n    const healthScore = (configScore * 0.6 + securityScore * 0.4);\n\n    return {\n      score: healthScore,\n      configFiles,\n      dependencies: { total: 0, outdated: 0 },\n      vulnerabilities,\n      issues\n    };\n  }\n\n  /**\n   * Analyze performance\n   */\n  private async analyzePerformance(): Promise<PerformanceMetrics> {\n    const metrics: PerformanceMetrics = {\n      buildTime: 0,\n      testTime: 0,\n      lintTime: 0,\n      memoryUsage: process.memoryUsage()\n    };\n\n    // Measure build time\n    try {\n      const buildStart = Date.now();\n      await this.commandExecutor.execute('npm run build', 60000);\n      metrics.buildTime = Date.now() - buildStart;\n    } catch {\n      metrics.buildTime = -1;\n    }\n\n    // Measure test time\n    try {\n      const testStart = Date.now();\n      await this.commandExecutor.execute('npm test -- --silent', 30000);\n      metrics.testTime = Date.now() - testStart;\n    } catch {\n      metrics.testTime = -1;\n    }\n\n    // Measure lint time\n    try {\n      const lintStart = Date.now();\n      await this.commandExecutor.execute('npm run lint', 15000);\n      metrics.lintTime = Date.now() - lintStart;\n    } catch {\n      metrics.lintTime = -1;\n    }\n\n    return metrics;\n  }\n\n  /**\n   * Discover patterns\n   */\n  private async discoverPatterns(context: AgentActivationContext): Promise<Insight[]> {\n    const patterns: Insight[] = [];\n\n    if (context.content && context.content.includes('test')) {\n      patterns.push({\n        type: 'test-coverage',\n        description: 'Test file detected - consider checking coverage metrics',\n        confidence: 0.9,\n        impact: 'high',\n        actionable: true\n      });\n    }\n\n    if (context.content && (context.content.includes('performance') || context.content.includes('optimization'))) {\n      patterns.push({\n        type: 'performance-focus',\n        description: 'Performance-related code detected - monitoring for optimization opportunities',\n        confidence: 0.85,\n        impact: 'high',\n        actionable: true\n      });\n    }\n\n    return patterns;\n  }\n\n  /**\n   * Perform meta-learning\n   */\n  private async performMetaLearning(): Promise<Insight[]> {\n    const insights: Insight[] = [];\n\n    if (this.improvementHistory.length > 0) {\n      const successRate = this.improvementHistory.filter(i => i.success).length / this.improvementHistory.length;\n      if (successRate < 0.5) {\n        insights.push({\n          type: 'meta-learning',\n          description: 'Low success rate in past improvements - review optimization strategy',\n          confidence: 0.7,\n          impact: 'medium',\n          actionable: true\n        });\n      }\n    }\n\n    if (this.learningInsights.size > 10) {\n      insights.push({\n        type: 'meta-learning',\n        description: `Accumulated ${this.learningInsights.size} insights - ready for pattern synthesis`,\n        confidence: 0.9,\n        impact: 'high',\n        actionable: true\n      });\n    }\n\n    return insights;\n  }\n\n  private calculateConfidence(health: FrameworkHealth, performance: PerformanceMetrics): number {\n    let confidence = 0.5;\n\n    // Health score is heavily weighted (40%)\n    confidence += health.score * 0.4;\n\n    // Performance score (30%) - penalize negative values (command failures)\n    const perfScore = (\n      (performance.buildTime > 0 && performance.buildTime < 30000 ? 0.33 : performance.buildTime === -1 ? -0.1 : 0) +\n      (performance.testTime > 0 && performance.testTime < 15000 ? 0.33 : performance.testTime === -1 ? -0.1 : 0) +\n      (performance.lintTime > 0 && performance.lintTime < 5000 ? 0.34 : performance.lintTime === -1 ? -0.1 : 0)\n    );\n    confidence += perfScore * 0.3;\n\n    const memoryMB = performance.memoryUsage.heapUsed / 1024 / 1024;\n    const memoryScore = memoryMB < 100 ? 1 : memoryMB < 200 ? 0.7 : 0.3;\n    confidence += memoryScore * 0.2;\n\n    return Math.max(0, Math.min(1, confidence));\n  }\n\n  private generateSuggestions(\n    health: FrameworkHealth,\n    performance: PerformanceMetrics,\n    patterns: Insight[],\n    learningInsights: Insight[]\n  ): any[] {\n    const suggestions: any[] = [];\n\n    if (health.vulnerabilities > 0) {\n      suggestions.push({\n        type: 'security',\n        message: `Fix ${health.vulnerabilities} security vulnerabilities`,\n        priority: 'critical'\n      });\n    }\n\n    if (health.issues.length > 0) {\n      suggestions.push({\n        type: 'configuration',\n        message: 'Resolve configuration issues: ' + health.issues.join(', '),\n        priority: 'high'\n      });\n    }\n\n    if (performance.buildTime > 30000) {\n      suggestions.push({\n        type: 'performance',\n        message: 'Build time optimization recommended - consider build time optimization strategies',\n        priority: 'medium'\n      });\n    }\n\n    const memoryMB = performance.memoryUsage.heapUsed / 1024 / 1024;\n    if (memoryMB > 150) {\n      suggestions.push({\n        type: 'performance',\n        message: 'High memory usage detected - implement memory optimization',\n        priority: 'medium'\n      });\n    }\n\n    for (const pattern of patterns) {\n      if (pattern.actionable) {\n        suggestions.push({\n          type: pattern.type,\n          message: pattern.description,\n          priority: pattern.impact === 'high' ? 'high' : 'medium'\n        });\n      }\n    }\n\n    return suggestions;\n  }\n\n  private determineHandoffsFromAnalysis(suggestions: any[]): string[] {\n    const handoffs: string[] = [];\n    if (suggestions.some(s => s.type === 'security')) handoffs.push('security-sam');\n    if (suggestions.some(s => s.type === 'performance')) handoffs.push('enhanced-marcus');\n    if (suggestions.some(s => s.type === 'test-coverage')) handoffs.push('enhanced-maria');\n    return handoffs;\n  }\n\n  private calculatePriorityFromSuggestions(suggestions: any[]): 'critical' | 'high' | 'medium' | 'low' {\n    if (suggestions.some(s => s.priority === 'critical')) return 'critical';\n    if (suggestions.some(s => s.priority === 'high')) return 'high';\n    if (suggestions.some(s => s.priority === 'medium')) return 'medium';\n    return 'low';\n  }\n\n  // Public API methods\n  async triggerIntrospection(): Promise<IntrospectionResult> {\n    const health = await this.assessFrameworkHealth();\n    const performance = await this.analyzePerformance();\n    const patterns = await this.discoverPatterns({ trigger: 'manual-introspection' } as AgentActivationContext);\n    const learningInsights = await this.performMetaLearning();\n\n    const confidence = this.calculateConfidence(health, performance);\n    const suggestions = this.generateSuggestions(health, performance, patterns, learningInsights);\n\n    return {\n      insights: [...patterns, ...learningInsights],\n      recommendations: suggestions.map(s => ({\n        type: s.type,\n        message: s.message,\n        priority: s.priority,\n        estimatedEffort: 'medium',\n        autoFixable: false\n      })),\n      timestamp: Date.now(),\n      confidence,\n      healthScore: health.score\n    };\n  }\n\n  getLearningInsights(): Map<string, Insight> {\n    return this.learningInsights;\n  }\n\n  getImprovementHistory(): ImprovementRecord[] {\n    return this.improvementHistory;\n  }\n\n  // Common methods from earlier\n  calculatePriority(issues: any[]): number {\n    if (!issues || issues.length === 0) return 0;\n    const severities = issues.map(i =>\n      i.severity === 'critical' ? 4 :\n      i.severity === 'high' ? 3 :\n      i.severity === 'medium' ? 2 : 1\n    );\n    return Math.max(...severities);\n  }\n\n  determineHandoffs(issues: any[]): string[] {\n    const handoffs: string[] = [];\n    if (!issues) return handoffs;\n\n    const hasSecurityIssue = issues.some(i => i.type === 'security');\n    const hasPerformanceIssue = issues.some(i => i.type === 'performance');\n    const hasUIIssue = issues.some(i => i.type === 'ui' || i.type === 'accessibility');\n\n    if (hasSecurityIssue) handoffs.push('security-sam');\n    if (hasPerformanceIssue) handoffs.push('enhanced-marcus');\n    if (hasUIIssue) handoffs.push('enhanced-james');\n\n    return handoffs;\n  }\n\n  generateActionableRecommendations(issues: any[]): string[] {\n    if (!issues || issues.length === 0) return [];\n\n    return issues.map(issue => {\n      if (issue.type === 'security') {\n        return `Fix security issue: ${issue.message || 'Security vulnerability detected'}`;\n      }\n      if (issue.type === 'performance') {\n        return `Optimize performance: ${issue.message || 'Performance issue detected'}`;\n      }\n      return `Address issue: ${issue.message || issue.description || 'Issue detected'}`;\n    });\n  }\n\n  generateEnhancedReport(issues: any[], metadata: any = {}): any {\n    return {\n      summary: {\n        totalIssues: issues?.length || 0,\n        critical: issues?.filter(i => i.severity === 'critical').length || 0,\n        high: issues?.filter(i => i.severity === 'high').length || 0,\n        medium: issues?.filter(i => i.severity === 'medium').length || 0,\n        low: issues?.filter(i => i.severity === 'low').length || 0\n      },\n      issues: issues || [],\n      recommendations: this.generateActionableRecommendations(issues || []),\n      metadata: {\n        timestamp: Date.now(),\n        ...metadata\n      }\n    };\n  }\n\n  getScoreEmoji(score: number): string {\n    if (score >= 90) return '🟢';\n    if (score >= 75) return '🟡';\n    if (score >= 60) return '🟠';\n    return '🔴';\n  }\n\n  extractAgentName(text: string): string {\n    const match = text.match(/@(\\w+)/);\n    return match ? match[1] : '';\n  }\n\n  protected analyzeCrossFileConsistency(context: AgentActivationContext): Record<string, string> {\n    return {\n      [context.filePath || 'unknown']: context.content || ''\n    };\n  }\n\n  hasConfigurationInconsistencies(context: any): boolean {\n    return false;\n  }\n\n}"],"version":3}