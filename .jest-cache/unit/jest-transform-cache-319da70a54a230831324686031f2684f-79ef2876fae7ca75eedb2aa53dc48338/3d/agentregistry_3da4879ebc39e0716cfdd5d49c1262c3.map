{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/src/agents/agent-registry.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/src/agents/agent-registry.ts"],"sourcesContent":["import { VERSATILLogger } from '../utils/logger.js';\nimport { BaseAgent } from './base-agent.js';\nimport { EnhancedMaria } from './enhanced-maria.js';\nimport { EnhancedJames } from './enhanced-james.js';\nimport { EnhancedMarcus } from './enhanced-marcus.js';\nimport { SarahPm } from './sarah-pm.js';\nimport { AlexBa } from './alex-ba.js';\nimport { DrAiMl } from './dr-ai-ml.js';\nimport { DevopsDan } from './devops-dan.js';\nimport { SecuritySam } from './security-sam.js';\nimport { ArchitectureDan } from './architecture-dan.js';\nimport { DeploymentOrchestrator } from './deployment-orchestrator.js';\nimport { IntrospectiveAgent } from './introspective-agent.js';\nimport { SimulationQa } from './simulation-qa.js';\n\nexport class AgentRegistry {\n  private agents = new Map<string, BaseAgent>();\n  \n  constructor() {\n    this.registerAllAgents();\n  }\n  \n  private registerAllAgents(): void {\n    this.agents.set('enhanced-maria', new EnhancedMaria());\n    this.agents.set('enhanced-james', new EnhancedJames());\n    this.agents.set('enhanced-marcus', new EnhancedMarcus());\n    this.agents.set('sarah-pm', new SarahPm());\n    this.agents.set('alex-ba', new AlexBa());\n    this.agents.set('dr-ai-ml', new DrAiMl());\n    this.agents.set('devops-dan', new DevopsDan());\n    this.agents.set('security-sam', new SecuritySam());\n    this.agents.set('architecture-dan', new ArchitectureDan());\n    this.agents.set('deployment-orchestrator', new DeploymentOrchestrator());\n    this.agents.set('introspective-agent', new IntrospectiveAgent());\n    this.agents.set('simulation-qa', new SimulationQa());\n  }\n  \n  getAgent(id: string): BaseAgent | undefined {\n    return this.agents.get(id);\n  }\n  \n  getAllAgents(): BaseAgent[] {\n    return Array.from(this.agents.values());\n  }\n\n  listAgents(): BaseAgent[] {\n    return this.getAllAgents();\n  }\n\n  registerAgent(id: string, agent: BaseAgent): void {\n    this.agents.set(id, agent);\n  }\n\n  getAgentsForFilePattern(pattern: string): BaseAgent[] {\n    return this.getAllAgents();\n  }\n\n  getStatus(): any {\n    return {\n      totalAgents: this.agents.size,\n      agents: Array.from(this.agents.entries()).map(([id, agent]) => ({\n        id,\n        name: agent.name,\n        specialization: agent.specialization\n      }))\n    };\n  }\n\n  isHealthy(): boolean {\n    return this.agents.size > 0;\n  }\n\n  getAgentMetadata(id: string): any {\n    const agent = this.agents.get(id);\n    if (!agent) return undefined;\n\n    const metadata: any = {\n      name: agent.name,\n      specialization: agent.specialization,\n      autoActivate: false,\n      priority: id === 'introspective-agent' ? 4 : 3,\n      triggers: {\n        keywords: this.getKeywordsForAgent(id),\n        patterns: [],\n        fileTypes: []\n      },\n      collaborators: this.getCollaboratorIds(id)\n    };\n\n    // Add MCP tools for introspective agent\n    if (id === 'introspective-agent') {\n      metadata.mcpTools = ['Read MCP', 'Bash MCP', 'WebFetch MCP'];\n    }\n\n    return metadata;\n  }\n\n  getCollaborators(id: string): BaseAgent[] {\n    const collaboratorIds = this.getCollaboratorIds(id);\n    return collaboratorIds\n      .map(collabId => this.agents.get(collabId))\n      .filter((agent): agent is BaseAgent => agent !== undefined);\n  }\n\n  private getKeywordsForAgent(id: string): string[] {\n    const keywordMap: Record<string, string[]> = {\n      'introspective-agent': ['introspection', 'optimization', 'performance', 'learning'],\n      'enhanced-maria': ['test', 'quality', 'coverage', 'validation'],\n      'enhanced-james': ['ui', 'frontend', 'component', 'accessibility'],\n      'enhanced-marcus': ['api', 'backend', 'security', 'database'],\n      'sarah-pm': ['project', 'sprint', 'milestone', 'timeline'],\n      'alex-ba': ['requirements', 'business', 'analysis', 'stakeholder'],\n      'dr-ai-ml': ['machine learning', 'model', 'training', 'prediction']\n    };\n    return keywordMap[id] || [];\n  }\n\n  private getCollaboratorIds(id: string): string[] {\n    const collabMap: Record<string, string[]> = {\n      'introspective-agent': ['enhanced-maria', 'enhanced-james', 'enhanced-marcus'],\n      'enhanced-maria': ['enhanced-james', 'enhanced-marcus'],\n      'enhanced-james': ['enhanced-maria', 'enhanced-marcus'],\n      'enhanced-marcus': ['enhanced-maria', 'enhanced-james'],\n      'sarah-pm': ['enhanced-maria', 'enhanced-james', 'enhanced-marcus', 'alex-ba'],\n      'alex-ba': ['sarah-pm', 'enhanced-maria'],\n      'dr-ai-ml': ['enhanced-marcus', 'enhanced-maria']\n    };\n    return collabMap[id] || [];\n  }\n}\n\nexport const log = console;\n\n// Export singleton instance for easy import\nexport const agentRegistry = new AgentRegistry();\n"],"version":3}