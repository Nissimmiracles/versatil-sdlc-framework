c560df308c607ef3280c14d4c36183f5
"use strict";
/**
 * VERSATIL SDLC Framework - Logger Unit Tests
 * Enhanced Maria-QA Quality Assurance Testing
 *
 * Testing framework's own logging system
 */
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../../../src/utils/logger");
describe('VERSATILLogger', () => {
    let logger;
    let consoleSpy;
    beforeEach(() => {
        logger = new logger_1.VERSATILLogger();
        consoleSpy = jest.spyOn(console, 'log').mockImplementation();
    });
    afterEach(() => {
        consoleSpy.mockRestore();
    });
    describe('Logging Methods', () => {
        it.skip('should log debug messages correctly', () => {
            logger.debug('Test debug message', { key: 'value' }, 'test-component');
            expect(consoleSpy).toHaveBeenCalled();
            const logCall = consoleSpy.mock.calls[0][0];
            expect(logCall).toContain('DEBUG');
            expect(logCall).toContain('Test debug message');
        });
        it.skip('should log info messages correctly', () => {
            logger.info('Test info message', { key: 'value' }, 'test-component');
            expect(consoleSpy).toHaveBeenCalled();
            const logCall = consoleSpy.mock.calls[0][0];
            expect(logCall).toContain('INFO');
            expect(logCall).toContain('Test info message');
        });
        it.skip('should log warning messages correctly', () => {
            logger.warn('Test warning message', { key: 'value' }, 'test-component');
            expect(consoleSpy).toHaveBeenCalled();
            const logCall = consoleSpy.mock.calls[0][0];
            expect(logCall).toContain('WARN');
            expect(logCall).toContain('Test warning message');
        });
        it.skip('should log error messages correctly', () => {
            logger.error('Test error message', { key: 'value' }, 'test-component');
            expect(consoleSpy).toHaveBeenCalled();
            const logCall = consoleSpy.mock.calls[0][0];
            expect(logCall).toContain('ERROR');
            expect(logCall).toContain('Test error message');
        });
    });
    describe('Framework Self-Logging Validation', () => {
        it.skip('should support enhanced BMAD logging patterns', () => {
            const metadata = {
                agentId: 'maria-qa',
                activationTime: Date.now(),
                context: 'self-testing'
            };
            logger.info('Framework self-testing initiated', metadata, 'versatil-framework');
            expect(consoleSpy).toHaveBeenCalled();
            const logCall = consoleSpy.mock.calls[0][0];
            expect(logCall).toContain('maria-qa');
            expect(logCall).toContain('self-testing');
        });
        it.skip('should handle structured logging for agent orchestration', () => {
            const agentContext = {
                agent: 'Enhanced Maria-QA',
                action: 'quality-validation',
                filePath: '/test/path',
                timestamp: new Date().toISOString()
            };
            logger.debug('Agent activation logged', agentContext, 'agent-orchestration');
            expect(consoleSpy).toHaveBeenCalled();
            expect(consoleSpy.mock.calls[0][0]).toContain('Enhanced Maria-QA');
        });
    });
    describe('Performance Requirements', () => {
        it('should log messages within performance thresholds', () => {
            const startTime = Date.now();
            for (let i = 0; i < 100; i++) {
                logger.info(`Performance test message ${i}`, { iteration: i }, 'performance-test');
            }
            const executionTime = Date.now() - startTime;
            // BMAD requirement: 100 log messages should complete in under 100ms
            expect(executionTime).toBeLessThan(100);
            expect(consoleSpy).toHaveBeenCalledTimes(100);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,