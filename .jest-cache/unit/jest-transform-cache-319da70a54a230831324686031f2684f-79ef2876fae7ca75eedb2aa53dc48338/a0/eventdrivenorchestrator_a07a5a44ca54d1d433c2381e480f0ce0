39cd8111877c0572d838ba4120f4248f
"use strict";
/**
 * Event-Driven Agent Orchestrator
 *
 * Replaces polling with event-driven handoffs for immediate agent activation.
 * Target: 30% faster workflow execution (500ms ‚Üí 150ms handoff latency)
 *
 * @module EventDrivenOrchestrator
 * @version 5.0.0
 * @sprint Sprint 1 Day 3-4
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventDrivenOrchestrator = exports.AgentEvent = void 0;
const events_1 = require("events");
const logger_js_1 = require("../utils/logger.js");
const logger = new logger_js_1.VERSATILLogger();
/**
 * Agent lifecycle events
 */
var AgentEvent;
(function (AgentEvent) {
    AgentEvent["ACTIVATED"] = "agent:activated";
    AgentEvent["COMPLETED"] = "agent:completed";
    AgentEvent["HANDOFF"] = "agent:handoff";
    AgentEvent["ERROR"] = "agent:error";
    AgentEvent["PROGRESS"] = "agent:progress";
    AgentEvent["CHAIN_STARTED"] = "chain:started";
    AgentEvent["CHAIN_COMPLETED"] = "chain:completed";
})(AgentEvent || (exports.AgentEvent = AgentEvent = {}));
/**
 * Event-Driven Orchestrator
 *
 * Features:
 * - Immediate handoffs via event bus (no polling)
 * - Priority queue for urgent handoffs
 * - Pre-activation of next agent in chain
 * - Full handoff telemetry
 */
class EventDrivenOrchestrator extends events_1.EventEmitter {
    constructor(agentPool) {
        super();
        this.agentPool = agentPool;
        this.handoffQueue = [];
        this.activeChains = new Map();
        this.handoffMetrics = {
            totalHandoffs: 0,
            averageLatency: 0,
            successRate: 100,
            latencies: []
        };
        this.setupEventListeners();
    }
    /**
     * Setup event listeners for agent lifecycle
     */
    setupEventListeners() {
        // Listen for agent completions
        this.on(AgentEvent.COMPLETED, (data) => {
            this.handleAgentCompletion(data);
        });
        // Listen for handoff requests
        this.on(AgentEvent.HANDOFF, (handoff) => {
            this.handleHandoffRequest(handoff);
        });
        // Listen for errors
        this.on(AgentEvent.ERROR, (data) => {
            this.handleAgentError(data);
        });
    }
    /**
     * Start an agent activation chain
     */
    async startChain(agentIds, context) {
        const chainId = `chain-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
        const chain = {
            chainId,
            agents: agentIds,
            startTime: Date.now(),
            currentAgent: null,
            completed: false
        };
        this.activeChains.set(chainId, chain);
        logger.info(`üîó Starting agent chain: ${chainId}`, {
            agents: agentIds,
            context: context.filePath
        });
        this.emit(AgentEvent.CHAIN_STARTED, { chainId, agents: agentIds });
        // Activate first agent immediately
        await this.activateNextAgent(chainId, context);
        return chainId;
    }
    /**
     * Activate next agent in the chain
     */
    async activateNextAgent(chainId, context) {
        const chain = this.activeChains.get(chainId);
        if (!chain || chain.completed) {
            return;
        }
        // Find next agent in chain
        const currentIndex = chain.currentAgent
            ? chain.agents.indexOf(chain.currentAgent)
            : -1;
        const nextIndex = currentIndex + 1;
        if (nextIndex >= chain.agents.length) {
            // Chain complete
            this.completeChain(chainId);
            return;
        }
        const nextAgentId = chain.agents[nextIndex];
        chain.currentAgent = nextAgentId;
        const startTime = Date.now();
        try {
            // Get agent from pool (warm activation - 50% faster)
            const agent = await this.agentPool.getAgent(nextAgentId);
            // Emit activation event
            this.emit(AgentEvent.ACTIVATED, {
                agentId: nextAgentId,
                context,
                timestamp: Date.now()
            });
            logger.info(`ü§ñ Agent activated: ${nextAgentId}`, {
                chainId,
                position: `${nextIndex + 1}/${chain.agents.length}`
            });
            // Execute agent
            const result = await agent.activate(context);
            const endTime = Date.now();
            const latency = endTime - startTime;
            // Track metrics
            this.updateHandoffMetrics(latency, true);
            // Emit completion event (triggers next handoff)
            this.emit(AgentEvent.COMPLETED, {
                agentId: nextAgentId,
                context,
                result,
                timestamp: endTime
            });
            // Return agent to pool
            await this.agentPool.releaseAgent(agent);
            // Check for explicit handoffs in response
            if (result.handoffTo && result.handoffTo.length > 0) {
                this.handleExplicitHandoffs(nextAgentId, result, context);
            }
        }
        catch (error) {
            const endTime = Date.now();
            const latency = endTime - startTime;
            this.updateHandoffMetrics(latency, false);
            logger.error(`‚ùå Agent activation failed: ${nextAgentId}`, { error: error.message });
            this.emit(AgentEvent.ERROR, {
                agentId: nextAgentId,
                context,
                error,
                timestamp: endTime
            });
            // Continue chain despite error (graceful degradation)
            await this.activateNextAgent(chainId, context);
        }
    }
    /**
     * Handle agent completion and continue chain
     */
    handleAgentCompletion(data) {
        logger.info(`‚úÖ Agent completed: ${data.agentId}`);
        // Find chains this agent is part of
        for (const [chainId, chain] of this.activeChains.entries()) {
            if (chain.currentAgent === data.agentId && !chain.completed) {
                // Continue chain with next agent (immediate, no polling!)
                setImmediate(() => {
                    this.activateNextAgent(chainId, data.context);
                });
            }
        }
    }
    /**
     * Handle explicit handoff requests
     */
    handleHandoffRequest(handoff) {
        logger.info(`üîÑ Handoff request: ${handoff.fromAgent} ‚Üí ${handoff.toAgent}`, {
            priority: handoff.priority,
            reason: handoff.reason
        });
        // Add to priority queue
        this.addToQueue(handoff);
        // Process immediately if high/urgent priority
        if (handoff.priority === 'high' || handoff.priority === 'urgent') {
            setImmediate(() => this.processQueue());
        }
        else {
            // Process on next tick for medium/low priority
            process.nextTick(() => this.processQueue());
        }
    }
    /**
     * Handle explicit handoffs from agent responses
     */
    handleExplicitHandoffs(fromAgent, result, context) {
        if (!result.handoffTo || result.handoffTo.length === 0) {
            return;
        }
        for (const toAgent of result.handoffTo) {
            const priority = (result.priority === 'low' || result.priority === 'medium' ||
                result.priority === 'high' || result.priority === 'urgent')
                ? result.priority
                : 'medium';
            const handoff = {
                fromAgent,
                toAgent,
                context,
                priority,
                reason: `Explicit handoff from ${fromAgent}`,
                timestamp: Date.now(),
                metadata: result.context
            };
            this.emit(AgentEvent.HANDOFF, handoff);
        }
    }
    /**
     * Add handoff to priority queue
     */
    addToQueue(handoff) {
        // Insert based on priority
        const priorityOrder = { urgent: 0, high: 1, medium: 2, low: 3 };
        const insertIndex = this.handoffQueue.findIndex(h => priorityOrder[h.priority] > priorityOrder[handoff.priority]);
        if (insertIndex === -1) {
            this.handoffQueue.push(handoff);
        }
        else {
            this.handoffQueue.splice(insertIndex, 0, handoff);
        }
    }
    /**
     * Process handoff queue
     */
    async processQueue() {
        if (this.handoffQueue.length === 0) {
            return;
        }
        const handoff = this.handoffQueue.shift();
        const startTime = Date.now();
        try {
            // Get agent from pool
            const agent = await this.agentPool.getAgent(handoff.toAgent);
            // Emit activation
            this.emit(AgentEvent.ACTIVATED, {
                agentId: handoff.toAgent,
                context: handoff.context,
                timestamp: Date.now()
            });
            // Execute
            const result = await agent.activate(handoff.context);
            const endTime = Date.now();
            const latency = endTime - startTime;
            this.updateHandoffMetrics(latency, true);
            // Emit completion
            this.emit(AgentEvent.COMPLETED, {
                agentId: handoff.toAgent,
                context: handoff.context,
                result,
                timestamp: endTime
            });
            // Return to pool
            await this.agentPool.releaseAgent(agent);
            logger.info(`‚úÖ Handoff completed: ${handoff.fromAgent} ‚Üí ${handoff.toAgent}`, {
                latency: `${latency}ms`
            });
        }
        catch (error) {
            const endTime = Date.now();
            const latency = endTime - startTime;
            this.updateHandoffMetrics(latency, false);
            logger.error(`‚ùå Handoff failed: ${handoff.fromAgent} ‚Üí ${handoff.toAgent}`, {
                error: error.message
            });
            this.emit(AgentEvent.ERROR, {
                agentId: handoff.toAgent,
                context: handoff.context,
                error,
                timestamp: endTime
            });
        }
        // Process next in queue
        if (this.handoffQueue.length > 0) {
            setImmediate(() => this.processQueue());
        }
    }
    /**
     * Handle agent errors
     */
    handleAgentError(data) {
        logger.error(`‚ùå Agent error: ${data.agentId}`, {
            error: data.error?.message
        });
        // Find chains this agent is part of
        for (const [chainId, chain] of this.activeChains.entries()) {
            if (chain.currentAgent === data.agentId && !chain.completed) {
                // Continue chain despite error (graceful degradation)
                setImmediate(() => {
                    this.activateNextAgent(chainId, data.context);
                });
            }
        }
    }
    /**
     * Complete a chain
     */
    completeChain(chainId) {
        const chain = this.activeChains.get(chainId);
        if (!chain) {
            return;
        }
        chain.completed = true;
        const duration = Date.now() - chain.startTime;
        logger.info(`‚úÖ Chain completed: ${chainId}`, {
            agents: chain.agents.length,
            duration: `${duration}ms`
        });
        this.emit(AgentEvent.CHAIN_COMPLETED, {
            chainId,
            agents: chain.agents,
            duration
        });
        // Cleanup after 1 minute
        setTimeout(() => {
            this.activeChains.delete(chainId);
        }, 60000);
    }
    /**
     * Update handoff metrics
     */
    updateHandoffMetrics(latency, success) {
        this.handoffMetrics.totalHandoffs++;
        this.handoffMetrics.latencies.push(latency);
        // Keep last 100 latencies
        if (this.handoffMetrics.latencies.length > 100) {
            this.handoffMetrics.latencies.shift();
        }
        // Calculate average
        this.handoffMetrics.averageLatency =
            this.handoffMetrics.latencies.reduce((a, b) => a + b, 0) /
                this.handoffMetrics.latencies.length;
        // Update success rate
        const successCount = success
            ? this.handoffMetrics.totalHandoffs * (this.handoffMetrics.successRate / 100) + 1
            : this.handoffMetrics.totalHandoffs * (this.handoffMetrics.successRate / 100);
        this.handoffMetrics.successRate = (successCount / this.handoffMetrics.totalHandoffs) * 100;
    }
    /**
     * Get handoff metrics
     */
    getMetrics() {
        const targetLatency = 150; // Sprint 1 target: <150ms
        const improvement = ((500 - this.handoffMetrics.averageLatency) / 500) * 100;
        return {
            ...this.handoffMetrics,
            targetLatency,
            improvement: `${improvement.toFixed(1)}%`
        };
    }
    /**
     * Get active chains
     */
    getActiveChains() {
        return Array.from(this.activeChains.values());
    }
    /**
     * Shutdown orchestrator
     */
    async shutdown() {
        logger.info('üõë Shutting down event-driven orchestrator...');
        // Wait for active chains to complete (with timeout)
        const timeout = 10000; // 10 seconds
        const startTime = Date.now();
        while (this.activeChains.size > 0 && Date.now() - startTime < timeout) {
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        // Clear queue
        this.handoffQueue = [];
        // Remove all listeners
        this.removeAllListeners();
        logger.info('‚úÖ Event-driven orchestrator shutdown complete');
    }
}
exports.EventDrivenOrchestrator = EventDrivenOrchestrator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL25pc3NpbW1lbmFzaGUvVkVSU0FUSUwgU0RMQyBGVy9zcmMvb3JjaGVzdHJhdGlvbi9ldmVudC1kcml2ZW4tb3JjaGVzdHJhdG9yLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7O0dBU0c7OztBQUVILG1DQUFzQztBQUd0QyxrREFBb0Q7QUFFcEQsTUFBTSxNQUFNLEdBQUcsSUFBSSwwQkFBYyxFQUFFLENBQUM7QUFFcEM7O0dBRUc7QUFDSCxJQUFZLFVBUVg7QUFSRCxXQUFZLFVBQVU7SUFDcEIsMkNBQTZCLENBQUE7SUFDN0IsMkNBQTZCLENBQUE7SUFDN0IsdUNBQXlCLENBQUE7SUFDekIsbUNBQXFCLENBQUE7SUFDckIseUNBQTJCLENBQUE7SUFDM0IsNkNBQStCLENBQUE7SUFDL0IsaURBQW1DLENBQUE7QUFDckMsQ0FBQyxFQVJXLFVBQVUsMEJBQVYsVUFBVSxRQVFyQjtBQXNDRDs7Ozs7Ozs7R0FRRztBQUNILE1BQWEsdUJBQXdCLFNBQVEscUJBQVk7SUFXdkQsWUFBWSxTQUFvQjtRQUM5QixLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsY0FBYyxHQUFHO1lBQ3BCLGFBQWEsRUFBRSxDQUFDO1lBQ2hCLGNBQWMsRUFBRSxDQUFDO1lBQ2pCLFdBQVcsRUFBRSxHQUFHO1lBQ2hCLFNBQVMsRUFBRSxFQUFFO1NBQ2QsQ0FBQztRQUVGLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRDs7T0FFRztJQUNLLG1CQUFtQjtRQUN6QiwrQkFBK0I7UUFDL0IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBb0IsRUFBRSxFQUFFO1lBQ3JELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJ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ZS9WRVJTQVRJTCBTRExDIEZXL3NyYy9vcmNoZXN0cmF0aW9uL2V2ZW50LWRyaXZlbi1vcmNoZXN0cmF0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFdmVudC1Ecml2ZW4gQWdlbnQgT3JjaGVzdHJhdG9yXG4gKlxuICogUmVwbGFjZXMgcG9sbGluZyB3aXRoIGV2ZW50LWRyaXZlbiBoYW5kb2ZmcyBmb3IgaW1tZWRpYXRlIGFnZW50IGFjdGl2YXRpb24uXG4gKiBUYXJnZXQ6IDMwJSBmYXN0ZXIgd29ya2Zsb3cgZXhlY3V0aW9uICg1MDBtcyDihpIgMTUwbXMgaGFuZG9mZiBsYXRlbmN5KVxuICpcbiAqIEBtb2R1bGUgRXZlbnREcml2ZW5PcmNoZXN0cmF0b3JcbiAqIEB2ZXJzaW9uIDUuMC4wXG4gKiBAc3ByaW50IFNwcmludCAxIERheSAzLTRcbiAqL1xuXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuaW1wb3J0IHsgQWdlbnRSZXNwb25zZSwgQWdlbnRBY3RpdmF0aW9uQ29udGV4dCB9IGZyb20gJy4uL2FnZW50cy9iYXNlLWFnZW50LmpzJztcbmltcG9ydCB7IEFnZW50UG9vbCB9IGZyb20gJy4uL2FnZW50cy9hZ2VudC1wb29sLmpzJztcbmltcG9ydCB7IFZFUlNBVElMTG9nZ2VyIH0gZnJvbSAnLi4vdXRpbHMvbG9nZ2VyLmpzJztcblxuY29uc3QgbG9nZ2VyID0gbmV3IFZFUlNBVElMTG9nZ2VyKCk7XG5cbi8qKlxuICogQWdlbnQgbGlmZWN5Y2xlIGV2ZW50c1xuICovXG5leHBvcnQgZW51bSBBZ2VudEV2ZW50IHtcbiAgQUNUSVZBVEVEID0gJ2FnZW50OmFjdGl2YXRlZCcsXG4gIENPTVBMRVRFRCA9ICdhZ2VudDpjb21wbGV0ZWQnLFxuICBIQU5ET0ZGID0gJ2FnZW50OmhhbmRvZmYnLFxuICBFUlJPUiA9ICdhZ2VudDplcnJvcicsXG4gIFBST0dSRVNTID0gJ2FnZW50OnByb2dyZXNzJyxcbiAgQ0hBSU5fU1RBUlRFRCA9ICdjaGFpbjpzdGFydGVkJyxcbiAgQ0hBSU5fQ09NUExFVEVEID0gJ2NoYWluOmNvbXBsZXRlZCdcbn1cblxuLyoqXG4gKiBIYW5kb2ZmIHJlcXVlc3Qgc3RydWN0dXJlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSGFuZG9mZlJlcXVlc3Qge1xuICBmcm9tQWdlbnQ6IHN0cmluZztcbiAgdG9BZ2VudDogc3RyaW5nO1xuICBjb250ZXh0OiBBZ2VudEFjdGl2YXRpb25Db250ZXh0O1xuICBwcmlvcml0eTogJ2xvdycgfCAnbWVkaXVtJyB8ICdoaWdoJyB8ICd1cmdlbnQnO1xuICByZWFzb246IHN0cmluZztcbiAgdGltZXN0YW1wOiBudW1iZXI7XG4gIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55Pjtcbn1cblxuLyoqXG4gKiBBZ2VudCBldmVudCBkYXRhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWdlbnRFdmVudERhdGEge1xuICBhZ2VudElkOiBzdHJpbmc7XG4gIGNvbnRleHQ6IEFnZW50QWN0aXZhdGlvbkNvbnRleHQ7XG4gIHJlc3VsdD86IEFnZW50UmVzcG9uc2U7XG4gIGVycm9yPzogRXJyb3I7XG4gIHByb2dyZXNzPzogbnVtYmVyO1xuICB0aW1lc3RhbXA6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBIYW5kb2ZmIGNoYWluIHRyYWNraW5nXG4gKi9cbmludGVyZmFjZSBIYW5kb2ZmQ2hhaW4ge1xuICBjaGFpbklkOiBzdHJpbmc7XG4gIGFnZW50czogc3RyaW5nW107XG4gIHN0YXJ0VGltZTogbnVtYmVyO1xuICBjdXJyZW50QWdlbnQ6IHN0cmluZyB8IG51bGw7XG4gIGNvbXBsZXRlZDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBFdmVudC1Ecml2ZW4gT3JjaGVzdHJhdG9yXG4gKlxuICogRmVhdHVyZXM6XG4gKiAtIEltbWVkaWF0ZSBoYW5kb2ZmcyB2aWEgZXZlbnQgYnVzIChubyBwb2xsaW5nKVxuICogLSBQcmlvcml0eSBxdWV1ZSBmb3IgdXJnZW50IGhhbmRvZmZzXG4gKiAtIFByZS1hY3RpdmF0aW9uIG9mIG5leHQgYWdlbnQgaW4gY2hhaW5cbiAqIC0gRnVsbCBoYW5kb2ZmIHRlbGVtZXRyeVxuICovXG5leHBvcnQgY2xhc3MgRXZlbnREcml2ZW5PcmNoZXN0cmF0b3IgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBwcml2YXRlIGFnZW50UG9vbDogQWdlbnRQb29sO1xuICBwcml2YXRlIGhhbmRvZmZRdWV1ZTogSGFuZG9mZlJlcXVlc3RbXTtcbiAgcHJpdmF0ZSBhY3RpdmVDaGFpbnM6IE1hcDxzdHJpbmcsIEhhbmRvZmZDaGFpbj47XG4gIHByaXZhdGUgaGFuZG9mZk1ldHJpY3M6IHtcbiAgICB0b3RhbEhhbmRvZmZzOiBudW1iZXI7XG4gICAgYXZlcmFnZUxhdGVuY3k6IG51bWJlcjtcbiAgICBzdWNjZXNzUmF0ZTogbnVtYmVyO1xuICAgIGxhdGVuY2llczogbnVtYmVyW107XG4gIH07XG5cbiAgY29uc3RydWN0b3IoYWdlbnRQb29sOiBBZ2VudFBvb2wpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuYWdlbnRQb29sID0gYWdlbnRQb29sO1xuICAgIHRoaXMuaGFuZG9mZlF1ZXVlID0gW107XG4gICAgdGhpcy5hY3RpdmVDaGFpbnMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5oYW5kb2ZmTWV0cmljcyA9IHtcbiAgICAgIHRvdGFsSGFuZG9mZnM6IDAsXG4gICAgICBhdmVyYWdlTGF0ZW5jeTogMCxcbiAgICAgIHN1Y2Nlc3NSYXRlOiAxMDAsXG4gICAgICBsYXRlbmNpZXM6IFtdXG4gICAgfTtcblxuICAgIHRoaXMuc2V0dXBFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHVwIGV2ZW50IGxpc3RlbmVycyBmb3IgYWdlbnQgbGlmZWN5Y2xlXG4gICAqL1xuICBwcml2YXRlIHNldHVwRXZlbnRMaXN0ZW5lcnMoKTogdm9pZCB7XG4gICAgLy8gTGlzdGVuIGZvciBhZ2VudCBjb21wbGV0aW9uc1xuICAgIHRoaXMub24oQWdlbnRFdmVudC5DT01QTEVURUQsIChkYXRhOiBBZ2VudEV2ZW50RGF0YSkgPT4ge1xuICAgICAgdGhpcy5oYW5kbGVBZ2VudENvbXBsZXRpb24oZGF0YSk7XG4gICAgfSk7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIGhhbmRvZmYgcmVxdWVzdHNcbiAgICB0aGlzLm9uKEFnZW50RXZlbnQuSEFORE9GRiwgKGhhbmRvZmY6IEhhbmRvZmZSZXF1ZXN0KSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZUhhbmRvZmZSZXF1ZXN0KGhhbmRvZmYpO1xuICAgIH0pO1xuXG4gICAgLy8gTGlzdGVuIGZvciBlcnJvcnNcbiAgICB0aGlzLm9uKEFnZW50RXZlbnQuRVJST1IsIChkYXRhOiBBZ2VudEV2ZW50RGF0YSkgPT4ge1xuICAgICAgdGhpcy5oYW5kbGVBZ2VudEVycm9yKGRhdGEpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGFuIGFnZW50IGFjdGl2YXRpb24gY2hhaW5cbiAgICovXG4gIGFzeW5jIHN0YXJ0Q2hhaW4oXG4gICAgYWdlbnRJZHM6IHN0cmluZ1tdLFxuICAgIGNvbnRleHQ6IEFnZW50QWN0aXZhdGlvbkNvbnRleHRcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBjaGFpbklkID0gYGNoYWluLSR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSl9YDtcblxuICAgIGNvbnN0IGNoYWluOiBIYW5kb2ZmQ2hhaW4gPSB7XG4gICAgICBjaGFpbklkLFxuICAgICAgYWdlbnRzOiBhZ2VudElkcyxcbiAgICAgIHN0YXJ0VGltZTogRGF0ZS5ub3coKSxcbiAgICAgIGN1cnJlbnRBZ2VudDogbnVsbCxcbiAgICAgIGNvbXBsZXRlZDogZmFsc2VcbiAgICB9O1xuXG4gICAgdGhpcy5hY3RpdmVDaGFpbnMuc2V0KGNoYWluSWQsIGNoYWluKTtcblxuICAgIGxvZ2dlci5pbmZvKGDwn5SXIFN0YXJ0aW5nIGFnZW50IGNoYWluOiAke2NoYWluSWR9YCwge1xuICAgICAgYWdlbnRzOiBhZ2VudElkcyxcbiAgICAgIGNvbnRleHQ6IGNvbnRleHQuZmlsZVBhdGhcbiAgICB9KTtcblxuICAgIHRoaXMuZW1pdChBZ2VudEV2ZW50LkNIQUlOX1NUQVJURUQsIHsgY2hhaW5JZCwgYWdlbnRzOiBhZ2VudElkcyB9KTtcblxuICAgIC8vIEFjdGl2YXRlIGZpcnN0IGFnZW50IGltbWVkaWF0ZWx5XG4gICAgYXdhaXQgdGhpcy5hY3RpdmF0ZU5leHRBZ2VudChjaGFpbklkLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBjaGFpbklkO1xuICB9XG5cbiAgLyoqXG4gICAqIEFjdGl2YXRlIG5leHQgYWdlbnQgaW4gdGhlIGNoYWluXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGFjdGl2YXRlTmV4dEFnZW50KFxuICAgIGNoYWluSWQ6IHN0cmluZyxcbiAgICBjb250ZXh0OiBBZ2VudEFjdGl2YXRpb25Db250ZXh0XG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGNoYWluID0gdGhpcy5hY3RpdmVDaGFpbnMuZ2V0KGNoYWluSWQpO1xuICAgIGlmICghY2hhaW4gfHwgY2hhaW4uY29tcGxldGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRmluZCBuZXh0IGFnZW50IGluIGNoYWluXG4gICAgY29uc3QgY3VycmVudEluZGV4ID0gY2hhaW4uY3VycmVudEFnZW50XG4gICAgICA/IGNoYWluLmFnZW50cy5pbmRleE9mKGNoYWluLmN1cnJlbnRBZ2VudClcbiAgICAgIDogLTE7XG4gICAgY29uc3QgbmV4dEluZGV4ID0gY3VycmVudEluZGV4ICsgMTtcblxuICAgIGlmIChuZXh0SW5kZXggPj0gY2hhaW4uYWdlbnRzLmxlbmd0aCkge1xuICAgICAgLy8gQ2hhaW4gY29tcGxldGVcbiAgICAgIHRoaXMuY29tcGxldGVDaGFpbihjaGFpbklkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBuZXh0QWdlbnRJZCA9IGNoYWluLmFnZW50c1tuZXh0SW5kZXhdO1xuICAgIGNoYWluLmN1cnJlbnRBZ2VudCA9IG5leHRBZ2VudElkO1xuXG4gICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBHZXQgYWdlbnQgZnJvbSBwb29sICh3YXJtIGFjdGl2YXRpb24gLSA1MCUgZmFzdGVyKVxuICAgICAgY29uc3QgYWdlbnQgPSBhd2FpdCB0aGlzLmFnZW50UG9vbC5nZXRBZ2VudChuZXh0QWdlbnRJZCk7XG5cbiAgICAgIC8vIEVtaXQgYWN0aXZhdGlvbiBldmVudFxuICAgICAgdGhpcy5lbWl0KEFnZW50RXZlbnQuQUNUSVZBVEVELCB7XG4gICAgICAgIGFnZW50SWQ6IG5leHRBZ2VudElkLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICAgIH0gYXMgQWdlbnRFdmVudERhdGEpO1xuXG4gICAgICBsb2dnZXIuaW5mbyhg8J+kliBBZ2VudCBhY3RpdmF0ZWQ6ICR7bmV4dEFnZW50SWR9YCwge1xuICAgICAgICBjaGFpbklkLFxuICAgICAgICBwb3NpdGlvbjogYCR7bmV4dEluZGV4ICsgMX0vJHtjaGFpbi5hZ2VudHMubGVuZ3RofWBcbiAgICAgIH0pO1xuXG4gICAgICAvLyBFeGVjdXRlIGFnZW50XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhZ2VudC5hY3RpdmF0ZShjb250ZXh0KTtcblxuICAgICAgY29uc3QgZW5kVGltZSA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCBsYXRlbmN5ID0gZW5kVGltZSAtIHN0YXJ0VGltZTtcblxuICAgICAgLy8gVHJhY2sgbWV0cmljc1xuICAgICAgdGhpcy51cGRhdGVIYW5kb2ZmTWV0cmljcyhsYXRlbmN5LCB0cnVlKTtcblxuICAgICAgLy8gRW1pdCBjb21wbGV0aW9uIGV2ZW50ICh0cmlnZ2VycyBuZXh0IGhhbmRvZmYpXG4gICAgICB0aGlzLmVtaXQoQWdlbnRFdmVudC5DT01QTEVURUQsIHtcbiAgICAgICAgYWdlbnRJZDogbmV4dEFnZW50SWQsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIHJlc3VsdCxcbiAgICAgICAgdGltZXN0YW1wOiBlbmRUaW1lXG4gICAgICB9IGFzIEFnZW50RXZlbnREYXRhKTtcblxuICAgICAgLy8gUmV0dXJuIGFnZW50IHRvIHBvb2xcbiAgICAgIGF3YWl0IHRoaXMuYWdlbnRQb29sLnJlbGVhc2VBZ2VudChhZ2VudCk7XG5cbiAgICAgIC8vIENoZWNrIGZvciBleHBsaWNpdCBoYW5kb2ZmcyBpbiByZXNwb25zZVxuICAgICAgaWYgKHJlc3VsdC5oYW5kb2ZmVG8gJiYgcmVzdWx0LmhhbmRvZmZUby5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlRXhwbGljaXRIYW5kb2ZmcyhuZXh0QWdlbnRJZCwgcmVzdWx0LCBjb250ZXh0KTtcbiAgICAgIH1cblxuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnN0IGVuZFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgY29uc3QgbGF0ZW5jeSA9IGVuZFRpbWUgLSBzdGFydFRpbWU7XG5cbiAgICAgIHRoaXMudXBkYXRlSGFuZG9mZk1ldHJpY3MobGF0ZW5jeSwgZmFsc2UpO1xuXG4gICAgICBsb2dnZXIuZXJyb3IoYOKdjCBBZ2VudCBhY3RpdmF0aW9uIGZhaWxlZDogJHtuZXh0QWdlbnRJZH1gLCB7IGVycm9yOiBlcnJvci5tZXNzYWdlIH0pO1xuXG4gICAgICB0aGlzLmVtaXQoQWdlbnRFdmVudC5FUlJPUiwge1xuICAgICAgICBhZ2VudElkOiBuZXh0QWdlbnRJZCxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgZXJyb3IsXG4gICAgICAgIHRpbWVzdGFtcDogZW5kVGltZVxuICAgICAgfSBhcyBBZ2VudEV2ZW50RGF0YSk7XG5cbiAgICAgIC8vIENvbnRpbnVlIGNoYWluIGRlc3BpdGUgZXJyb3IgKGdyYWNlZnVsIGRlZ3JhZGF0aW9uKVxuICAgICAgYXdhaXQgdGhpcy5hY3RpdmF0ZU5leHRBZ2VudChjaGFpbklkLCBjb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIGFnZW50IGNvbXBsZXRpb24gYW5kIGNvbnRpbnVlIGNoYWluXG4gICAqL1xuICBwcml2YXRlIGhhbmRsZUFnZW50Q29tcGxldGlvbihkYXRhOiBBZ2VudEV2ZW50RGF0YSk6IHZvaWQge1xuICAgIGxvZ2dlci5pbmZvKGDinIUgQWdlbnQgY29tcGxldGVkOiAke2RhdGEuYWdlbnRJZH1gKTtcblxuICAgIC8vIEZpbmQgY2hhaW5zIHRoaXMgYWdlbnQgaXMgcGFydCBvZlxuICAgIGZvciAoY29uc3QgW2NoYWluSWQsIGNoYWluXSBvZiB0aGlzLmFjdGl2ZUNoYWlucy5lbnRyaWVzKCkpIHtcbiAgICAgIGlmIChjaGFpbi5jdXJyZW50QWdlbnQgPT09IGRhdGEuYWdlbnRJZCAmJiAhY2hhaW4uY29tcGxldGVkKSB7XG4gICAgICAgIC8vIENvbnRpbnVlIGNoYWluIHdpdGggbmV4dCBhZ2VudCAoaW1tZWRpYXRlLCBubyBwb2xsaW5nISlcbiAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgICAgICB0aGlzLmFjdGl2YXRlTmV4dEFnZW50KGNoYWluSWQsIGRhdGEuY29udGV4dCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgZXhwbGljaXQgaGFuZG9mZiByZXF1ZXN0c1xuICAgKi9cbiAgcHJpdmF0ZSBoYW5kbGVIYW5kb2ZmUmVxdWVzdChoYW5kb2ZmOiBIYW5kb2ZmUmVxdWVzdCk6IHZvaWQge1xuICAgIGxvZ2dlci5pbmZvKGDwn5SEIEhhbmRvZmYgcmVxdWVzdDogJHtoYW5kb2ZmLmZyb21BZ2VudH0g4oaSICR7aGFuZG9mZi50b0FnZW50fWAsIHtcbiAgICAgIHByaW9yaXR5OiBoYW5kb2ZmLnByaW9yaXR5LFxuICAgICAgcmVhc29uOiBoYW5kb2ZmLnJlYXNvblxuICAgIH0pO1xuXG4gICAgLy8gQWRkIHRvIHByaW9yaXR5IHF1ZXVlXG4gICAgdGhpcy5hZGRUb1F1ZXVlKGhhbmRvZmYpO1xuXG4gICAgLy8gUHJvY2VzcyBpbW1lZGlhdGVseSBpZiBoaWdoL3VyZ2VudCBwcmlvcml0eVxuICAgIGlmIChoYW5kb2ZmLnByaW9yaXR5ID09PSAnaGlnaCcgfHwgaGFuZG9mZi5wcmlvcml0eSA9PT0gJ3VyZ2VudCcpIHtcbiAgICAgIHNldEltbWVkaWF0ZSgoKSA9PiB0aGlzLnByb2Nlc3NRdWV1ZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUHJvY2VzcyBvbiBuZXh0IHRpY2sgZm9yIG1lZGl1bS9sb3cgcHJpb3JpdHlcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gdGhpcy5wcm9jZXNzUXVldWUoKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBleHBsaWNpdCBoYW5kb2ZmcyBmcm9tIGFnZW50IHJlc3BvbnNlc1xuICAgKi9cbiAgcHJpdmF0ZSBoYW5kbGVFeHBsaWNpdEhhbmRvZmZzKFxuICAgIGZyb21BZ2VudDogc3RyaW5nLFxuICAgIHJlc3VsdDogQWdlbnRSZXNwb25zZSxcbiAgICBjb250ZXh0OiBBZ2VudEFjdGl2YXRpb25Db250ZXh0XG4gICk6IHZvaWQge1xuICAgIGlmICghcmVzdWx0LmhhbmRvZmZUbyB8fCByZXN1bHQuaGFuZG9mZlRvLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgdG9BZ2VudCBvZiByZXN1bHQuaGFuZG9mZlRvKSB7XG4gICAgICBjb25zdCBwcmlvcml0eSA9IChyZXN1bHQucHJpb3JpdHkgPT09ICdsb3cnIHx8IHJlc3VsdC5wcmlvcml0eSA9PT0gJ21lZGl1bScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnByaW9yaXR5ID09PSAnaGlnaCcgfHwgcmVzdWx0LnByaW9yaXR5ID09PSAndXJnZW50JylcbiAgICAgICAgPyByZXN1bHQucHJpb3JpdHlcbiAgICAgICAgOiAnbWVkaXVtJztcblxuICAgICAgY29uc3QgaGFuZG9mZjogSGFuZG9mZlJlcXVlc3QgPSB7XG4gICAgICAgIGZyb21BZ2VudCxcbiAgICAgICAgdG9BZ2VudCxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgcHJpb3JpdHksXG4gICAgICAgIHJlYXNvbjogYEV4cGxpY2l0IGhhbmRvZmYgZnJvbSAke2Zyb21BZ2VudH1gLFxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgIG1ldGFkYXRhOiByZXN1bHQuY29udGV4dFxuICAgICAgfTtcblxuICAgICAgdGhpcy5lbWl0KEFnZW50RXZlbnQuSEFORE9GRiwgaGFuZG9mZik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBoYW5kb2ZmIHRvIHByaW9yaXR5IHF1ZXVlXG4gICAqL1xuICBwcml2YXRlIGFkZFRvUXVldWUoaGFuZG9mZjogSGFuZG9mZlJlcXVlc3QpOiB2b2lkIHtcbiAgICAvLyBJbnNlcnQgYmFzZWQgb24gcHJpb3JpdHlcbiAgICBjb25zdCBwcmlvcml0eU9yZGVyID0geyB1cmdlbnQ6IDAsIGhpZ2g6IDEsIG1lZGl1bTogMiwgbG93OiAzIH07XG4gICAgY29uc3QgaW5zZXJ0SW5kZXggPSB0aGlzLmhhbmRvZmZRdWV1ZS5maW5kSW5kZXgoXG4gICAgICBoID0+IHByaW9yaXR5T3JkZXJbaC5wcmlvcml0eV0gPiBwcmlvcml0eU9yZGVyW2hhbmRvZmYucHJpb3JpdHldXG4gICAgKTtcblxuICAgIGlmIChpbnNlcnRJbmRleCA9PT0gLTEpIHtcbiAgICAgIHRoaXMuaGFuZG9mZlF1ZXVlLnB1c2goaGFuZG9mZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGFuZG9mZlF1ZXVlLnNwbGljZShpbnNlcnRJbmRleCwgMCwgaGFuZG9mZik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgaGFuZG9mZiBxdWV1ZVxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBwcm9jZXNzUXVldWUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMuaGFuZG9mZlF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbmRvZmYgPSB0aGlzLmhhbmRvZmZRdWV1ZS5zaGlmdCgpITtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIEdldCBhZ2VudCBmcm9tIHBvb2xcbiAgICAgIGNvbnN0IGFnZW50ID0gYXdhaXQgdGhpcy5hZ2VudFBvb2wuZ2V0QWdlbnQoaGFuZG9mZi50b0FnZW50KTtcblxuICAgICAgLy8gRW1pdCBhY3RpdmF0aW9uXG4gICAgICB0aGlzLmVtaXQoQWdlbnRFdmVudC5BQ1RJVkFURUQsIHtcbiAgICAgICAgYWdlbnRJZDogaGFuZG9mZi50b0FnZW50LFxuICAgICAgICBjb250ZXh0OiBoYW5kb2ZmLmNvbnRleHQsXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAgICAgfSBhcyBBZ2VudEV2ZW50RGF0YSk7XG5cbiAgICAgIC8vIEV4ZWN1dGVcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFnZW50LmFjdGl2YXRlKGhhbmRvZmYuY29udGV4dCk7XG5cbiAgICAgIGNvbnN0IGVuZFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgY29uc3QgbGF0ZW5jeSA9IGVuZFRpbWUgLSBzdGFydFRpbWU7XG5cbiAgICAgIHRoaXMudXBkYXRlSGFuZG9mZk1ldHJpY3MobGF0ZW5jeSwgdHJ1ZSk7XG5cbiAgICAgIC8vIEVtaXQgY29tcGxldGlvblxuICAgICAgdGhpcy5lbWl0KEFnZW50RXZlbnQuQ09NUExFVEVELCB7XG4gICAgICAgIGFnZW50SWQ6IGhhbmRvZmYudG9BZ2VudCxcbiAgICAgICAgY29udGV4dDogaGFuZG9mZi5jb250ZXh0LFxuICAgICAgICByZXN1bHQsXG4gICAgICAgIHRpbWVzdGFtcDogZW5kVGltZVxuICAgICAgfSBhcyBBZ2VudEV2ZW50RGF0YSk7XG5cbiAgICAgIC8vIFJldHVybiB0byBwb29sXG4gICAgICBhd2FpdCB0aGlzLmFnZW50UG9vbC5yZWxlYXNlQWdlbnQoYWdlbnQpO1xuXG4gICAgICBsb2dnZXIuaW5mbyhg4pyFIEhhbmRvZmYgY29tcGxldGVkOiAke2hhbmRvZmYuZnJvbUFnZW50fSDihpIgJHtoYW5kb2ZmLnRvQWdlbnR9YCwge1xuICAgICAgICBsYXRlbmN5OiBgJHtsYXRlbmN5fW1zYFxuICAgICAgfSk7XG5cbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zdCBlbmRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIGNvbnN0IGxhdGVuY3kgPSBlbmRUaW1lIC0gc3RhcnRUaW1lO1xuXG4gICAgICB0aGlzLnVwZGF0ZUhhbmRvZmZNZXRyaWNzKGxhdGVuY3ksIGZhbHNlKTtcblxuICAgICAgbG9nZ2VyLmVycm9yKGDinYwgSGFuZG9mZiBmYWlsZWQ6ICR7aGFuZG9mZi5mcm9tQWdlbnR9IOKGkiAke2hhbmRvZmYudG9BZ2VudH1gLCB7XG4gICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5lbWl0KEFnZW50RXZlbnQuRVJST1IsIHtcbiAgICAgICAgYWdlbnRJZDogaGFuZG9mZi50b0FnZW50LFxuICAgICAgICBjb250ZXh0OiBoYW5kb2ZmLmNvbnRleHQsXG4gICAgICAgIGVycm9yLFxuICAgICAgICB0aW1lc3RhbXA6IGVuZFRpbWVcbiAgICAgIH0gYXMgQWdlbnRFdmVudERhdGEpO1xuICAgIH1cblxuICAgIC8vIFByb2Nlc3MgbmV4dCBpbiBxdWV1ZVxuICAgIGlmICh0aGlzLmhhbmRvZmZRdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICBzZXRJbW1lZGlhdGUoKCkgPT4gdGhpcy5wcm9jZXNzUXVldWUoKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBhZ2VudCBlcnJvcnNcbiAgICovXG4gIHByaXZhdGUgaGFuZGxlQWdlbnRFcnJvcihkYXRhOiBBZ2VudEV2ZW50RGF0YSk6IHZvaWQge1xuICAgIGxvZ2dlci5lcnJvcihg4p2MIEFnZW50IGVycm9yOiAke2RhdGEuYWdlbnRJZH1gLCB7XG4gICAgICBlcnJvcjogZGF0YS5lcnJvcj8ubWVzc2FnZVxuICAgIH0pO1xuXG4gICAgLy8gRmluZCBjaGFpbnMgdGhpcyBhZ2VudCBpcyBwYXJ0IG9mXG4gICAgZm9yIChjb25zdCBbY2hhaW5JZCwgY2hhaW5dIG9mIHRoaXMuYWN0aXZlQ2hhaW5zLmVudHJpZXMoKSkge1xuICAgICAgaWYgKGNoYWluLmN1cnJlbnRBZ2VudCA9PT0gZGF0YS5hZ2VudElkICYmICFjaGFpbi5jb21wbGV0ZWQpIHtcbiAgICAgICAgLy8gQ29udGludWUgY2hhaW4gZGVzcGl0ZSBlcnJvciAoZ3JhY2VmdWwgZGVncmFkYXRpb24pXG4gICAgICAgIHNldEltbWVkaWF0ZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5hY3RpdmF0ZU5leHRBZ2VudChjaGFpbklkLCBkYXRhLmNvbnRleHQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29tcGxldGUgYSBjaGFpblxuICAgKi9cbiAgcHJpdmF0ZSBjb21wbGV0ZUNoYWluKGNoYWluSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGNoYWluID0gdGhpcy5hY3RpdmVDaGFpbnMuZ2V0KGNoYWluSWQpO1xuICAgIGlmICghY2hhaW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjaGFpbi5jb21wbGV0ZWQgPSB0cnVlO1xuICAgIGNvbnN0IGR1cmF0aW9uID0gRGF0ZS5ub3coKSAtIGNoYWluLnN0YXJ0VGltZTtcblxuICAgIGxvZ2dlci5pbmZvKGDinIUgQ2hhaW4gY29tcGxldGVkOiAke2NoYWluSWR9YCwge1xuICAgICAgYWdlbnRzOiBjaGFpbi5hZ2VudHMubGVuZ3RoLFxuICAgICAgZHVyYXRpb246IGAke2R1cmF0aW9ufW1zYFxuICAgIH0pO1xuXG4gICAgdGhpcy5lbWl0KEFnZW50RXZlbnQuQ0hBSU5fQ09NUExFVEVELCB7XG4gICAgICBjaGFpbklkLFxuICAgICAgYWdlbnRzOiBjaGFpbi5hZ2VudHMsXG4gICAgICBkdXJhdGlvblxuICAgIH0pO1xuXG4gICAgLy8gQ2xlYW51cCBhZnRlciAxIG1pbnV0ZVxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5hY3RpdmVDaGFpbnMuZGVsZXRlKGNoYWluSWQpO1xuICAgIH0sIDYwMDAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgaGFuZG9mZiBtZXRyaWNzXG4gICAqL1xuICBwcml2YXRlIHVwZGF0ZUhhbmRvZmZNZXRyaWNzKGxhdGVuY3k6IG51bWJlciwgc3VjY2VzczogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuaGFuZG9mZk1ldHJpY3MudG90YWxIYW5kb2ZmcysrO1xuICAgIHRoaXMuaGFuZG9mZk1ldHJpY3MubGF0ZW5jaWVzLnB1c2gobGF0ZW5jeSk7XG5cbiAgICAvLyBLZWVwIGxhc3QgMTAwIGxhdGVuY2llc1xuICAgIGlmICh0aGlzLmhhbmRvZmZNZXRyaWNzLmxhdGVuY2llcy5sZW5ndGggPiAxMDApIHtcbiAgICAgIHRoaXMuaGFuZG9mZk1ldHJpY3MubGF0ZW5jaWVzLnNoaWZ0KCk7XG4gICAgfVxuXG4gICAgLy8gQ2FsY3VsYXRlIGF2ZXJhZ2VcbiAgICB0aGlzLmhhbmRvZmZNZXRyaWNzLmF2ZXJhZ2VMYXRlbmN5ID1cbiAgICAgIHRoaXMuaGFuZG9mZk1ldHJpY3MubGF0ZW5jaWVzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApIC9cbiAgICAgIHRoaXMuaGFuZG9mZk1ldHJpY3MubGF0ZW5jaWVzLmxlbmd0aDtcblxuICAgIC8vIFVwZGF0ZSBzdWNjZXNzIHJhdGVcbiAgICBjb25zdCBzdWNjZXNzQ291bnQgPSBzdWNjZXNzXG4gICAgICA/IHRoaXMuaGFuZG9mZk1ldHJpY3MudG90YWxIYW5kb2ZmcyAqICh0aGlzLmhhbmRvZmZNZXRyaWNzLnN1Y2Nlc3NSYXRlIC8gMTAwKSArIDFcbiAgICAgIDogdGhpcy5oYW5kb2ZmTWV0cmljcy50b3RhbEhhbmRvZmZzICogKHRoaXMuaGFuZG9mZk1ldHJpY3Muc3VjY2Vzc1JhdGUgLyAxMDApO1xuXG4gICAgdGhpcy5oYW5kb2ZmTWV0cmljcy5zdWNjZXNzUmF0ZSA9IChzdWNjZXNzQ291bnQgLyB0aGlzLmhhbmRvZmZNZXRyaWNzLnRvdGFsSGFuZG9mZnMpICogMTAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBoYW5kb2ZmIG1ldHJpY3NcbiAgICovXG4gIGdldE1ldHJpY3MoKToge1xuICAgIHRvdGFsSGFuZG9mZnM6IG51bWJlcjtcbiAgICBhdmVyYWdlTGF0ZW5jeTogbnVtYmVyO1xuICAgIHN1Y2Nlc3NSYXRlOiBudW1iZXI7XG4gICAgdGFyZ2V0TGF0ZW5jeTogbnVtYmVyO1xuICAgIGltcHJvdmVtZW50OiBzdHJpbmc7XG4gIH0ge1xuICAgIGNvbnN0IHRhcmdldExhdGVuY3kgPSAxNTA7IC8vIFNwcmludCAxIHRhcmdldDogPDE1MG1zXG4gICAgY29uc3QgaW1wcm92ZW1lbnQgPSAoKDUwMCAtIHRoaXMuaGFuZG9mZk1ldHJpY3MuYXZlcmFnZUxhdGVuY3kpIC8gNTAwKSAqIDEwMDtcblxuICAgIHJldHVybiB7XG4gICAgICAuLi50aGlzLmhhbmRvZmZNZXRyaWNzLFxuICAgICAgdGFyZ2V0TGF0ZW5jeSxcbiAgICAgIGltcHJvdmVtZW50OiBgJHtpbXByb3ZlbWVudC50b0ZpeGVkKDEpfSVgXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWN0aXZlIGNoYWluc1xuICAgKi9cbiAgZ2V0QWN0aXZlQ2hhaW5zKCk6IEhhbmRvZmZDaGFpbltdIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmFjdGl2ZUNoYWlucy52YWx1ZXMoKSk7XG4gIH1cblxuICAvKipcbiAgICogU2h1dGRvd24gb3JjaGVzdHJhdG9yXG4gICAqL1xuICBhc3luYyBzaHV0ZG93bigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBsb2dnZXIuaW5mbygn8J+bkSBTaHV0dGluZyBkb3duIGV2ZW50LWRyaXZlbiBvcmNoZXN0cmF0b3IuLi4nKTtcblxuICAgIC8vIFdhaXQgZm9yIGFjdGl2ZSBjaGFpbnMgdG8gY29tcGxldGUgKHdpdGggdGltZW91dClcbiAgICBjb25zdCB0aW1lb3V0ID0gMTAwMDA7IC8vIDEwIHNlY29uZHNcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgd2hpbGUgKHRoaXMuYWN0aXZlQ2hhaW5zLnNpemUgPiAwICYmIERhdGUubm93KCkgLSBzdGFydFRpbWUgPCB0aW1lb3V0KSB7XG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwKSk7XG4gICAgfVxuXG4gICAgLy8gQ2xlYXIgcXVldWVcbiAgICB0aGlzLmhhbmRvZmZRdWV1ZSA9IFtdO1xuXG4gICAgLy8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnNcbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuXG4gICAgbG9nZ2VyLmluZm8oJ+KchSBFdmVudC1kcml2ZW4gb3JjaGVzdHJhdG9yIHNodXRkb3duIGNvbXBsZXRlJyk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==