5a268866714ca1d2fa3019303f40558a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.agentRegistry = exports.log = exports.AgentRegistry = void 0;
const enhanced_maria_js_1 = require("./enhanced-maria.js");
const enhanced_james_js_1 = require("./enhanced-james.js");
const enhanced_marcus_js_1 = require("./enhanced-marcus.js");
const sarah_pm_js_1 = require("./sarah-pm.js");
const alex_ba_js_1 = require("./alex-ba.js");
const dr_ai_ml_js_1 = require("./dr-ai-ml.js");
const devops_dan_js_1 = require("./devops-dan.js");
const security_sam_js_1 = require("./security-sam.js");
const architecture_dan_js_1 = require("./architecture-dan.js");
const deployment_orchestrator_js_1 = require("./deployment-orchestrator.js");
const introspective_agent_js_1 = require("./introspective-agent.js");
const simulation_qa_js_1 = require("./simulation-qa.js");
class AgentRegistry {
    constructor(logger, skipAutoRegister = false) {
        this.logger = logger;
        this.agents = new Map();
        if (!skipAutoRegister) {
            this.registerAllAgents();
        }
    }
    registerAllAgents() {
        this.agents.set('enhanced-maria', new enhanced_maria_js_1.EnhancedMaria());
        this.agents.set('enhanced-james', new enhanced_james_js_1.EnhancedJames());
        this.agents.set('enhanced-marcus', new enhanced_marcus_js_1.EnhancedMarcus());
        this.agents.set('sarah-pm', new sarah_pm_js_1.SarahPm());
        this.agents.set('alex-ba', new alex_ba_js_1.AlexBa());
        this.agents.set('dr-ai-ml', new dr_ai_ml_js_1.DrAiMl());
        this.agents.set('devops-dan', new devops_dan_js_1.DevopsDan());
        this.agents.set('security-sam', new security_sam_js_1.SecuritySam());
        this.agents.set('architecture-dan', new architecture_dan_js_1.ArchitectureDan());
        this.agents.set('deployment-orchestrator', new deployment_orchestrator_js_1.DeploymentOrchestrator());
        this.agents.set('introspective-agent', new introspective_agent_js_1.IntrospectiveAgent());
        this.agents.set('simulation-qa', new simulation_qa_js_1.SimulationQa());
    }
    getAgent(id) {
        return this.agents.get(id);
    }
    getAllAgents() {
        return Array.from(this.agents.values());
    }
    listAgents() {
        return this.getAllAgents();
    }
    registerAgent(agentOrId, agent) {
        let id;
        let agentToRegister;
        if (typeof agentOrId === 'string') {
            // Old signature: registerAgent(id, agent)
            id = agentOrId;
            agentToRegister = agent;
        }
        else {
            // New signature: registerAgent(agent)
            agentToRegister = agentOrId;
            id = agentToRegister.id;
        }
        if (this.agents.has(id)) {
            throw new Error(`Agent with ID ${id} is already registered`);
        }
        this.agents.set(id, agentToRegister);
    }
    getRegisteredAgents() {
        return this.getAllAgents();
    }
    getAgentForFile(filePath) {
        // Match file patterns to agents
        const patterns = {
            'enhanced-maria': ['*.test.*', '*.spec.*', '__tests__/**'],
            'enhanced-james': ['*.tsx', '*.jsx', '*.vue', '*.css', '*.scss'],
            'enhanced-marcus': ['*.api.*', 'routes/**', 'controllers/**', 'services/**'],
            'dr-ai-ml': ['*.py', '*.ipynb', 'models/**', 'ml/**']
        };
        for (const [agentId, filePatterns] of Object.entries(patterns)) {
            for (const pattern of filePatterns) {
                const regexPattern = pattern
                    .replace(/\*\*/g, '.*')
                    .replace(/\*/g, '[^/]*')
                    .replace(/\./g, '\\.');
                if (new RegExp(regexPattern).test(filePath)) {
                    return this.agents.get(agentId) || null;
                }
            }
        }
        return null;
    }
    getAgentsForFilePattern(pattern) {
        return this.getAllAgents();
    }
    getStatus() {
        return {
            totalAgents: this.agents.size,
            agents: Array.from(this.agents.entries()).map(([id, agent]) => ({
                id,
                name: agent.name,
                specialization: agent.specialization
            }))
        };
    }
    isHealthy() {
        return this.agents.size > 0;
    }
    getAgentMetadata(id) {
        const agent = this.agents.get(id);
        if (!agent)
            return undefined;
        const metadata = {
            name: agent.name,
            specialization: agent.specialization,
            autoActivate: false,
            priority: id === 'introspective-agent' ? 4 : 3,
            triggers: {
                keywords: this.getKeywordsForAgent(id),
                patterns: [],
                fileTypes: []
            },
            collaborators: this.getCollaboratorIds(id)
        };
        // Add MCP tools for introspective agent
        if (id === 'introspective-agent') {
            metadata.mcpTools = ['Read MCP', 'Bash MCP', 'WebFetch MCP'];
        }
        return metadata;
    }
    getCollaborators(id) {
        const collaboratorIds = this.getCollaboratorIds(id);
        return collaboratorIds
            .map(collabId => this.agents.get(collabId))
            .filter((agent) => agent !== undefined);
    }
    getKeywordsForAgent(id) {
        const keywordMap = {
            'introspective-agent': ['introspection', 'optimization', 'performance', 'learning'],
            'enhanced-maria': ['test', 'quality', 'coverage', 'validation'],
            'enhanced-james': ['ui', 'frontend', 'component', 'accessibility'],
            'enhanced-marcus': ['api', 'backend', 'security', 'database'],
            'sarah-pm': ['project', 'sprint', 'milestone', 'timeline'],
            'alex-ba': ['requirements', 'business', 'analysis', 'stakeholder'],
            'dr-ai-ml': ['machine learning', 'model', 'training', 'prediction']
        };
        return keywordMap[id] || [];
    }
    getCollaboratorIds(id) {
        const collabMap = {
            'introspective-agent': ['enhanced-maria', 'enhanced-james', 'enhanced-marcus'],
            'enhanced-maria': ['enhanced-james', 'enhanced-marcus'],
            'enhanced-james': ['enhanced-maria', 'enhanced-marcus'],
            'enhanced-marcus': ['enhanced-maria', 'enhanced-james'],
            'sarah-pm': ['enhanced-maria', 'enhanced-james', 'enhanced-marcus', 'alex-ba'],
            'alex-ba': ['sarah-pm', 'enhanced-maria'],
            'dr-ai-ml': ['enhanced-marcus', 'enhanced-maria']
        };
        return collabMap[id] || [];
    }
}
exports.AgentRegistry = AgentRegistry;
exports.log = console;
// Export singleton instance for easy import
exports.agentRegistry = new AgentRegistry();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,