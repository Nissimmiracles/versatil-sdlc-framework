{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/tests/unit/contracts/contract-tracker.test.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/tests/unit/contracts/contract-tracker.test.ts"],"sourcesContent":["/**\n * Unit Tests: Contract Tracker\n *\n * Coverage Target: 80%+\n *\n * Test Coverage:\n * - Contract event tracking (created, status changes, validation)\n * - Performance metrics calculation\n * - Statistics aggregation\n * - Report generation\n * - Cleanup operations\n * - Singleton pattern\n * - Integration with stats tracker\n */\n\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as os from 'os';\nimport {\n  ContractTracker,\n  getGlobalContractTracker,\n  ContractEvent,\n  ContractPerformance,\n  ContractStatistics\n} from '../../../src/agents/contracts/contract-tracker.js';\nimport {\n  AgentHandoffContract,\n  ContractBuilder\n} from '../../../src/agents/contracts/agent-handoff-contract.js';\nimport { ValidationResult } from '../../../src/agents/contracts/contract-validator.js';\n\ndescribe('ContractTracker', () => {\n  let tracker: ContractTracker;\n  let testStatsDir: string;\n\n  beforeEach(async () => {\n    // Create temporary test directory\n    testStatsDir = path.join(os.tmpdir(), `versatil-contract-test-${Date.now()}`);\n    await fs.mkdir(testStatsDir, { recursive: true });\n\n    // Create tracker with test directory\n    tracker = new ContractTracker(testStatsDir);\n    await tracker.initialize();\n  });\n\n  afterEach(async () => {\n    // Cleanup test directory\n    try {\n      await fs.rm(testStatsDir, { recursive: true, force: true });\n    } catch (error) {\n      // Ignore cleanup errors\n    }\n  });\n\n  describe('Initialization', () => {\n    it('should create stats directory on initialization', async () => {\n      const stats = await fs.stat(testStatsDir);\n      expect(stats.isDirectory()).toBe(true);\n    });\n\n    it('should load existing data on initialization', async () => {\n      const contract = createTestContract();\n      await tracker.trackContractCreated(contract);\n\n      // Create new tracker instance (should load existing data)\n      const newTracker = new ContractTracker(testStatsDir);\n      await newTracker.initialize();\n\n      const stats = newTracker.getStatistics();\n      expect(stats.totalContracts).toBe(1);\n    });\n\n    it('should handle missing stats directory gracefully', async () => {\n      const newTracker = new ContractTracker(path.join(testStatsDir, 'nonexistent'));\n      await expect(newTracker.initialize()).resolves.not.toThrow();\n    });\n\n    it('should handle corrupted data files gracefully', async () => {\n      const eventsPath = path.join(testStatsDir, 'contract-events.json');\n      await fs.writeFile(eventsPath, 'corrupted json', 'utf-8');\n\n      const newTracker = new ContractTracker(testStatsDir);\n      await expect(newTracker.initialize()).resolves.not.toThrow();\n    });\n  });\n\n  describe('Contract Creation Tracking', () => {\n    it('should track contract creation', async () => {\n      const contract = createTestContract();\n      await tracker.trackContractCreated(contract);\n\n      const stats = tracker.getStatistics();\n      expect(stats.totalContracts).toBe(1);\n      expect(stats.bySender['alex-ba']).toBe(1);\n      expect(stats.byReceiver['marcus-backend']).toBe(1);\n    });\n\n    it('should track contract creation with validation result', async () => {\n      const contract = createTestContract();\n      const validationResult: ValidationResult = {\n        valid: true,\n        errors: [],\n        warnings: [],\n        score: 95\n      };\n\n      await tracker.trackContractCreated(contract, validationResult);\n\n      const events = tracker.getContractEvents(contract.contractId);\n      expect(events).toHaveLength(1);\n      expect(events[0].validationScore).toBe(95);\n    });\n\n    it('should initialize performance tracking on creation', async () => {\n      const contract = createTestContract();\n      await tracker.trackContractCreated(contract);\n\n      const performance = tracker.getContractPerformance(contract.contractId);\n      expect(performance).toBeDefined();\n      expect(performance?.contractId).toBe(contract.contractId);\n      expect(performance?.sender).toBe('alex-ba');\n      expect(performance?.status).toBe('pending');\n    });\n\n    it('should calculate estimated effort from work items', async () => {\n      const contract = createTestContract();\n      contract.workItems[0].estimatedEffort = 5;\n\n      await tracker.trackContractCreated(contract);\n\n      const performance = tracker.getContractPerformance(contract.contractId);\n      expect(performance?.estimatedEffort).toBe(5);\n    });\n\n    it('should track quality gates count', async () => {\n      const contract = createTestContract();\n      contract.expectedOutput.qualityGates = [\n        { name: 'Coverage', description: 'Test coverage', threshold: 80 },\n        { name: 'Performance', description: 'Response time', threshold: '200ms' }\n      ];\n\n      await tracker.trackContractCreated(contract);\n\n      const performance = tracker.getContractPerformance(contract.contractId);\n      expect(performance?.qualityGatesTotal).toBe(2);\n    });\n\n    it('should persist contract creation to disk', async () => {\n      const contract = createTestContract();\n      await tracker.trackContractCreated(contract);\n\n      const eventsPath = path.join(testStatsDir, 'contract-events.json');\n      const fileExists = await fs.access(eventsPath).then(() => true).catch(() => false);\n      expect(fileExists).toBe(true);\n\n      const content = await fs.readFile(eventsPath, 'utf-8');\n      const events = JSON.parse(content);\n      expect(events).toHaveLength(1);\n      expect(events[0].contractId).toBe(contract.contractId);\n    });\n  });\n\n  describe('Status Change Tracking', () => {\n    it('should track status change to sent', async () => {\n      const contract = createTestContract();\n      await tracker.trackContractCreated(contract);\n\n      contract.status = 'in_transit';\n      await tracker.trackStatusChange(contract.contractId, 'in_transit', contract);\n\n      const events = tracker.getContractEvents(contract.contractId);\n      expect(events).toHaveLength(2);\n      expect(events[1].eventType).toBe('sent');\n    });\n\n    it('should track status change to accepted', async () => {\n      const contract = createTestContract();\n      await tracker.trackContractCreated(contract);\n\n      contract.status = 'accepted';\n      await tracker.trackStatusChange(contract.contractId, 'accepted', contract);\n\n      const events = tracker.getContractEvents(contract.contractId);\n      expect(events).toHaveLength(2);\n      expect(events[1].eventType).toBe('accepted');\n    });\n\n    it('should track status change to completed', async () => {\n      const contract = createTestContract();\n      await tracker.trackContractCreated(contract);\n\n      contract.status = 'completed';\n      contract.results = {\n        completedBy: 'marcus-backend',\n        completedAt: new Date(),\n        actualEffort: 6,\n        qualityResults: [\n          { gate: 'Coverage', passed: true, actualValue: 85, threshold: 80 }\n        ]\n      };\n\n      await tracker.trackStatusChange(contract.contractId, 'completed', contract);\n\n      const performance = tracker.getContractPerformance(contract.contractId);\n      expect(performance?.status).toBe('completed');\n      expect(performance?.actualEffort).toBe(6);\n    });\n\n    it('should calculate effort accuracy on completion', async () => {\n      const contract = createTestContract();\n      contract.workItems[0].estimatedEffort = 5;\n      await tracker.trackContractCreated(contract);\n\n      contract.status = 'completed';\n      contract.results = {\n        completedBy: 'marcus-backend',\n        completedAt: new Date(),\n        actualEffort: 6\n      };\n\n      await tracker.trackStatusChange(contract.contractId, 'completed', contract);\n\n      const performance = tracker.getContractPerformance(contract.contractId);\n      expect(performance?.effortAccuracy).toBeCloseTo(83.33, 1); // (5 / 6) * 100\n    });\n\n    it('should calculate quality gate pass rate on completion', async () => {\n      const contract = createTestContract();\n      contract.expectedOutput.qualityGates = [\n        { name: 'Coverage', description: 'Test coverage', threshold: 80 },\n        { name: 'Performance', description: 'Response time', threshold: '200ms' }\n      ];\n      await tracker.trackContractCreated(contract);\n\n      contract.status = 'completed';\n      contract.results = {\n        completedBy: 'marcus-backend',\n        completedAt: new Date(),\n        qualityResults: [\n          { gate: 'Coverage', passed: true, actualValue: 85, threshold: 80 },\n          { gate: 'Performance', passed: false, actualValue: '250ms', threshold: '200ms' }\n        ]\n      };\n\n      await tracker.trackStatusChange(contract.contractId, 'completed', contract);\n\n      const performance = tracker.getContractPerformance(contract.contractId);\n      expect(performance?.qualityGatesPassed).toBe(1);\n      expect(performance?.qualityPassRate).toBe(50); // 1 / 2 * 100\n    });\n\n    it('should calculate duration on completion', async () => {\n      const contract = createTestContract();\n      await tracker.trackContractCreated(contract);\n\n      // Wait a bit to ensure duration is measurable\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      contract.status = 'completed';\n      contract.results = {\n        completedBy: 'marcus-backend',\n        completedAt: new Date()\n      };\n\n      await tracker.trackStatusChange(contract.contractId, 'completed', contract);\n\n      const performance = tracker.getContractPerformance(contract.contractId);\n      expect(performance?.duration).toBeGreaterThan(0);\n    });\n\n    it('should handle status change without contract gracefully', async () => {\n      await expect(\n        tracker.trackStatusChange('nonexistent-contract', 'completed')\n      ).resolves.not.toThrow();\n    });\n  });\n\n  describe('Validation Tracking', () => {\n    it('should track validation result', async () => {\n      const contract = createTestContract();\n      await tracker.trackContractCreated(contract);\n\n      const validationResult: ValidationResult = {\n        valid: true,\n        errors: [],\n        warnings: [{ field: 'test', message: 'Test warning', impact: 'low' }],\n        score: 92\n      };\n\n      await tracker.trackValidation(contract.contractId, validationResult);\n\n      const events = tracker.getContractEvents(contract.contractId);\n      const lastEvent = events[events.length - 1];\n      expect(lastEvent.validationScore).toBe(92);\n      expect(lastEvent.metadata?.validationWarnings).toBe(1);\n    });\n\n    it('should track validation errors count', async () => {\n      const contract = createTestContract();\n      await tracker.trackContractCreated(contract);\n\n      const validationResult: ValidationResult = {\n        valid: false,\n        errors: [\n          { field: 'field1', message: 'Error 1', severity: 'high' },\n          { field: 'field2', message: 'Error 2', severity: 'medium' }\n        ],\n        warnings: [],\n        score: 60\n      };\n\n      await tracker.trackValidation(contract.contractId, validationResult);\n\n      const events = tracker.getContractEvents(contract.contractId);\n      const lastEvent = events[events.length - 1];\n      expect(lastEvent.metadata?.validationErrors).toBe(2);\n    });\n  });\n\n  describe('Statistics Calculation', () => {\n    it('should return default statistics when no data', () => {\n      const stats = tracker.getStatistics();\n\n      expect(stats.totalContracts).toBe(0);\n      expect(stats.successRate).toBe(0);\n      expect(stats.avgQualityScore).toBe(0);\n      expect(stats.avgEffortAccuracy).toBe(0);\n    });\n\n    it('should calculate contracts by status', async () => {\n      const contract1 = createTestContract();\n      const contract2 = createTestContract();\n      const contract3 = createTestContract();\n\n      await tracker.trackContractCreated(contract1);\n      await tracker.trackContractCreated(contract2);\n      await tracker.trackContractCreated(contract3);\n\n      contract1.status = 'completed';\n      await tracker.trackStatusChange(contract1.contractId, 'completed', contract1);\n\n      contract2.status = 'failed';\n      await tracker.trackStatusChange(contract2.contractId, 'failed', contract2);\n\n      const stats = tracker.getStatistics();\n      expect(stats.totalContracts).toBe(3);\n      expect(stats.byStatus['pending']).toBe(1);\n      expect(stats.byStatus['completed']).toBe(1);\n      expect(stats.byStatus['failed']).toBe(1);\n    });\n\n    it('should calculate contracts by type', async () => {\n      const contract1 = createTestContract();\n      contract1.type = 'sequential';\n\n      const contract2 = createTestContract();\n      contract2.type = 'parallel';\n\n      await tracker.trackContractCreated(contract1);\n      await tracker.trackContractCreated(contract2);\n\n      const stats = tracker.getStatistics();\n      expect(stats.byType['sequential']).toBe(1);\n      expect(stats.byType['parallel']).toBe(1);\n    });\n\n    it('should calculate contracts by sender', async () => {\n      const contract1 = createTestContract();\n      contract1.sender.agentId = 'alex-ba';\n\n      const contract2 = createTestContract();\n      contract2.sender.agentId = 'sarah-pm';\n\n      await tracker.trackContractCreated(contract1);\n      await tracker.trackContractCreated(contract2);\n\n      const stats = tracker.getStatistics();\n      expect(stats.bySender['alex-ba']).toBe(1);\n      expect(stats.bySender['sarah-pm']).toBe(1);\n    });\n\n    it('should calculate contracts by receiver', async () => {\n      const contract = createTestContract();\n      contract.receivers = [\n        { agentId: 'dana-database' },\n        { agentId: 'marcus-backend' },\n        { agentId: 'james-frontend' }\n      ];\n\n      await tracker.trackContractCreated(contract);\n\n      const stats = tracker.getStatistics();\n      expect(stats.byReceiver['dana-database']).toBe(1);\n      expect(stats.byReceiver['marcus-backend']).toBe(1);\n      expect(stats.byReceiver['james-frontend']).toBe(1);\n    });\n\n    it('should calculate average quality score', async () => {\n      const contract1 = createTestContract();\n      const contract2 = createTestContract();\n\n      await tracker.trackContractCreated(contract1, {\n        valid: true,\n        errors: [],\n        warnings: [],\n        score: 90\n      });\n\n      await tracker.trackContractCreated(contract2, {\n        valid: true,\n        errors: [],\n        warnings: [],\n        score: 80\n      });\n\n      const stats = tracker.getStatistics();\n      expect(stats.avgQualityScore).toBe(85); // (90 + 80) / 2\n    });\n\n    it('should calculate success rate', async () => {\n      const contract1 = createTestContract();\n      const contract2 = createTestContract();\n      const contract3 = createTestContract();\n\n      await tracker.trackContractCreated(contract1);\n      await tracker.trackContractCreated(contract2);\n      await tracker.trackContractCreated(contract3);\n\n      contract1.status = 'completed';\n      await tracker.trackStatusChange(contract1.contractId, 'completed', contract1);\n\n      contract2.status = 'completed';\n      await tracker.trackStatusChange(contract2.contractId, 'completed', contract2);\n\n      const stats = tracker.getStatistics();\n      expect(stats.successRate).toBeCloseTo(66.67, 1); // 2 / 3 * 100\n    });\n\n    it('should calculate average effort accuracy', async () => {\n      const contract1 = createTestContract();\n      contract1.workItems[0].estimatedEffort = 5;\n      await tracker.trackContractCreated(contract1);\n\n      contract1.status = 'completed';\n      contract1.results = { actualEffort: 6 };\n      await tracker.trackStatusChange(contract1.contractId, 'completed', contract1);\n\n      const contract2 = createTestContract();\n      contract2.workItems[0].estimatedEffort = 10;\n      await tracker.trackContractCreated(contract2);\n\n      contract2.status = 'completed';\n      contract2.results = { actualEffort: 10 };\n      await tracker.trackStatusChange(contract2.contractId, 'completed', contract2);\n\n      const stats = tracker.getStatistics();\n      // (5/6 * 100 + 10/10 * 100) / 2 = (83.33 + 100) / 2 = 91.67\n      expect(stats.avgEffortAccuracy).toBeCloseTo(91.67, 1);\n    });\n\n    it('should calculate average quality pass rate', async () => {\n      const contract1 = createTestContract();\n      contract1.expectedOutput.qualityGates = [\n        { name: 'Gate1', description: 'Test', threshold: 80 },\n        { name: 'Gate2', description: 'Test', threshold: 90 }\n      ];\n      await tracker.trackContractCreated(contract1);\n\n      contract1.status = 'completed';\n      contract1.results = {\n        qualityResults: [\n          { gate: 'Gate1', passed: true, actualValue: 85, threshold: 80 },\n          { gate: 'Gate2', passed: false, actualValue: 85, threshold: 90 }\n        ]\n      };\n      await tracker.trackStatusChange(contract1.contractId, 'completed', contract1);\n\n      const stats = tracker.getStatistics();\n      expect(stats.avgQualityPassRate).toBe(50); // 1 / 2 * 100\n    });\n  });\n\n  describe('Report Generation', () => {\n    it('should generate comprehensive report', async () => {\n      const contract = createTestContract();\n      await tracker.trackContractCreated(contract, {\n        valid: true,\n        errors: [],\n        warnings: [],\n        score: 95\n      });\n\n      const report = await tracker.generateReport();\n\n      expect(report).toContain('Contract Tracking Report');\n      expect(report).toContain('Total Contracts: 1');\n      expect(report).toContain('Average Quality Score: 95');\n      expect(report).toContain('alex-ba');\n      expect(report).toContain('marcus-backend');\n    });\n\n    it('should handle empty data in report', async () => {\n      const report = await tracker.generateReport();\n\n      expect(report).toContain('Contract Tracking Report');\n      expect(report).toContain('Total Contracts: 0');\n    });\n\n    it('should include recent events in report', async () => {\n      const contract = createTestContract();\n      await tracker.trackContractCreated(contract);\n\n      const report = await tracker.generateReport();\n\n      expect(report).toContain('Recent Events');\n      expect(report).toContain('created');\n    });\n  });\n\n  describe('Query Operations', () => {\n    it('should get events for specific contract', async () => {\n      const contract1 = createTestContract();\n      const contract2 = createTestContract();\n\n      await tracker.trackContractCreated(contract1);\n      await tracker.trackContractCreated(contract2);\n\n      const events = tracker.getContractEvents(contract1.contractId);\n      expect(events).toHaveLength(1);\n      expect(events[0].contractId).toBe(contract1.contractId);\n    });\n\n    it('should get performance for specific contract', async () => {\n      const contract = createTestContract();\n      await tracker.trackContractCreated(contract);\n\n      const performance = tracker.getContractPerformance(contract.contractId);\n      expect(performance).toBeDefined();\n      expect(performance?.contractId).toBe(contract.contractId);\n    });\n\n    it('should return undefined for nonexistent contract', () => {\n      const performance = tracker.getContractPerformance('nonexistent');\n      expect(performance).toBeUndefined();\n    });\n\n    it('should get events by time range', async () => {\n      const now = new Date();\n      const oneHourAgo = new Date(now.getTime() - 3600000);\n      const oneHourFromNow = new Date(now.getTime() + 3600000);\n\n      const contract = createTestContract();\n      await tracker.trackContractCreated(contract);\n\n      const events = tracker.getEventsByTimeRange(oneHourAgo, oneHourFromNow);\n      expect(events).toHaveLength(1);\n    });\n\n    it('should exclude events outside time range', async () => {\n      const now = new Date();\n      const twoHoursAgo = new Date(now.getTime() - 7200000);\n      const oneHourAgo = new Date(now.getTime() - 3600000);\n\n      const contract = createTestContract();\n      await tracker.trackContractCreated(contract);\n\n      const events = tracker.getEventsByTimeRange(twoHoursAgo, oneHourAgo);\n      expect(events).toHaveLength(0);\n    });\n  });\n\n  describe('Cleanup Operations', () => {\n    it('should cleanup old events', async () => {\n      const contract = createTestContract();\n      await tracker.trackContractCreated(contract);\n\n      await tracker.cleanup(30);\n\n      // In real scenario, old events would be removed\n      // This is simplified test\n      const stats = tracker.getStatistics();\n      expect(stats.totalContracts).toBeGreaterThanOrEqual(0);\n    });\n\n    it('should persist cleaned data', async () => {\n      const contract = createTestContract();\n      await tracker.trackContractCreated(contract);\n\n      await tracker.cleanup(30);\n\n      // Verify files still exist\n      const eventsPath = path.join(testStatsDir, 'contract-events.json');\n      const fileExists = await fs.access(eventsPath).then(() => true).catch(() => false);\n      expect(fileExists).toBe(true);\n    });\n  });\n\n  describe('Singleton Pattern', () => {\n    it('should return same instance from getGlobalContractTracker', () => {\n      const instance1 = getGlobalContractTracker();\n      const instance2 = getGlobalContractTracker();\n\n      expect(instance1).toBe(instance2);\n    });\n\n    it('should initialize singleton automatically', async () => {\n      const instance = getGlobalContractTracker();\n\n      await expect(\n        instance.trackContractCreated(createTestContract())\n      ).resolves.not.toThrow();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle file write errors gracefully', async () => {\n      await fs.chmod(testStatsDir, 0o444);\n\n      await expect(\n        tracker.trackContractCreated(createTestContract())\n      ).resolves.not.toThrow();\n\n      await fs.chmod(testStatsDir, 0o755);\n    });\n\n    it('should handle concurrent tracking', async () => {\n      const promises = Array(50).fill(null).map(() =>\n        tracker.trackContractCreated(createTestContract())\n      );\n\n      await expect(Promise.all(promises)).resolves.not.toThrow();\n\n      const stats = tracker.getStatistics();\n      expect(stats.totalContracts).toBe(50);\n    });\n  });\n});\n\n// Helper function\n\nfunction createTestContract(): AgentHandoffContract {\n  const builder = new ContractBuilder('alex-ba');\n\n  builder\n    .addReceiver('marcus-backend', 'api')\n    .setType('sequential')\n    .setPriority('normal')\n    .addWorkItem({\n      id: `work-${Date.now()}-${Math.random()}`,\n      type: 'implementation',\n      description: 'Test work item',\n      acceptanceCriteria: ['Criteria 1', 'Criteria 2'],\n      priority: 'normal'\n    })\n    .setExpectedOutput({\n      artifacts: [\n        { type: 'code', description: 'Code artifacts', required: true }\n      ],\n      successCriteria: ['Success 1']\n    })\n    .setMemorySnapshot({\n      agentId: 'alex-ba',\n      timestamp: new Date(),\n      memoryFiles: { 'test.md': 'Test content' },\n      criticalPatterns: [],\n      contextSummary: 'Test summary',\n      estimatedTokens: 1000\n    })\n    .setExpiration(24);\n\n  return builder.build();\n}\n"],"version":3}