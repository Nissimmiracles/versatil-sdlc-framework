b113a0b13859df82c47185500903583c
"use strict";
/**
 * Unit Tests: Contract Validator
 *
 * Coverage Target: 90%+ (critical path)
 *
 * Test Coverage:
 * - Schema validation (required fields, types)
 * - Business logic validation (work items, criteria)
 * - Memory snapshot validation
 * - Quality gates validation
 * - Three-tier contract validation
 * - Strict mode behavior
 * - Quality score calculation
 * - Error and warning generation
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const contract_validator_js_1 = require("../../../src/agents/contracts/contract-validator.js");
const agent_handoff_contract_js_1 = require("../../../src/agents/contracts/agent-handoff-contract.js");
(0, globals_1.describe)('ContractValidator', () => {
    let validator;
    (0, globals_1.beforeEach)(() => {
        validator = new contract_validator_js_1.ContractValidator();
    });
    (0, globals_1.describe)('Schema Validation', () => {
        (0, globals_1.it)('should validate a complete valid contract', async () => {
            const contract = createValidContract();
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.valid).toBe(true);
            (0, globals_1.expect)(result.errors).toHaveLength(0);
            (0, globals_1.expect)(result.score).toBeGreaterThan(90);
        });
        (0, globals_1.it)('should reject contract without contractId', async () => {
            const contract = createValidContract();
            contract.contractId = '';
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'contractId',
                    severity: 'critical'
                })
            ]));
        });
        (0, globals_1.it)('should reject contract without version', async () => {
            const contract = createValidContract();
            contract.version = '';
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'version',
                    severity: 'high'
                })
            ]));
        });
        (0, globals_1.it)('should warn on version mismatch', async () => {
            const contract = createValidContract();
            contract.version = '0.9.0'; // Different from CONTRACT_VERSION
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.warnings).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'version',
                    impact: 'medium'
                })
            ]));
        });
        (0, globals_1.it)('should reject contract without sender', async () => {
            const contract = createValidContract();
            contract.sender = {};
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'sender.agentId',
                    severity: 'critical'
                })
            ]));
        });
        (0, globals_1.it)('should reject contract without receivers', async () => {
            const contract = createValidContract();
            contract.receivers = [];
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'receivers',
                    severity: 'critical'
                })
            ]));
        });
        (0, globals_1.it)('should reject contract without type', async () => {
            const contract = createValidContract();
            contract.type = undefined;
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'type',
                    severity: 'high'
                })
            ]));
        });
        (0, globals_1.it)('should reject contract without work items', async () => {
            const contract = createValidContract();
            contract.workItems = [];
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'workItems',
                    severity: 'critical'
                })
            ]));
        });
        (0, globals_1.it)('should reject contract without memory snapshot', async () => {
            const contract = createValidContract();
            contract.memorySnapshot = undefined;
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'memorySnapshot',
                    severity: 'high'
                })
            ]));
        });
    });
    (0, globals_1.describe)('Business Logic Validation', () => {
        (0, globals_1.it)('should reject work item without id', async () => {
            const contract = createValidContract();
            contract.workItems[0].id = '';
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'workItems[0].id',
                    severity: 'high'
                })
            ]));
        });
        (0, globals_1.it)('should reject work item without description', async () => {
            const contract = createValidContract();
            contract.workItems[0].description = '';
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'workItems[0].description',
                    severity: 'medium'
                })
            ]));
        });
        (0, globals_1.it)('should warn on work item without acceptance criteria', async () => {
            const contract = createValidContract();
            contract.workItems[0].acceptanceCriteria = [];
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.warnings).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'workItems[0].acceptanceCriteria',
                    impact: 'high'
                })
            ]));
        });
        (0, globals_1.it)('should reject circular dependencies', async () => {
            const contract = createValidContract();
            contract.workItems[0].dependencies = [contract.workItems[0].id];
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'workItems[0].dependencies',
                    severity: 'medium'
                })
            ]));
        });
        (0, globals_1.it)('should warn on missing expected output', async () => {
            const contract = createValidContract();
            contract.expectedOutput = undefined;
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.warnings).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'expectedOutput',
                    impact: 'high'
                })
            ]));
        });
        (0, globals_1.it)('should warn on missing artifacts', async () => {
            const contract = createValidContract();
            contract.expectedOutput.artifacts = [];
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.warnings).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'expectedOutput.artifacts',
                    impact: 'medium'
                })
            ]));
        });
        (0, globals_1.it)('should warn on missing success criteria', async () => {
            const contract = createValidContract();
            contract.expectedOutput.successCriteria = [];
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.warnings).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'expectedOutput.successCriteria',
                    impact: 'high'
                })
            ]));
        });
        (0, globals_1.it)('should warn on sequential handoff with multiple receivers', async () => {
            const contract = createValidContract();
            contract.type = 'sequential';
            contract.receivers = [
                { agentId: 'marcus-backend' },
                { agentId: 'james-frontend' }
            ];
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.warnings).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'type',
                    impact: 'medium'
                })
            ]));
        });
        (0, globals_1.it)('should warn on parallel handoff with single receiver', async () => {
            const contract = createValidContract();
            contract.type = 'parallel';
            contract.receivers = [{ agentId: 'marcus-backend' }];
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.warnings).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'type',
                    impact: 'low'
                })
            ]));
        });
    });
    (0, globals_1.describe)('Memory Snapshot Validation', () => {
        (0, globals_1.it)('should reject missing memory snapshot', async () => {
            const contract = createValidContract();
            contract.memorySnapshot = null;
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'memorySnapshot',
                    severity: 'critical'
                })
            ]));
        });
        (0, globals_1.it)('should reject snapshot without agentId', async () => {
            const contract = createValidContract();
            contract.memorySnapshot.agentId = '';
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'memorySnapshot.agentId',
                    severity: 'high'
                })
            ]));
        });
        (0, globals_1.it)('should reject snapshot without timestamp', async () => {
            const contract = createValidContract();
            contract.memorySnapshot.timestamp = null;
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'memorySnapshot.timestamp',
                    severity: 'medium'
                })
            ]));
        });
        (0, globals_1.it)('should warn on empty context summary', async () => {
            const contract = createValidContract();
            contract.memorySnapshot.contextSummary = '';
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.warnings).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'memorySnapshot.contextSummary',
                    impact: 'high'
                })
            ]));
        });
        (0, globals_1.it)('should warn on empty memory files', async () => {
            const contract = createValidContract();
            contract.memorySnapshot.memoryFiles = {};
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.warnings).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'memorySnapshot.memoryFiles',
                    impact: 'medium'
                })
            ]));
        });
        (0, globals_1.it)('should warn on empty critical patterns', async () => {
            const contract = createValidContract();
            contract.memorySnapshot.criticalPatterns = [];
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.warnings).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'memorySnapshot.criticalPatterns',
                    impact: 'medium'
                })
            ]));
        });
        (0, globals_1.it)('should warn on zero token estimate', async () => {
            const contract = createValidContract();
            contract.memorySnapshot.estimatedTokens = 0;
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.warnings).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'memorySnapshot.estimatedTokens',
                    impact: 'low'
                })
            ]));
        });
        (0, globals_1.it)('should warn on large snapshot', async () => {
            const contract = createValidContract();
            contract.memorySnapshot.estimatedTokens = 60000;
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.warnings).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'memorySnapshot.estimatedTokens',
                    impact: 'medium'
                })
            ]));
        });
    });
    (0, globals_1.describe)('Quality Gates Validation', () => {
        (0, globals_1.it)('should warn on missing quality gates', async () => {
            const contract = createValidContract();
            contract.expectedOutput.qualityGates = undefined;
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.warnings).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'expectedOutput.qualityGates',
                    impact: 'high'
                })
            ]));
        });
        (0, globals_1.it)('should reject quality gate without name', async () => {
            const contract = createValidContract();
            contract.expectedOutput.qualityGates = [
                { name: '', description: 'Test coverage', threshold: 80 }
            ];
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'expectedOutput.qualityGates[0].name',
                    severity: 'medium'
                })
            ]));
        });
        (0, globals_1.it)('should warn on quality gate without threshold', async () => {
            const contract = createValidContract();
            contract.expectedOutput.qualityGates = [
                { name: 'Coverage', description: 'Test coverage', threshold: undefined }
            ];
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.warnings).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'expectedOutput.qualityGates[0].threshold',
                    impact: 'high'
                })
            ]));
        });
    });
    (0, globals_1.describe)('Three-Tier Contract Validation', () => {
        (0, globals_1.it)('should validate complete three-tier contract', () => {
            const contract = createValidThreeTierContract();
            const result = validator.validateThreeTier(contract);
            (0, globals_1.expect)(result.valid).toBe(true);
            (0, globals_1.expect)(result.errors).toHaveLength(0);
        });
        (0, globals_1.it)('should reject three-tier contract without API endpoints', () => {
            const contract = createValidThreeTierContract();
            contract.apiContract.endpoints = [];
            const result = validator.validateThreeTier(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'apiContract.endpoints',
                    severity: 'critical'
                })
            ]));
        });
        (0, globals_1.it)('should reject three-tier contract without database tables', () => {
            const contract = createValidThreeTierContract();
            contract.databaseSchema.tables = [];
            const result = validator.validateThreeTier(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'databaseSchema.tables',
                    severity: 'critical'
                })
            ]));
        });
        (0, globals_1.it)('should reject three-tier contract without UI components', () => {
            const contract = createValidThreeTierContract();
            contract.uiRequirements.components = [];
            const result = validator.validateThreeTier(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'uiRequirements.components',
                    severity: 'critical'
                })
            ]));
        });
        (0, globals_1.it)('should warn on missing required agents', () => {
            const contract = createValidThreeTierContract();
            contract.receivers = [
                { agentId: 'marcus-backend', role: 'api' },
                { agentId: 'james-frontend', role: 'frontend' }
                // Missing dana-database
            ];
            const result = validator.validateThreeTier(contract);
            (0, globals_1.expect)(result.warnings).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'receivers',
                    impact: 'high'
                })
            ]));
        });
    });
    (0, globals_1.describe)('Validation After Receive', () => {
        (0, globals_1.it)('should reject expired contract', async () => {
            const contract = createValidContract();
            contract.expiresAt = new Date(Date.now() - 1000); // Expired 1 second ago
            const result = await validator.validateAfterReceive(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'expiresAt',
                    severity: 'critical'
                })
            ]));
        });
        (0, globals_1.it)('should accept non-expired contract', async () => {
            const contract = createValidContract();
            contract.expiresAt = new Date(Date.now() + 3600000); // Expires in 1 hour
            const result = await validator.validateAfterReceive(contract);
            (0, globals_1.expect)(result.valid).toBe(true);
        });
        (0, globals_1.it)('should accept contract without expiration', async () => {
            const contract = createValidContract();
            contract.expiresAt = undefined;
            const result = await validator.validateAfterReceive(contract);
            (0, globals_1.expect)(result.valid).toBe(true);
        });
    });
    (0, globals_1.describe)('Strict Mode', () => {
        (0, globals_1.it)('should convert warnings to errors in strict mode', async () => {
            const strictValidator = new contract_validator_js_1.ContractValidator({ strictMode: true });
            const contract = createValidContract();
            contract.workItems[0].acceptanceCriteria = []; // This normally generates warning
            const result = await strictValidator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.errors).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    field: 'workItems[0].acceptanceCriteria'
                })
            ]));
            (0, globals_1.expect)(result.warnings).toHaveLength(0);
        });
        (0, globals_1.it)('should enforce minimum quality score in strict mode', async () => {
            const strictValidator = new contract_validator_js_1.ContractValidator({
                strictMode: true,
                minQualityScore: 90
            });
            const contract = createValidContract();
            // Add multiple issues to lower score
            contract.workItems[0].acceptanceCriteria = [];
            contract.expectedOutput.artifacts = [];
            contract.memorySnapshot.memoryFiles = {};
            const result = await strictValidator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.valid).toBe(false);
            (0, globals_1.expect)(result.score).toBeLessThan(90);
        });
    });
    (0, globals_1.describe)('Quality Score Calculation', () => {
        (0, globals_1.it)('should calculate perfect score for valid contract', async () => {
            const contract = createValidContract();
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.score).toBe(100);
        });
        (0, globals_1.it)('should deduct points for errors', async () => {
            const contract = createValidContract();
            contract.contractId = ''; // Critical error (-15)
            contract.version = ''; // High error (-15)
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.score).toBeLessThanOrEqual(70);
        });
        (0, globals_1.it)('should deduct points for warnings', async () => {
            const contract = createValidContract();
            contract.workItems[0].acceptanceCriteria = []; // Warning (-5)
            contract.memorySnapshot.memoryFiles = {}; // Warning (-4)
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.score).toBeLessThan(100);
            (0, globals_1.expect)(result.score).toBeGreaterThan(85);
        });
        (0, globals_1.it)('should clamp score between 0 and 100', async () => {
            const contract = createValidContract();
            // Add many errors to push score below 0
            contract.contractId = '';
            contract.version = '';
            contract.sender = {};
            contract.receivers = [];
            contract.type = undefined;
            contract.workItems = [];
            contract.memorySnapshot = null;
            const result = await validator.validateBeforeSend(contract);
            (0, globals_1.expect)(result.score).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(result.score).toBeLessThanOrEqual(100);
        });
    });
    (0, globals_1.describe)('Validation Options', () => {
        (0, globals_1.it)('should skip schema validation when disabled', async () => {
            const customValidator = new contract_validator_js_1.ContractValidator({ validateSchema: false });
            const contract = createValidContract();
            contract.contractId = ''; // Would normally fail schema validation
            const result = await customValidator.validateBeforeSend(contract);
            // Should not have schema validation errors
            const schemaErrors = result.errors.filter(e => e.field === 'contractId');
            (0, globals_1.expect)(schemaErrors).toHaveLength(0);
        });
        (0, globals_1.it)('should skip business validation when disabled', async () => {
            const customValidator = new contract_validator_js_1.ContractValidator({ validateBusiness: false });
            const contract = createValidContract();
            contract.workItems[0].acceptanceCriteria = []; // Would normally generate warning
            const result = await customValidator.validateBeforeSend(contract);
            // Should not have business validation warnings
            const businessWarnings = result.warnings.filter(w => w.field === 'workItems[0].acceptanceCriteria');
            (0, globals_1.expect)(businessWarnings).toHaveLength(0);
        });
        (0, globals_1.it)('should skip memory validation when disabled', async () => {
            const customValidator = new contract_validator_js_1.ContractValidator({ validateMemory: false });
            const contract = createValidContract();
            contract.memorySnapshot.agentId = ''; // Would normally fail
            const result = await customValidator.validateBeforeSend(contract);
            // Should not have memory validation errors
            const memoryErrors = result.errors.filter(e => e.field.startsWith('memorySnapshot'));
            (0, globals_1.expect)(memoryErrors).toHaveLength(0);
        });
        (0, globals_1.it)('should skip quality validation when disabled', async () => {
            const customValidator = new contract_validator_js_1.ContractValidator({ validateQuality: false });
            const contract = createValidContract();
            contract.expectedOutput.qualityGates = [
                { name: '', description: 'Test', threshold: 80 }
            ]; // Would normally fail
            const result = await customValidator.validateBeforeSend(contract);
            // Should not have quality validation errors
            const qualityErrors = result.errors.filter(e => e.field.startsWith('expectedOutput.qualityGates'));
            (0, globals_1.expect)(qualityErrors).toHaveLength(0);
        });
    });
    (0, globals_1.describe)('Quick Validation Helper', () => {
        (0, globals_1.it)('should validate contract using helper function', async () => {
            const contract = createValidContract();
            const result = await (0, contract_validator_js_1.validateContract)(contract);
            (0, globals_1.expect)(result.valid).toBe(true);
            (0, globals_1.expect)(result.score).toBe(100);
        });
        (0, globals_1.it)('should accept options in helper function', async () => {
            const contract = createValidContract();
            contract.workItems[0].acceptanceCriteria = [];
            const result = await (0, contract_validator_js_1.validateContract)(contract, { strictMode: true });
            (0, globals_1.expect)(result.valid).toBe(false);
        });
    });
});
// Helper functions
function createValidContract() {
    const builder = new agent_handoff_contract_js_1.ContractBuilder('alex-ba');
    builder
        .addReceiver('marcus-backend', 'api')
        .setType('sequential')
        .setPriority('normal')
        .addWorkItem({
        id: 'work-1',
        type: 'implementation',
        description: 'Implement user authentication API',
        acceptanceCriteria: [
            'POST /api/auth/login endpoint created',
            'JWT token generation implemented',
            'Password hashing with bcrypt'
        ],
        priority: 'high'
    })
        .setExpectedOutput({
        artifacts: [
            { type: 'code', description: 'API endpoints', required: true },
            { type: 'tests', description: 'Unit tests', required: true }
        ],
        qualityGates: [
            { name: 'Test Coverage', description: 'Minimum coverage', threshold: 80 }
        ],
        successCriteria: [
            'All endpoints working',
            'Tests passing',
            'Security scan clean'
        ]
    })
        .setMemorySnapshot({
        agentId: 'alex-ba',
        timestamp: new Date(),
        memoryFiles: {
            'requirements/auth.md': 'User authentication requirements'
        },
        criticalPatterns: [
            {
                category: 'security',
                title: 'JWT authentication pattern',
                content: 'Use httpOnly cookies for tokens'
            }
        ],
        contextSummary: 'Implementing user authentication system',
        estimatedTokens: 5000
    })
        .setContext({
        feature: {
            name: 'User Authentication',
            description: 'Secure user login and session management'
        }
    })
        .setExpiration(24);
    return builder.build();
}
function createValidThreeTierContract() {
    const baseContract = createValidContract();
    return {
        ...baseContract,
        type: 'parallel',
        receivers: [
            { agentId: 'dana-database', role: 'database' },
            { agentId: 'marcus-backend', role: 'api' },
            { agentId: 'james-frontend', role: 'frontend' }
        ],
        apiContract: {
            endpoints: [
                {
                    method: 'POST',
                    path: '/api/auth/login',
                    description: 'User login',
                    authentication: false
                }
            ],
            sharedTypes: {}
        },
        databaseSchema: {
            tables: [
                {
                    name: 'users',
                    columns: [
                        { name: 'id', type: 'uuid', nullable: false },
                        { name: 'email', type: 'text', nullable: false, unique: true },
                        { name: 'password_hash', type: 'text', nullable: false }
                    ]
                }
            ],
            rlsPolicies: [
                {
                    table: 'users',
                    operation: 'SELECT',
                    using: 'auth.uid() = id'
                }
            ]
        },
        uiRequirements: {
            components: [
                {
                    name: 'LoginForm',
                    type: 'component',
                    description: 'User login form'
                }
            ],
            accessibility: 'AA',
            responsive: ['mobile', 'tablet', 'desktop']
        },
        integrationCheckpoints: [
            {
                name: 'Database → API Integration',
                description: 'Connect API to database',
                participants: ['dana-database', 'marcus-backend'],
                acceptanceCriteria: ['API can query database']
            }
        ]
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL25pc3NpbW1lbmFzaGUvVkVSU0FUSUwgU0RMQyBGVy90ZXN0cy91bml0L2NvbnRyYWN0cy9jb250cmFjdC12YWxpZGF0b3IudGVzdC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7O0FBRUgsMkNBQWlFO0FBQ2pFLCtGQUs2RDtBQUM3RCx1R0FLaUU7QUFFakUsSUFBQSxrQkFBUSxFQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtJQUNqQyxJQUFJLFNBQTRCLENBQUM7SUFFakMsSUFBQSxvQkFBVSxFQUFDLEdBQUcsRUFBRTtRQUNkLFNBQVMsR0FBRyxJQUFJLHlDQUFpQixFQUFFLENBQUM7SUFDdEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLGtCQUFRLEVBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO1FBQ2pDLElBQUEsWUFBRSxFQUFDLDJDQUEyQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3pELE1BQU0sUUFBUSxHQUFHLG1CQUFtQixFQUFFLENBQUM7WUFDdkMsTUFBTSxNQUFNLEdBQUcsTUFBTSxTQUFTLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFNUQsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEMsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEMsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQywyQ0FBMkMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN6RCxNQUFNLFFBQVEsR0FBRyxtQkFBbUIsRUFBRSxDQUFDO1lBQ3ZDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsRUFBUyxDQUFDO1lBRWhDLE1BQU0sTUFBTSxHQUFHLE1B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RUFBRTtZQUNkLE1BQU0sRUFBRTtnQkFDTjtvQkFDRSxJQUFJLEVBQUUsT0FBTztvQkFDYixPQUFPLEVBQUU7d0JBQ1AsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRTt3QkFDN0MsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO3dCQUM5RCxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFO3FCQUN6RDtpQkFDRjthQUNGO1lBQ0QsV0FBVyxFQUFFO2dCQUNYO29CQUNFLEtBQUssRUFBRSxPQUFPO29CQUNkLFNBQVMsRUFBRSxRQUFRO29CQUNuQixLQUFLLEVBQUUsaUJBQWlCO2lCQUN6QjthQUNGO1NBQ0Y7UUFDRCxjQUFjLEVBQUU7WUFDZCxVQUFVLEVBQUU7Z0JBQ1Y7b0JBQ0UsSUFBSSxFQUFFLFdBQVc7b0JBQ2pCLElBQUksRUFBRSxXQUFXO29CQUNqQixXQUFXLEVBQUUsaUJBQWlCO2lCQUMvQjthQUNGO1lBQ0QsYUFBYSxFQUFFLElBQUk7WUFDbkIsVUFBVSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUM7U0FDNUM7UUFDRCxzQkFBc0IsRUFBRTtZQUN0QjtnQkFDRSxJQUFJLEVBQUUsNEJBQTRCO2dCQUNsQyxXQUFXLEVBQUUseUJBQXlCO2dCQUN0QyxZQUFZLEVBQUUsQ0FBQyxlQUFlLEVBQUUsZ0JBQWdCLENBQUM7Z0JBQ2pELGtCQUFrQixFQUFFLENBQUMsd0JBQXdCLENBQUM7YUFDL0M7U0FDRjtLQUNGLENBQUM7QUFDSixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaXNzaW1tZW5hc2hlL1ZFUlNBVElMIFNETEMgRlcvdGVzdHMvdW5pdC9jb250cmFjdHMvY29udHJhY3QtdmFsaWRhdG9yLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVbml0IFRlc3RzOiBDb250cmFjdCBWYWxpZGF0b3JcbiAqXG4gKiBDb3ZlcmFnZSBUYXJnZXQ6IDkwJSsgKGNyaXRpY2FsIHBhdGgpXG4gKlxuICogVGVzdCBDb3ZlcmFnZTpcbiAqIC0gU2NoZW1hIHZhbGlkYXRpb24gKHJlcXVpcmVkIGZpZWxkcywgdHlwZXMpXG4gKiAtIEJ1c2luZXNzIGxvZ2ljIHZhbGlkYXRpb24gKHdvcmsgaXRlbXMsIGNyaXRlcmlhKVxuICogLSBNZW1vcnkgc25hcHNob3QgdmFsaWRhdGlvblxuICogLSBRdWFsaXR5IGdhdGVzIHZhbGlkYXRpb25cbiAqIC0gVGhyZWUtdGllciBjb250cmFjdCB2YWxpZGF0aW9uXG4gKiAtIFN0cmljdCBtb2RlIGJlaGF2aW9yXG4gKiAtIFF1YWxpdHkgc2NvcmUgY2FsY3VsYXRpb25cbiAqIC0gRXJyb3IgYW5kIHdhcm5pbmcgZ2VuZXJhdGlvblxuICovXG5cbmltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0LCBiZWZvcmVFYWNoIH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5pbXBvcnQge1xuICBDb250cmFjdFZhbGlkYXRvcixcbiAgdmFsaWRhdGVDb250cmFjdCxcbiAgVmFsaWRhdGlvblJlc3VsdCxcbiAgVmFsaWRhdGlvbk9wdGlvbnNcbn0gZnJvbSAnLi4vLi4vLi4vc3JjL2FnZW50cy9jb250cmFjdHMvY29udHJhY3QtdmFsaWRhdG9yLmpzJztcbmltcG9ydCB7XG4gIEFnZW50SGFuZG9mZkNvbnRyYWN0LFxuICBUaHJlZVRpZXJIYW5kb2ZmQ29udHJhY3QsXG4gIENvbnRyYWN0QnVpbGRlcixcbiAgQ09OVFJBQ1RfVkVSU0lPTlxufSBmcm9tICcuLi8uLi8uLi9zcmMvYWdlbnRzL2NvbnRyYWN0cy9hZ2VudC1oYW5kb2ZmLWNvbnRyYWN0LmpzJztcblxuZGVzY3JpYmUoJ0NvbnRyYWN0VmFsaWRhdG9yJywgKCkgPT4ge1xuICBsZXQgdmFsaWRhdG9yOiBDb250cmFjdFZhbGlkYXRvcjtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICB2YWxpZGF0b3IgPSBuZXcgQ29udHJhY3RWYWxpZGF0b3IoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1NjaGVtYSBWYWxpZGF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgYSBjb21wbGV0ZSB2YWxpZCBjb250cmFjdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyYWN0ID0gY3JlYXRlVmFsaWRDb250cmFjdCgpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9ycykudG9IYXZlTGVuZ3RoKDApO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zY29yZSkudG9CZUdyZWF0ZXJUaGFuKDkwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IGNvbnRyYWN0IHdpdGhvdXQgY29udHJhY3RJZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyYWN0ID0gY3JlYXRlVmFsaWRDb250cmFjdCgpO1xuICAgICAgY29udHJhY3QuY29udHJhY3RJZCA9ICcnIGFzIGFueTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcnMpLnRvRXF1YWwoXG4gICAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGZpZWxkOiAnY29udHJhY3RJZCcsXG4gICAgICAgICAgICBzZXZlcml0eTogJ2NyaXRpY2FsJ1xuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgY29udHJhY3Qgd2l0aG91dCB2ZXJzaW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC52ZXJzaW9uID0gJycgYXMgYW55O1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0b3IudmFsaWRhdGVCZWZvcmVTZW5kKGNvbnRyYWN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9ycykudG9FcXVhbChcbiAgICAgICAgZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXG4gICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgZmllbGQ6ICd2ZXJzaW9uJyxcbiAgICAgICAgICAgIHNldmVyaXR5OiAnaGlnaCdcbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgd2FybiBvbiB2ZXJzaW9uIG1pc21hdGNoJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC52ZXJzaW9uID0gJzAuOS4wJzsgLy8gRGlmZmVyZW50IGZyb20gQ09OVFJBQ1RfVkVSU0lPTlxuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0b3IudmFsaWRhdGVCZWZvcmVTZW5kKGNvbnRyYWN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC53YXJuaW5ncykudG9FcXVhbChcbiAgICAgICAgZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXG4gICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgZmllbGQ6ICd2ZXJzaW9uJyxcbiAgICAgICAgICAgIGltcGFjdDogJ21lZGl1bSdcbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IGNvbnRyYWN0IHdpdGhvdXQgc2VuZGVyJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC5zZW5kZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUJlZm9yZVNlbmQoY29udHJhY3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JzKS50b0VxdWFsKFxuICAgICAgICBleHBlY3QuYXJyYXlDb250YWluaW5nKFtcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICBmaWVsZDogJ3NlbmRlci5hZ2VudElkJyxcbiAgICAgICAgICAgIHNldmVyaXR5OiAnY3JpdGljYWwnXG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlamVjdCBjb250cmFjdCB3aXRob3V0IHJlY2VpdmVycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyYWN0ID0gY3JlYXRlVmFsaWRDb250cmFjdCgpO1xuICAgICAgY29udHJhY3QucmVjZWl2ZXJzID0gW107XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUJlZm9yZVNlbmQoY29udHJhY3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JzKS50b0VxdWFsKFxuICAgICAgICBleHBlY3QuYXJyYXlDb250YWluaW5nKFtcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICBmaWVsZDogJ3JlY2VpdmVycycsXG4gICAgICAgICAgICBzZXZlcml0eTogJ2NyaXRpY2FsJ1xuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgY29udHJhY3Qgd2l0aG91dCB0eXBlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC50eXBlID0gdW5kZWZpbmVkIGFzIGFueTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcnMpLnRvRXF1YWwoXG4gICAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGZpZWxkOiAndHlwZScsXG4gICAgICAgICAgICBzZXZlcml0eTogJ2hpZ2gnXG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlamVjdCBjb250cmFjdCB3aXRob3V0IHdvcmsgaXRlbXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250cmFjdCA9IGNyZWF0ZVZhbGlkQ29udHJhY3QoKTtcbiAgICAgIGNvbnRyYWN0LndvcmtJdGVtcyA9IFtdO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0b3IudmFsaWRhdGVCZWZvcmVTZW5kKGNvbnRyYWN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9ycykudG9FcXVhbChcbiAgICAgICAgZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXG4gICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgZmllbGQ6ICd3b3JrSXRlbXMnLFxuICAgICAgICAgICAgc2V2ZXJpdHk6ICdjcml0aWNhbCdcbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IGNvbnRyYWN0IHdpdGhvdXQgbWVtb3J5IHNuYXBzaG90JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC5tZW1vcnlTbmFwc2hvdCA9IHVuZGVmaW5lZCBhcyBhbnk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUJlZm9yZVNlbmQoY29udHJhY3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JzKS50b0VxdWFsKFxuICAgICAgICBleHBlY3QuYXJyYXlDb250YWluaW5nKFtcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICBmaWVsZDogJ21lbW9yeVNuYXBzaG90JyxcbiAgICAgICAgICAgIHNldmVyaXR5OiAnaGlnaCdcbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0J1c2luZXNzIExvZ2ljIFZhbGlkYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZWplY3Qgd29yayBpdGVtIHdpdGhvdXQgaWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250cmFjdCA9IGNyZWF0ZVZhbGlkQ29udHJhY3QoKTtcbiAgICAgIGNvbnRyYWN0LndvcmtJdGVtc1swXS5pZCA9ICcnIGFzIGFueTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcnMpLnRvRXF1YWwoXG4gICAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGZpZWxkOiAnd29ya0l0ZW1zWzBdLmlkJyxcbiAgICAgICAgICAgIHNldmVyaXR5OiAnaGlnaCdcbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IHdvcmsgaXRlbSB3aXRob3V0IGRlc2NyaXB0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC53b3JrSXRlbXNbMF0uZGVzY3JpcHRpb24gPSAnJztcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcnMpLnRvRXF1YWwoXG4gICAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGZpZWxkOiAnd29ya0l0ZW1zWzBdLmRlc2NyaXB0aW9uJyxcbiAgICAgICAgICAgIHNldmVyaXR5OiAnbWVkaXVtJ1xuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB3YXJuIG9uIHdvcmsgaXRlbSB3aXRob3V0IGFjY2VwdGFuY2UgY3JpdGVyaWEnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250cmFjdCA9IGNyZWF0ZVZhbGlkQ29udHJhY3QoKTtcbiAgICAgIGNvbnRyYWN0LndvcmtJdGVtc1swXS5hY2NlcHRhbmNlQ3JpdGVyaWEgPSBbXTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQud2FybmluZ3MpLnRvRXF1YWwoXG4gICAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGZpZWxkOiAnd29ya0l0ZW1zWzBdLmFjY2VwdGFuY2VDcml0ZXJpYScsXG4gICAgICAgICAgICBpbXBhY3Q6ICdoaWdoJ1xuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgY2lyY3VsYXIgZGVwZW5kZW5jaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC53b3JrSXRlbXNbMF0uZGVwZW5kZW5jaWVzID0gW2NvbnRyYWN0LndvcmtJdGVtc1swXS5pZF07XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUJlZm9yZVNlbmQoY29udHJhY3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JzKS50b0VxdWFsKFxuICAgICAgICBleHBlY3QuYXJyYXlDb250YWluaW5nKFtcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICBmaWVsZDogJ3dvcmtJdGVtc1swXS5kZXBlbmRlbmNpZXMnLFxuICAgICAgICAgICAgc2V2ZXJpdHk6ICdtZWRpdW0nXG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHdhcm4gb24gbWlzc2luZyBleHBlY3RlZCBvdXRwdXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250cmFjdCA9IGNyZWF0ZVZhbGlkQ29udHJhY3QoKTtcbiAgICAgIGNvbnRyYWN0LmV4cGVjdGVkT3V0cHV0ID0gdW5kZWZpbmVkIGFzIGFueTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQud2FybmluZ3MpLnRvRXF1YWwoXG4gICAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGZpZWxkOiAnZXhwZWN0ZWRPdXRwdXQnLFxuICAgICAgICAgICAgaW1wYWN0OiAnaGlnaCdcbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgd2FybiBvbiBtaXNzaW5nIGFydGlmYWN0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyYWN0ID0gY3JlYXRlVmFsaWRDb250cmFjdCgpO1xuICAgICAgY29udHJhY3QuZXhwZWN0ZWRPdXRwdXQuYXJ0aWZhY3RzID0gW107XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUJlZm9yZVNlbmQoY29udHJhY3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0Lndhcm5pbmdzKS50b0VxdWFsKFxuICAgICAgICBleHBlY3QuYXJyYXlDb250YWluaW5nKFtcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICBmaWVsZDogJ2V4cGVjdGVkT3V0cHV0LmFydGlmYWN0cycsXG4gICAgICAgICAgICBpbXBhY3Q6ICdtZWRpdW0nXG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHdhcm4gb24gbWlzc2luZyBzdWNjZXNzIGNyaXRlcmlhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC5leHBlY3RlZE91dHB1dC5zdWNjZXNzQ3JpdGVyaWEgPSBbXTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQud2FybmluZ3MpLnRvRXF1YWwoXG4gICAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGZpZWxkOiAnZXhwZWN0ZWRPdXRwdXQuc3VjY2Vzc0NyaXRlcmlhJyxcbiAgICAgICAgICAgIGltcGFjdDogJ2hpZ2gnXG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHdhcm4gb24gc2VxdWVudGlhbCBoYW5kb2ZmIHdpdGggbXVsdGlwbGUgcmVjZWl2ZXJzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC50eXBlID0gJ3NlcXVlbnRpYWwnO1xuICAgICAgY29udHJhY3QucmVjZWl2ZXJzID0gW1xuICAgICAgICB7IGFnZW50SWQ6ICdtYXJjdXMtYmFja2VuZCcgfSxcbiAgICAgICAgeyBhZ2VudElkOiAnamFtZXMtZnJvbnRlbmQnIH1cbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUJlZm9yZVNlbmQoY29udHJhY3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0Lndhcm5pbmdzKS50b0VxdWFsKFxuICAgICAgICBleHBlY3QuYXJyYXlDb250YWluaW5nKFtcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICBmaWVsZDogJ3R5cGUnLFxuICAgICAgICAgICAgaW1wYWN0OiAnbWVkaXVtJ1xuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB3YXJuIG9uIHBhcmFsbGVsIGhhbmRvZmYgd2l0aCBzaW5nbGUgcmVjZWl2ZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250cmFjdCA9IGNyZWF0ZVZhbGlkQ29udHJhY3QoKTtcbiAgICAgIGNvbnRyYWN0LnR5cGUgPSAncGFyYWxsZWwnO1xuICAgICAgY29udHJhY3QucmVjZWl2ZXJzID0gW3sgYWdlbnRJZDogJ21hcmN1cy1iYWNrZW5kJyB9XTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQud2FybmluZ3MpLnRvRXF1YWwoXG4gICAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGZpZWxkOiAndHlwZScsXG4gICAgICAgICAgICBpbXBhY3Q6ICdsb3cnXG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdNZW1vcnkgU25hcHNob3QgVmFsaWRhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJlamVjdCBtaXNzaW5nIG1lbW9yeSBzbmFwc2hvdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyYWN0ID0gY3JlYXRlVmFsaWRDb250cmFjdCgpO1xuICAgICAgY29udHJhY3QubWVtb3J5U25hcHNob3QgPSBudWxsIGFzIGFueTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcnMpLnRvRXF1YWwoXG4gICAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGZpZWxkOiAnbWVtb3J5U25hcHNob3QnLFxuICAgICAgICAgICAgc2V2ZXJpdHk6ICdjcml0aWNhbCdcbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IHNuYXBzaG90IHdpdGhvdXQgYWdlbnRJZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyYWN0ID0gY3JlYXRlVmFsaWRDb250cmFjdCgpO1xuICAgICAgY29udHJhY3QubWVtb3J5U25hcHNob3QuYWdlbnRJZCA9ICcnIGFzIGFueTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcnMpLnRvRXF1YWwoXG4gICAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGZpZWxkOiAnbWVtb3J5U25hcHNob3QuYWdlbnRJZCcsXG4gICAgICAgICAgICBzZXZlcml0eTogJ2hpZ2gnXG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlamVjdCBzbmFwc2hvdCB3aXRob3V0IHRpbWVzdGFtcCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyYWN0ID0gY3JlYXRlVmFsaWRDb250cmFjdCgpO1xuICAgICAgY29udHJhY3QubWVtb3J5U25hcHNob3QudGltZXN0YW1wID0gbnVsbCBhcyBhbnk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUJlZm9yZVNlbmQoY29udHJhY3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JzKS50b0VxdWFsKFxuICAgICAgICBleHBlY3QuYXJyYXlDb250YWluaW5nKFtcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICBmaWVsZDogJ21lbW9yeVNuYXBzaG90LnRpbWVzdGFtcCcsXG4gICAgICAgICAgICBzZXZlcml0eTogJ21lZGl1bSdcbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgd2FybiBvbiBlbXB0eSBjb250ZXh0IHN1bW1hcnknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250cmFjdCA9IGNyZWF0ZVZhbGlkQ29udHJhY3QoKTtcbiAgICAgIGNvbnRyYWN0Lm1lbW9yeVNuYXBzaG90LmNvbnRleHRTdW1tYXJ5ID0gJyc7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUJlZm9yZVNlbmQoY29udHJhY3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0Lndhcm5pbmdzKS50b0VxdWFsKFxuICAgICAgICBleHBlY3QuYXJyYXlDb250YWluaW5nKFtcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICBmaWVsZDogJ21lbW9yeVNuYXBzaG90LmNvbnRleHRTdW1tYXJ5JyxcbiAgICAgICAgICAgIGltcGFjdDogJ2hpZ2gnXG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHdhcm4gb24gZW1wdHkgbWVtb3J5IGZpbGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC5tZW1vcnlTbmFwc2hvdC5tZW1vcnlGaWxlcyA9IHt9O1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0b3IudmFsaWRhdGVCZWZvcmVTZW5kKGNvbnRyYWN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC53YXJuaW5ncykudG9FcXVhbChcbiAgICAgICAgZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXG4gICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgZmllbGQ6ICdtZW1vcnlTbmFwc2hvdC5tZW1vcnlGaWxlcycsXG4gICAgICAgICAgICBpbXBhY3Q6ICdtZWRpdW0nXG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHdhcm4gb24gZW1wdHkgY3JpdGljYWwgcGF0dGVybnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250cmFjdCA9IGNyZWF0ZVZhbGlkQ29udHJhY3QoKTtcbiAgICAgIGNvbnRyYWN0Lm1lbW9yeVNuYXBzaG90LmNyaXRpY2FsUGF0dGVybnMgPSBbXTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQud2FybmluZ3MpLnRvRXF1YWwoXG4gICAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGZpZWxkOiAnbWVtb3J5U25hcHNob3QuY3JpdGljYWxQYXR0ZXJucycsXG4gICAgICAgICAgICBpbXBhY3Q6ICdtZWRpdW0nXG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHdhcm4gb24gemVybyB0b2tlbiBlc3RpbWF0ZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyYWN0ID0gY3JlYXRlVmFsaWRDb250cmFjdCgpO1xuICAgICAgY29udHJhY3QubWVtb3J5U25hcHNob3QuZXN0aW1hdGVkVG9rZW5zID0gMDtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQud2FybmluZ3MpLnRvRXF1YWwoXG4gICAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGZpZWxkOiAnbWVtb3J5U25hcHNob3QuZXN0aW1hdGVkVG9rZW5zJyxcbiAgICAgICAgICAgIGltcGFjdDogJ2xvdydcbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgd2FybiBvbiBsYXJnZSBzbmFwc2hvdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyYWN0ID0gY3JlYXRlVmFsaWRDb250cmFjdCgpO1xuICAgICAgY29udHJhY3QubWVtb3J5U25hcHNob3QuZXN0aW1hdGVkVG9rZW5zID0gNjAwMDA7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUJlZm9yZVNlbmQoY29udHJhY3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0Lndhcm5pbmdzKS50b0VxdWFsKFxuICAgICAgICBleHBlY3QuYXJyYXlDb250YWluaW5nKFtcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICBmaWVsZDogJ21lbW9yeVNuYXBzaG90LmVzdGltYXRlZFRva2VucycsXG4gICAgICAgICAgICBpbXBhY3Q6ICdtZWRpdW0nXG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdRdWFsaXR5IEdhdGVzIFZhbGlkYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB3YXJuIG9uIG1pc3NpbmcgcXVhbGl0eSBnYXRlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyYWN0ID0gY3JlYXRlVmFsaWRDb250cmFjdCgpO1xuICAgICAgY29udHJhY3QuZXhwZWN0ZWRPdXRwdXQucXVhbGl0eUdhdGVzID0gdW5kZWZpbmVkO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0b3IudmFsaWRhdGVCZWZvcmVTZW5kKGNvbnRyYWN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC53YXJuaW5ncykudG9FcXVhbChcbiAgICAgICAgZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXG4gICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgZmllbGQ6ICdleHBlY3RlZE91dHB1dC5xdWFsaXR5R2F0ZXMnLFxuICAgICAgICAgICAgaW1wYWN0OiAnaGlnaCdcbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IHF1YWxpdHkgZ2F0ZSB3aXRob3V0IG5hbWUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250cmFjdCA9IGNyZWF0ZVZhbGlkQ29udHJhY3QoKTtcbiAgICAgIGNvbnRyYWN0LmV4cGVjdGVkT3V0cHV0LnF1YWxpdHlHYXRlcyA9IFtcbiAgICAgICAgeyBuYW1lOiAnJywgZGVzY3JpcHRpb246ICdUZXN0IGNvdmVyYWdlJywgdGhyZXNob2xkOiA4MCB9XG4gICAgICBdO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0b3IudmFsaWRhdGVCZWZvcmVTZW5kKGNvbnRyYWN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9ycykudG9FcXVhbChcbiAgICAgICAgZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXG4gICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgZmllbGQ6ICdleHBlY3RlZE91dHB1dC5xdWFsaXR5R2F0ZXNbMF0ubmFtZScsXG4gICAgICAgICAgICBzZXZlcml0eTogJ21lZGl1bSdcbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgd2FybiBvbiBxdWFsaXR5IGdhdGUgd2l0aG91dCB0aHJlc2hvbGQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250cmFjdCA9IGNyZWF0ZVZhbGlkQ29udHJhY3QoKTtcbiAgICAgIGNvbnRyYWN0LmV4cGVjdGVkT3V0cHV0LnF1YWxpdHlHYXRlcyA9IFtcbiAgICAgICAgeyBuYW1lOiAnQ292ZXJhZ2UnLCBkZXNjcmlwdGlvbjogJ1Rlc3QgY292ZXJhZ2UnLCB0aHJlc2hvbGQ6IHVuZGVmaW5lZCBhcyBhbnkgfVxuICAgICAgXTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQud2FybmluZ3MpLnRvRXF1YWwoXG4gICAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGZpZWxkOiAnZXhwZWN0ZWRPdXRwdXQucXVhbGl0eUdhdGVzWzBdLnRocmVzaG9sZCcsXG4gICAgICAgICAgICBpbXBhY3Q6ICdoaWdoJ1xuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnVGhyZWUtVGllciBDb250cmFjdCBWYWxpZGF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgY29tcGxldGUgdGhyZWUtdGllciBjb250cmFjdCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyYWN0ID0gY3JlYXRlVmFsaWRUaHJlZVRpZXJDb250cmFjdCgpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdG9yLnZhbGlkYXRlVGhyZWVUaWVyKGNvbnRyYWN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JzKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlamVjdCB0aHJlZS10aWVyIGNvbnRyYWN0IHdpdGhvdXQgQVBJIGVuZHBvaW50cycsICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyYWN0ID0gY3JlYXRlVmFsaWRUaHJlZVRpZXJDb250cmFjdCgpO1xuICAgICAgY29udHJhY3QuYXBpQ29udHJhY3QuZW5kcG9pbnRzID0gW107XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRvci52YWxpZGF0ZVRocmVlVGllcihjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcnMpLnRvRXF1YWwoXG4gICAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGZpZWxkOiAnYXBpQ29udHJhY3QuZW5kcG9pbnRzJyxcbiAgICAgICAgICAgIHNldmVyaXR5OiAnY3JpdGljYWwnXG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlamVjdCB0aHJlZS10aWVyIGNvbnRyYWN0IHdpdGhvdXQgZGF0YWJhc2UgdGFibGVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZFRocmVlVGllckNvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC5kYXRhYmFzZVNjaGVtYS50YWJsZXMgPSBbXTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdG9yLnZhbGlkYXRlVGhyZWVUaWVyKGNvbnRyYWN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9ycykudG9FcXVhbChcbiAgICAgICAgZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXG4gICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgZmllbGQ6ICdkYXRhYmFzZVNjaGVtYS50YWJsZXMnLFxuICAgICAgICAgICAgc2V2ZXJpdHk6ICdjcml0aWNhbCdcbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IHRocmVlLXRpZXIgY29udHJhY3Qgd2l0aG91dCBVSSBjb21wb25lbnRzJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZFRocmVlVGllckNvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC51aVJlcXVpcmVtZW50cy5jb21wb25lbnRzID0gW107XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRvci52YWxpZGF0ZVRocmVlVGllcihjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcnMpLnRvRXF1YWwoXG4gICAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGZpZWxkOiAndWlSZXF1aXJlbWVudHMuY29tcG9uZW50cycsXG4gICAgICAgICAgICBzZXZlcml0eTogJ2NyaXRpY2FsJ1xuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB3YXJuIG9uIG1pc3NpbmcgcmVxdWlyZWQgYWdlbnRzJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZFRocmVlVGllckNvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC5yZWNlaXZlcnMgPSBbXG4gICAgICAgIHsgYWdlbnRJZDogJ21hcmN1cy1iYWNrZW5kJywgcm9sZTogJ2FwaScgfSxcbiAgICAgICAgeyBhZ2VudElkOiAnamFtZXMtZnJvbnRlbmQnLCByb2xlOiAnZnJvbnRlbmQnIH1cbiAgICAgICAgLy8gTWlzc2luZyBkYW5hLWRhdGFiYXNlXG4gICAgICBdO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0b3IudmFsaWRhdGVUaHJlZVRpZXIoY29udHJhY3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0Lndhcm5pbmdzKS50b0VxdWFsKFxuICAgICAgICBleHBlY3QuYXJyYXlDb250YWluaW5nKFtcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICBmaWVsZDogJ3JlY2VpdmVycycsXG4gICAgICAgICAgICBpbXBhY3Q6ICdoaWdoJ1xuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnVmFsaWRhdGlvbiBBZnRlciBSZWNlaXZlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmVqZWN0IGV4cGlyZWQgY29udHJhY3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250cmFjdCA9IGNyZWF0ZVZhbGlkQ29udHJhY3QoKTtcbiAgICAgIGNvbnRyYWN0LmV4cGlyZXNBdCA9IG5ldyBEYXRlKERhdGUubm93KCkgLSAxMDAwKTsgLy8gRXhwaXJlZCAxIHNlY29uZCBhZ29cblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQWZ0ZXJSZWNlaXZlKGNvbnRyYWN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9ycykudG9FcXVhbChcbiAgICAgICAgZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXG4gICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgZmllbGQ6ICdleHBpcmVzQXQnLFxuICAgICAgICAgICAgc2V2ZXJpdHk6ICdjcml0aWNhbCdcbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgYWNjZXB0IG5vbi1leHBpcmVkIGNvbnRyYWN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC5leHBpcmVzQXQgPSBuZXcgRGF0ZShEYXRlLm5vdygpICsgMzYwMDAwMCk7IC8vIEV4cGlyZXMgaW4gMSBob3VyXG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUFmdGVyUmVjZWl2ZShjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGFjY2VwdCBjb250cmFjdCB3aXRob3V0IGV4cGlyYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250cmFjdCA9IGNyZWF0ZVZhbGlkQ29udHJhY3QoKTtcbiAgICAgIGNvbnRyYWN0LmV4cGlyZXNBdCA9IHVuZGVmaW5lZDtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQWZ0ZXJSZWNlaXZlKGNvbnRyYWN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1N0cmljdCBNb2RlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY29udmVydCB3YXJuaW5ncyB0byBlcnJvcnMgaW4gc3RyaWN0IG1vZGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBzdHJpY3RWYWxpZGF0b3IgPSBuZXcgQ29udHJhY3RWYWxpZGF0b3IoeyBzdHJpY3RNb2RlOiB0cnVlIH0pO1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC53b3JrSXRlbXNbMF0uYWNjZXB0YW5jZUNyaXRlcmlhID0gW107IC8vIFRoaXMgbm9ybWFsbHkgZ2VuZXJhdGVzIHdhcm5pbmdcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3RyaWN0VmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcnMpLnRvRXF1YWwoXG4gICAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGZpZWxkOiAnd29ya0l0ZW1zWzBdLmFjY2VwdGFuY2VDcml0ZXJpYSdcbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICAgIGV4cGVjdChyZXN1bHQud2FybmluZ3MpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZW5mb3JjZSBtaW5pbXVtIHF1YWxpdHkgc2NvcmUgaW4gc3RyaWN0IG1vZGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBzdHJpY3RWYWxpZGF0b3IgPSBuZXcgQ29udHJhY3RWYWxpZGF0b3Ioe1xuICAgICAgICBzdHJpY3RNb2RlOiB0cnVlLFxuICAgICAgICBtaW5RdWFsaXR5U2NvcmU6IDkwXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICAvLyBBZGQgbXVsdGlwbGUgaXNzdWVzIHRvIGxvd2VyIHNjb3JlXG4gICAgICBjb250cmFjdC53b3JrSXRlbXNbMF0uYWNjZXB0YW5jZUNyaXRlcmlhID0gW107XG4gICAgICBjb250cmFjdC5leHBlY3RlZE91dHB1dC5hcnRpZmFjdHMgPSBbXTtcbiAgICAgIGNvbnRyYWN0Lm1lbW9yeVNuYXBzaG90Lm1lbW9yeUZpbGVzID0ge307XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN0cmljdFZhbGlkYXRvci52YWxpZGF0ZUJlZm9yZVNlbmQoY29udHJhY3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc2NvcmUpLnRvQmVMZXNzVGhhbig5MCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdRdWFsaXR5IFNjb3JlIENhbGN1bGF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY2FsY3VsYXRlIHBlcmZlY3Qgc2NvcmUgZm9yIHZhbGlkIGNvbnRyYWN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0b3IudmFsaWRhdGVCZWZvcmVTZW5kKGNvbnRyYWN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5zY29yZSkudG9CZSgxMDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBkZWR1Y3QgcG9pbnRzIGZvciBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250cmFjdCA9IGNyZWF0ZVZhbGlkQ29udHJhY3QoKTtcbiAgICAgIGNvbnRyYWN0LmNvbnRyYWN0SWQgPSAnJyBhcyBhbnk7IC8vIENyaXRpY2FsIGVycm9yICgtMTUpXG4gICAgICBjb250cmFjdC52ZXJzaW9uID0gJycgYXMgYW55OyAvLyBIaWdoIGVycm9yICgtMTUpXG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUJlZm9yZVNlbmQoY29udHJhY3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnNjb3JlKS50b0JlTGVzc1RoYW5PckVxdWFsKDcwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZGVkdWN0IHBvaW50cyBmb3Igd2FybmluZ3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250cmFjdCA9IGNyZWF0ZVZhbGlkQ29udHJhY3QoKTtcbiAgICAgIGNvbnRyYWN0LndvcmtJdGVtc1swXS5hY2NlcHRhbmNlQ3JpdGVyaWEgPSBbXTsgLy8gV2FybmluZyAoLTUpXG4gICAgICBjb250cmFjdC5tZW1vcnlTbmFwc2hvdC5tZW1vcnlGaWxlcyA9IHt9OyAvLyBXYXJuaW5nICgtNClcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuc2NvcmUpLnRvQmVMZXNzVGhhbigxMDApO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zY29yZSkudG9CZUdyZWF0ZXJUaGFuKDg1KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2xhbXAgc2NvcmUgYmV0d2VlbiAwIGFuZCAxMDAnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250cmFjdCA9IGNyZWF0ZVZhbGlkQ29udHJhY3QoKTtcbiAgICAgIC8vIEFkZCBtYW55IGVycm9ycyB0byBwdXNoIHNjb3JlIGJlbG93IDBcbiAgICAgIGNvbnRyYWN0LmNvbnRyYWN0SWQgPSAnJyBhcyBhbnk7XG4gICAgICBjb250cmFjdC52ZXJzaW9uID0gJycgYXMgYW55O1xuICAgICAgY29udHJhY3Quc2VuZGVyID0ge30gYXMgYW55O1xuICAgICAgY29udHJhY3QucmVjZWl2ZXJzID0gW107XG4gICAgICBjb250cmFjdC50eXBlID0gdW5kZWZpbmVkIGFzIGFueTtcbiAgICAgIGNvbnRyYWN0LndvcmtJdGVtcyA9IFtdO1xuICAgICAgY29udHJhY3QubWVtb3J5U25hcHNob3QgPSBudWxsIGFzIGFueTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuc2NvcmUpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XG4gICAgICBleHBlY3QocmVzdWx0LnNjb3JlKS50b0JlTGVzc1RoYW5PckVxdWFsKDEwMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdWYWxpZGF0aW9uIE9wdGlvbnMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBza2lwIHNjaGVtYSB2YWxpZGF0aW9uIHdoZW4gZGlzYWJsZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjdXN0b21WYWxpZGF0b3IgPSBuZXcgQ29udHJhY3RWYWxpZGF0b3IoeyB2YWxpZGF0ZVNjaGVtYTogZmFsc2UgfSk7XG4gICAgICBjb25zdCBjb250cmFjdCA9IGNyZWF0ZVZhbGlkQ29udHJhY3QoKTtcbiAgICAgIGNvbnRyYWN0LmNvbnRyYWN0SWQgPSAnJyBhcyBhbnk7IC8vIFdvdWxkIG5vcm1hbGx5IGZhaWwgc2NoZW1hIHZhbGlkYXRpb25cblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY3VzdG9tVmFsaWRhdG9yLnZhbGlkYXRlQmVmb3JlU2VuZChjb250cmFjdCk7XG5cbiAgICAgIC8vIFNob3VsZCBub3QgaGF2ZSBzY2hlbWEgdmFsaWRhdGlvbiBlcnJvcnNcbiAgICAgIGNvbnN0IHNjaGVtYUVycm9ycyA9IHJlc3VsdC5lcnJvcnMuZmlsdGVyKGUgPT4gZS5maWVsZCA9PT0gJ2NvbnRyYWN0SWQnKTtcbiAgICAgIGV4cGVjdChzY2hlbWFFcnJvcnMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc2tpcCBidXNpbmVzcyB2YWxpZGF0aW9uIHdoZW4gZGlzYWJsZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjdXN0b21WYWxpZGF0b3IgPSBuZXcgQ29udHJhY3RWYWxpZGF0b3IoeyB2YWxpZGF0ZUJ1c2luZXNzOiBmYWxzZSB9KTtcbiAgICAgIGNvbnN0IGNvbnRyYWN0ID0gY3JlYXRlVmFsaWRDb250cmFjdCgpO1xuICAgICAgY29udHJhY3Qud29ya0l0ZW1zWzBdLmFjY2VwdGFuY2VDcml0ZXJpYSA9IFtdOyAvLyBXb3VsZCBub3JtYWxseSBnZW5lcmF0ZSB3YXJuaW5nXG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGN1c3RvbVZhbGlkYXRvci52YWxpZGF0ZUJlZm9yZVNlbmQoY29udHJhY3QpO1xuXG4gICAgICAvLyBTaG91bGQgbm90IGhhdmUgYnVzaW5lc3MgdmFsaWRhdGlvbiB3YXJuaW5nc1xuICAgICAgY29uc3QgYnVzaW5lc3NXYXJuaW5ncyA9IHJlc3VsdC53YXJuaW5ncy5maWx0ZXIoXG4gICAgICAgIHcgPT4gdy5maWVsZCA9PT0gJ3dvcmtJdGVtc1swXS5hY2NlcHRhbmNlQ3JpdGVyaWEnXG4gICAgICApO1xuICAgICAgZXhwZWN0KGJ1c2luZXNzV2FybmluZ3MpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc2tpcCBtZW1vcnkgdmFsaWRhdGlvbiB3aGVuIGRpc2FibGVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY3VzdG9tVmFsaWRhdG9yID0gbmV3IENvbnRyYWN0VmFsaWRhdG9yKHsgdmFsaWRhdGVNZW1vcnk6IGZhbHNlIH0pO1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC5tZW1vcnlTbmFwc2hvdC5hZ2VudElkID0gJycgYXMgYW55OyAvLyBXb3VsZCBub3JtYWxseSBmYWlsXG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGN1c3RvbVZhbGlkYXRvci52YWxpZGF0ZUJlZm9yZVNlbmQoY29udHJhY3QpO1xuXG4gICAgICAvLyBTaG91bGQgbm90IGhhdmUgbWVtb3J5IHZhbGlkYXRpb24gZXJyb3JzXG4gICAgICBjb25zdCBtZW1vcnlFcnJvcnMgPSByZXN1bHQuZXJyb3JzLmZpbHRlcihlID0+IGUuZmllbGQuc3RhcnRzV2l0aCgnbWVtb3J5U25hcHNob3QnKSk7XG4gICAgICBleHBlY3QobWVtb3J5RXJyb3JzKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNraXAgcXVhbGl0eSB2YWxpZGF0aW9uIHdoZW4gZGlzYWJsZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjdXN0b21WYWxpZGF0b3IgPSBuZXcgQ29udHJhY3RWYWxpZGF0b3IoeyB2YWxpZGF0ZVF1YWxpdHk6IGZhbHNlIH0pO1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC5leHBlY3RlZE91dHB1dC5xdWFsaXR5R2F0ZXMgPSBbXG4gICAgICAgIHsgbmFtZTogJycsIGRlc2NyaXB0aW9uOiAnVGVzdCcsIHRocmVzaG9sZDogODAgfVxuICAgICAgXTsgLy8gV291bGQgbm9ybWFsbHkgZmFpbFxuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjdXN0b21WYWxpZGF0b3IudmFsaWRhdGVCZWZvcmVTZW5kKGNvbnRyYWN0KTtcblxuICAgICAgLy8gU2hvdWxkIG5vdCBoYXZlIHF1YWxpdHkgdmFsaWRhdGlvbiBlcnJvcnNcbiAgICAgIGNvbnN0IHF1YWxpdHlFcnJvcnMgPSByZXN1bHQuZXJyb3JzLmZpbHRlcihlID0+IGUuZmllbGQuc3RhcnRzV2l0aCgnZXhwZWN0ZWRPdXRwdXQucXVhbGl0eUdhdGVzJykpO1xuICAgICAgZXhwZWN0KHF1YWxpdHlFcnJvcnMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1F1aWNrIFZhbGlkYXRpb24gSGVscGVyJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgY29udHJhY3QgdXNpbmcgaGVscGVyIGZ1bmN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0ZUNvbnRyYWN0KGNvbnRyYWN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc2NvcmUpLnRvQmUoMTAwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgYWNjZXB0IG9wdGlvbnMgaW4gaGVscGVyIGZ1bmN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJhY3QgPSBjcmVhdGVWYWxpZENvbnRyYWN0KCk7XG4gICAgICBjb250cmFjdC53b3JrSXRlbXNbMF0uYWNjZXB0YW5jZUNyaXRlcmlhID0gW107XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRlQ29udHJhY3QoY29udHJhY3QsIHsgc3RyaWN0TW9kZTogdHJ1ZSB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbi8vIEhlbHBlciBmdW5jdGlvbnNcblxuZnVuY3Rpb24gY3JlYXRlVmFsaWRDb250cmFjdCgpOiBBZ2VudEhhbmRvZmZDb250cmFjdCB7XG4gIGNvbnN0IGJ1aWxkZXIgPSBuZXcgQ29udHJhY3RCdWlsZGVyKCdhbGV4LWJhJyk7XG5cbiAgYnVpbGRlclxuICAgIC5hZGRSZWNlaXZlcignbWFyY3VzLWJhY2tlbmQnLCAnYXBpJylcbiAgICAuc2V0VHlwZSgnc2VxdWVudGlhbCcpXG4gICAgLnNldFByaW9yaXR5KCdub3JtYWwnKVxuICAgIC5hZGRXb3JrSXRlbSh7XG4gICAgICBpZDogJ3dvcmstMScsXG4gICAgICB0eXBlOiAnaW1wbGVtZW50YXRpb24nLFxuICAgICAgZGVzY3JpcHRpb246ICdJbXBsZW1lbnQgdXNlciBhdXRoZW50aWNhdGlvbiBBUEknLFxuICAgICAgYWNjZXB0YW5jZUNyaXRlcmlhOiBbXG4gICAgICAgICdQT1NUIC9hcGkvYXV0aC9sb2dpbiBlbmRwb2ludCBjcmVhdGVkJyxcbiAgICAgICAgJ0pXVCB0b2tlbiBnZW5lcmF0aW9uIGltcGxlbWVudGVkJyxcbiAgICAgICAgJ1Bhc3N3b3JkIGhhc2hpbmcgd2l0aCBiY3J5cHQnXG4gICAgICBdLFxuICAgICAgcHJpb3JpdHk6ICdoaWdoJ1xuICAgIH0pXG4gICAgLnNldEV4cGVjdGVkT3V0cHV0KHtcbiAgICAgIGFydGlmYWN0czogW1xuICAgICAgICB7IHR5cGU6ICdjb2RlJywgZGVzY3JpcHRpb246ICdBUEkgZW5kcG9pbnRzJywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICAgICAgeyB0eXBlOiAndGVzdHMnLCBkZXNjcmlwdGlvbjogJ1VuaXQgdGVzdHMnLCByZXF1aXJlZDogdHJ1ZSB9XG4gICAgICBdLFxuICAgICAgcXVhbGl0eUdhdGVzOiBbXG4gICAgICAgIHsgbmFtZTogJ1Rlc3QgQ292ZXJhZ2UnLCBkZXNjcmlwdGlvbjogJ01pbmltdW0gY292ZXJhZ2UnLCB0aHJlc2hvbGQ6IDgwIH1cbiAgICAgIF0sXG4gICAgICBzdWNjZXNzQ3JpdGVyaWE6IFtcbiAgICAgICAgJ0FsbCBlbmRwb2ludHMgd29ya2luZycsXG4gICAgICAgICdUZXN0cyBwYXNzaW5nJyxcbiAgICAgICAgJ1NlY3VyaXR5IHNjYW4gY2xlYW4nXG4gICAgICBdXG4gICAgfSlcbiAgICAuc2V0TWVtb3J5U25hcHNob3Qoe1xuICAgICAgYWdlbnRJZDogJ2FsZXgtYmEnLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgbWVtb3J5RmlsZXM6IHtcbiAgICAgICAgJ3JlcXVpcmVtZW50cy9hdXRoLm1kJzogJ1VzZXIgYXV0aGVudGljYXRpb24gcmVxdWlyZW1lbnRzJ1xuICAgICAgfSxcbiAgICAgIGNyaXRpY2FsUGF0dGVybnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGNhdGVnb3J5OiAnc2VjdXJpdHknLFxuICAgICAgICAgIHRpdGxlOiAnSldUIGF1dGhlbnRpY2F0aW9uIHBhdHRlcm4nLFxuICAgICAgICAgIGNvbnRlbnQ6ICdVc2UgaHR0cE9ubHkgY29va2llcyBmb3IgdG9rZW5zJ1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgY29udGV4dFN1bW1hcnk6ICdJbXBsZW1lbnRpbmcgdXNlciBhdXRoZW50aWNhdGlvbiBzeXN0ZW0nLFxuICAgICAgZXN0aW1hdGVkVG9rZW5zOiA1MDAwXG4gICAgfSlcbiAgICAuc2V0Q29udGV4dCh7XG4gICAgICBmZWF0dXJlOiB7XG4gICAgICAgIG5hbWU6ICdVc2VyIEF1dGhlbnRpY2F0aW9uJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdTZWN1cmUgdXNlciBsb2dpbiBhbmQgc2Vzc2lvbiBtYW5hZ2VtZW50J1xuICAgICAgfVxuICAgIH0pXG4gICAgLnNldEV4cGlyYXRpb24oMjQpO1xuXG4gIHJldHVybiBidWlsZGVyLmJ1aWxkKCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVZhbGlkVGhyZWVUaWVyQ29udHJhY3QoKTogVGhyZWVUaWVySGFuZG9mZkNvbnRyYWN0IHtcbiAgY29uc3QgYmFzZUNvbnRyYWN0ID0gY3JlYXRlVmFsaWRDb250cmFjdCgpO1xuXG4gIHJldHVybiB7XG4gICAgLi4uYmFzZUNvbnRyYWN0LFxuICAgIHR5cGU6ICdwYXJhbGxlbCcsXG4gICAgcmVjZWl2ZXJzOiBbXG4gICAgICB7IGFnZW50SWQ6ICdkYW5hLWRhdGFiYXNlJywgcm9sZTogJ2RhdGFiYXNlJyB9LFxuICAgICAgeyBhZ2VudElkOiAnbWFyY3VzLWJhY2tlbmQnLCByb2xlOiAnYXBpJyB9LFxuICAgICAgeyBhZ2VudElkOiAnamFtZXMtZnJvbnRlbmQnLCByb2xlOiAnZnJvbnRlbmQnIH1cbiAgICBdLFxuICAgIGFwaUNvbnRyYWN0OiB7XG4gICAgICBlbmRwb2ludHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIHBhdGg6ICcvYXBpL2F1dGgvbG9naW4nLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnVXNlciBsb2dpbicsXG4gICAgICAgICAgYXV0aGVudGljYXRpb246IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBzaGFyZWRUeXBlczoge31cbiAgICB9LFxuICAgIGRhdGFiYXNlU2NoZW1hOiB7XG4gICAgICB0YWJsZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICd1c2VycycsXG4gICAgICAgICAgY29sdW1uczogW1xuICAgICAgICAgICAgeyBuYW1lOiAnaWQnLCB0eXBlOiAndXVpZCcsIG51bGxhYmxlOiBmYWxzZSB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnZW1haWwnLCB0eXBlOiAndGV4dCcsIG51bGxhYmxlOiBmYWxzZSwgdW5pcXVlOiB0cnVlIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdwYXNzd29yZF9oYXNoJywgdHlwZTogJ3RleHQnLCBudWxsYWJsZTogZmFsc2UgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIHJsc1BvbGljaWVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0YWJsZTogJ3VzZXJzJyxcbiAgICAgICAgICBvcGVyYXRpb246ICdTRUxFQ1QnLFxuICAgICAgICAgIHVzaW5nOiAnYXV0aC51aWQoKSA9IGlkJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB1aVJlcXVpcmVtZW50czoge1xuICAgICAgY29tcG9uZW50czogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ0xvZ2luRm9ybScsXG4gICAgICAgICAgdHlwZTogJ2NvbXBvbmVudCcsXG4gICAgICAgICAgZGVzY3JpcHRpb246ICdVc2VyIGxvZ2luIGZvcm0nXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBhY2Nlc3NpYmlsaXR5OiAnQUEnLFxuICAgICAgcmVzcG9uc2l2ZTogWydtb2JpbGUnLCAndGFibGV0JywgJ2Rlc2t0b3AnXVxuICAgIH0sXG4gICAgaW50ZWdyYXRpb25DaGVja3BvaW50czogW1xuICAgICAge1xuICAgICAgICBuYW1lOiAnRGF0YWJhc2Ug4oaSIEFQSSBJbnRlZ3JhdGlvbicsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQ29ubmVjdCBBUEkgdG8gZGF0YWJhc2UnLFxuICAgICAgICBwYXJ0aWNpcGFudHM6IFsnZGFuYS1kYXRhYmFzZScsICdtYXJjdXMtYmFja2VuZCddLFxuICAgICAgICBhY2NlcHRhbmNlQ3JpdGVyaWE6IFsnQVBJIGNhbiBxdWVyeSBkYXRhYmFzZSddXG4gICAgICB9XG4gICAgXVxuICB9O1xufVxuIl0sInZlcnNpb24iOjN9