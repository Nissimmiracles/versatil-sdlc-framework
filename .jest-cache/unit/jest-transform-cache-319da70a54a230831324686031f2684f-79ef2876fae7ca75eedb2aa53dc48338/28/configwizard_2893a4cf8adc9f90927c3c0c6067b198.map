{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/src/config/config-wizard.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/src/config/config-wizard.ts"],"sourcesContent":["/**\n * VERSATIL SDLC Framework - Configuration Wizard\n * Interactive setup wizard for first-time users\n */\n\nimport * as readline from 'readline';\nimport { PreferenceManager, UserPreferences } from './preference-manager.js';\nimport { ConfigProfileManager } from './config-profiles.js';\n\nexport class ConfigWizard {\n  private rl: readline.Interface;\n  private preferenceManager: PreferenceManager;\n  private profileManager: ConfigProfileManager;\n\n  constructor() {\n    this.rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n    this.preferenceManager = new PreferenceManager();\n    this.profileManager = new ConfigProfileManager();\n  }\n\n  /**\n   * Run the setup wizard\n   */\n  async run(): Promise<UserPreferences> {\n    console.log('\\n╔═══════════════════════════════════════════════════════════╗');\n    console.log('║   🚀 VERSATIL SDLC Framework - First-Time Setup   🚀   ║');\n    console.log('╚═══════════════════════════════════════════════════════════╝\\n');\n\n    console.log('Welcome! Let\\'s configure your framework preferences.\\n');\n    console.log('You can change these settings anytime using: versatil config\\n');\n\n    // Ask if user wants quick setup or custom\n    const setupType = await this.askChoice(\n      'Choose setup type:',\n      [\n        { key: '1', label: 'Quick Setup (use recommended defaults)', value: 'quick' },\n        { key: '2', label: 'Custom Setup (choose your preferences)', value: 'custom' },\n        { key: '3', label: 'Use Profile (conservative/balanced/aggressive)', value: 'profile' }\n      ],\n      '1'\n    );\n\n    let preferences: UserPreferences;\n\n    if (setupType === 'quick') {\n      preferences = await this.quickSetup();\n    } else if (setupType === 'profile') {\n      preferences = await this.profileSetup();\n    } else {\n      preferences = await this.customSetup();\n    }\n\n    // Save preferences\n    await this.preferenceManager.savePreferences(preferences);\n\n    console.log('\\n✅ Setup complete! Your preferences have been saved.\\n');\n    console.log('To view your preferences: versatil config show');\n    console.log('To modify preferences: versatil config set <key> <value>\\n');\n\n    this.rl.close();\n\n    return preferences;\n  }\n\n  /**\n   * Quick setup with recommended defaults\n   */\n  private async quickSetup(): Promise<UserPreferences> {\n    console.log('\\n📦 Quick Setup - Using Recommended Defaults\\n');\n\n    const preferences = this.preferenceManager.getDefaultPreferences();\n\n    console.log('Your configuration:');\n    console.log('  • Update Behavior: Notify (you approve updates)');\n    console.log('  • Update Channel: Stable (production-ready only)');\n    console.log('  • Safety Level: Balanced (good balance of safety and speed)');\n    console.log('  • Auto-install Security Updates: Yes');\n    console.log('  • Backup Before Update: Yes');\n    console.log('  • Auto-rollback on Failure: Yes');\n    console.log('  • Telemetry: Yes (helps improve the framework)');\n\n    const confirm = await this.askYesNo('\\nContinue with these settings?', true);\n\n    if (!confirm) {\n      console.log('\\nLet\\'s try custom setup instead...\\n');\n      return await this.customSetup();\n    }\n\n    return preferences;\n  }\n\n  /**\n   * Profile-based setup\n   */\n  private async profileSetup(): Promise<UserPreferences> {\n    console.log('\\n📋 Profile-Based Setup\\n');\n\n    const profiles = this.profileManager.getAvailableProfiles();\n\n    console.log('Available profiles:\\n');\n    profiles.forEach(profile => {\n      console.log(`${profile.emoji} ${profile.name}:`);\n      console.log(`   ${profile.description}`);\n      console.log(`   Best for: ${profile.bestFor}`);\n      console.log('');\n    });\n\n    const profileChoice = await this.askChoice(\n      'Choose a profile:',\n      [\n        { key: '1', label: 'Conservative (maximum safety)', value: 'conservative' },\n        { key: '2', label: 'Balanced (recommended)', value: 'balanced' },\n        { key: '3', label: 'Aggressive (latest features)', value: 'aggressive' }\n      ],\n      '2'\n    );\n\n    const profile = this.profileManager.getProfile(profileChoice as any);\n\n    if (!profile) {\n      throw new Error('Invalid profile');\n    }\n\n    console.log(`\\n✅ Using ${profile.name} profile\\n`);\n    console.log(`DEBUG: profileChoice = ${profileChoice}, profile.preferences.updateBehavior = ${profile.preferences.updateBehavior}`);\n\n    return profile.preferences;\n  }\n\n  /**\n   * Custom setup with user choices\n   */\n  private async customSetup(): Promise<UserPreferences> {\n    console.log('\\n⚙️  Custom Setup\\n');\n\n    const preferences = this.preferenceManager.getDefaultPreferences();\n\n    // Update behavior\n    console.log('═══ Update Behavior ═══\\n');\n    preferences.updateBehavior = await this.askChoice(\n      'How should updates be handled?',\n      [\n        { key: '1', label: 'Auto - Install updates automatically', value: 'auto' },\n        { key: '2', label: 'Notify - Notify me, I approve (recommended)', value: 'notify' },\n        { key: '3', label: 'Manual - I check for updates manually', value: 'manual' }\n      ],\n      '2'\n    );\n\n    // Update channel\n    console.log('\\n═══ Update Channel ═══\\n');\n    preferences.updateChannel = await this.askChoice(\n      'Which update channel?',\n      [\n        { key: '1', label: 'Stable - Production-ready releases only (recommended)', value: 'stable' },\n        { key: '2', label: 'Beta - Early access to new features', value: 'beta' },\n        { key: '3', label: 'Alpha - Bleeding edge (may be unstable)', value: 'alpha' }\n      ],\n      '1'\n    );\n\n    // Safety level\n    console.log('\\n═══ Safety Level ═══\\n');\n    preferences.safetyLevel = await this.askChoice(\n      'Choose safety level:',\n      [\n        { key: '1', label: 'Conservative - Maximum safety, slower updates', value: 'conservative' },\n        { key: '2', label: 'Balanced - Good balance (recommended)', value: 'balanced' },\n        { key: '3', label: 'Fast - Faster updates, less validation', value: 'fast' }\n      ],\n      '2'\n    );\n\n    // Security updates\n    console.log('\\n═══ Security Updates ═══\\n');\n    preferences.autoInstallSecurity = await this.askYesNo(\n      'Auto-install security updates? (recommended: yes)',\n      true\n    );\n\n    // Backup\n    console.log('\\n═══ Backup ═══\\n');\n    preferences.backupBeforeUpdate = await this.askYesNo('Create backup before each update? (recommended: yes)', true);\n\n    if (preferences.backupBeforeUpdate) {\n      const maxBackupsStr = await this.askInput(\n        'Maximum number of backups to keep:',\n        '5'\n      );\n      preferences.maxRollbackPoints = parseInt(maxBackupsStr, 10) || 5;\n    }\n\n    // Rollback\n    console.log('\\n═══ Rollback ═══\\n');\n    preferences.rollbackOnFailure = await this.askYesNo(\n      'Auto-rollback if update fails? (recommended: yes)',\n      true\n    );\n\n    // Notifications\n    console.log('\\n═══ Notifications ═══\\n');\n    preferences.notificationLevel = await this.askChoice(\n      'Notification level:',\n      [\n        { key: '1', label: 'All - Show all notifications', value: 'all' },\n        { key: '2', label: 'Important - Important updates only (recommended)', value: 'important' },\n        { key: '3', label: 'Critical - Critical updates only', value: 'critical' },\n        { key: '4', label: 'None - No notifications', value: 'none' }\n      ],\n      '2'\n    );\n\n    // Telemetry\n    console.log('\\n═══ Telemetry ═══\\n');\n    console.log('Telemetry helps us improve the framework by collecting anonymous usage data.');\n    console.log('No personal information is collected.\\n');\n    preferences.enableTelemetry = await this.askYesNo('Enable telemetry?', true);\n\n    if (preferences.enableTelemetry) {\n      preferences.shareErrorReports = await this.askYesNo('Share error reports?', true);\n      preferences.shareUsageStatistics = await this.askYesNo('Share usage statistics?', false);\n    }\n\n    console.log('\\n');\n\n    return preferences;\n  }\n\n  /**\n   * Ask yes/no question\n   */\n  private async askYesNo(question: string, defaultValue: boolean): Promise<boolean> {\n    const defaultStr = defaultValue ? 'Y/n' : 'y/N';\n    const answer = await this.askInput(`${question} (${defaultStr}):`, defaultValue ? 'y' : 'n');\n\n    const normalized = answer.toLowerCase().trim();\n\n    if (normalized === '') {\n      return defaultValue;\n    }\n\n    return normalized === 'y' || normalized === 'yes';\n  }\n\n  /**\n   * Ask input question\n   */\n  private async askInput(question: string, defaultValue: string = ''): Promise<string> {\n    return new Promise(resolve => {\n      this.rl.question(`${question} ${defaultValue ? `[${defaultValue}]` : ''} `, answer => {\n        resolve(answer.trim() || defaultValue);\n      });\n    });\n  }\n\n  /**\n   * Ask choice question\n   */\n  private async askChoice(\n    question: string,\n    choices: Array<{ key: string; label: string; value: string }>,\n    defaultKey: string = '1'\n  ): Promise<any> {\n    console.log(question);\n    choices.forEach(choice => {\n      console.log(`  ${choice.key}. ${choice.label}`);\n    });\n\n    const answer = await this.askInput('\\nYour choice:', defaultKey);\n\n    const choice = choices.find(c => c.key === answer);\n\n    if (!choice) {\n      console.log(`Invalid choice. Using default: ${choices.find(c => c.key === defaultKey)?.label}`);\n      return choices.find(c => c.key === defaultKey)?.value;\n    }\n\n    return choice.value;\n  }\n\n  /**\n   * Run minimal wizard (for CI/automated installs)\n   */\n  async runMinimal(): Promise<UserPreferences> {\n    console.log('🚀 Running automated setup with defaults...');\n\n    const preferences = this.preferenceManager.getDefaultPreferences();\n\n    // Disable interactive features for CI\n    preferences.updateBehavior = 'manual';\n    preferences.notificationLevel = 'none';\n    preferences.enableTelemetry = false;\n\n    await this.preferenceManager.savePreferences(preferences);\n\n    console.log('✅ Automated setup complete');\n\n    return preferences;\n  }\n\n  /**\n   * Update preferences interactively\n   */\n  async updatePreferences(): Promise<void> {\n    console.log('\\n⚙️  Update Preferences\\n');\n\n    const preferences = await this.preferenceManager.getPreferences();\n\n    console.log('Current preferences:');\n    console.log(await this.preferenceManager.getSummary());\n    console.log('');\n\n    const category = await this.askChoice(\n      'What would you like to change?',\n      [\n        { key: '1', label: 'Update settings', value: 'update' },\n        { key: '2', label: 'Rollback settings', value: 'rollback' },\n        { key: '3', label: 'Notification settings', value: 'notification' },\n        { key: '4', label: 'Telemetry settings', value: 'telemetry' },\n        { key: '5', label: 'View all settings', value: 'view' },\n        { key: '6', label: 'Reset to defaults', value: 'reset' }\n      ],\n      '1'\n    );\n\n    switch (category) {\n      case 'update':\n        await this.updateUpdateSettings(preferences);\n        break;\n      case 'rollback':\n        await this.updateRollbackSettings(preferences);\n        break;\n      case 'notification':\n        await this.updateNotificationSettings(preferences);\n        break;\n      case 'telemetry':\n        await this.updateTelemetrySettings(preferences);\n        break;\n      case 'view':\n        console.log(await this.preferenceManager.getSummary());\n        break;\n      case 'reset':\n        const confirm = await this.askYesNo('Reset all preferences to defaults?', false);\n        if (confirm) {\n          await this.preferenceManager.resetToDefaults();\n        }\n        break;\n    }\n\n    this.rl.close();\n  }\n\n  private async updateUpdateSettings(preferences: UserPreferences): Promise<void> {\n    preferences.updateBehavior = await this.askChoice(\n      'Update behavior:',\n      [\n        { key: '1', label: 'Auto', value: 'auto' },\n        { key: '2', label: 'Notify', value: 'notify' },\n        { key: '3', label: 'Manual', value: 'manual' }\n      ],\n      preferences.updateBehavior === 'auto' ? '1' : preferences.updateBehavior === 'notify' ? '2' : '3'\n    );\n\n    await this.preferenceManager.savePreferences(preferences);\n  }\n\n  private async updateRollbackSettings(preferences: UserPreferences): Promise<void> {\n    preferences.rollbackOnFailure = await this.askYesNo(\n      'Auto-rollback on failure?',\n      preferences.rollbackOnFailure\n    );\n\n    await this.preferenceManager.savePreferences(preferences);\n  }\n\n  private async updateNotificationSettings(preferences: UserPreferences): Promise<void> {\n    preferences.notificationLevel = await this.askChoice(\n      'Notification level:',\n      [\n        { key: '1', label: 'All', value: 'all' },\n        { key: '2', label: 'Important', value: 'important' },\n        { key: '3', label: 'Critical', value: 'critical' },\n        { key: '4', label: 'None', value: 'none' }\n      ],\n      preferences.notificationLevel === 'all'\n        ? '1'\n        : preferences.notificationLevel === 'important'\n          ? '2'\n          : preferences.notificationLevel === 'critical'\n            ? '3'\n            : '4'\n    );\n\n    await this.preferenceManager.savePreferences(preferences);\n  }\n\n  private async updateTelemetrySettings(preferences: UserPreferences): Promise<void> {\n    preferences.enableTelemetry = await this.askYesNo('Enable telemetry?', preferences.enableTelemetry);\n\n    await this.preferenceManager.savePreferences(preferences);\n  }\n}\n\n/**\n * Default config wizard instance\n */\nexport const defaultConfigWizard = new ConfigWizard();\n"],"version":3}