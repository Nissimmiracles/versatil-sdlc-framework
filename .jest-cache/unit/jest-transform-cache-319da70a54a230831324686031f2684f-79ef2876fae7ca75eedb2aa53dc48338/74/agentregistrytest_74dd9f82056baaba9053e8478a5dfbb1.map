{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/tests/unit/agents/agent-registry.test.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/tests/unit/agents/agent-registry.test.ts"],"sourcesContent":["/**\n * VERSATIL SDLC Framework - Agent Registry Unit Tests\n * Enhanced Maria-QA Quality Assurance Testing\n *\n * Framework is testing itself using its own methodology!\n */\n\nimport { AgentRegistry } from '../../../src/agents/agent-registry';\nimport { BaseAgent } from '../../../src/agents/base-agent';\nimport { VERSATILLogger } from '../../../src/utils/logger';\n\ndescribe('AgentRegistry', () => {\n  let registry: AgentRegistry;\n  let mockLogger: jest.Mocked<VERSATILLogger>;\n\n  beforeEach(() => {\n    mockLogger = {\n      debug: jest.fn(),\n      info: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn()\n    } as any;\n\n    registry = new AgentRegistry(mockLogger, true); // Skip auto-registration for testing\n  });\n\n  describe('registerAgent', () => {\n    it('should register a new agent successfully', () => {\n      const mockAgent = {\n        id: 'test-agent',\n        name: 'Test Agent',\n        description: 'Test agent for unit testing',\n        activationPatterns: ['*.test.ts'],\n        activate: jest.fn()\n      } as BaseAgent;\n\n      registry.registerAgent(mockAgent);\n\n      const agents = registry.getRegisteredAgents();\n      expect(agents).toHaveLength(1);\n      expect(agents[0].id).toBe('test-agent');\n    });\n\n    it('should prevent duplicate agent registration', () => {\n      const mockAgent1 = {\n        id: 'duplicate-agent',\n        name: 'First Agent',\n        activate: jest.fn()\n      } as BaseAgent;\n\n      const mockAgent2 = {\n        id: 'duplicate-agent',\n        name: 'Second Agent',\n        activate: jest.fn()\n      } as BaseAgent;\n\n      registry.registerAgent(mockAgent1);\n\n      expect(() => {\n        registry.registerAgent(mockAgent2);\n      }).toThrow('Agent with ID duplicate-agent is already registered');\n    });\n  });\n\n  describe('getAgentForFile', () => {\n    it('should return appropriate agent for file pattern', () => {\n      const mockAgent = {\n        id: 'test-agent',\n        name: 'Test Agent',\n        activationPatterns: ['*.test.ts', '**/__tests__/**'],\n        activate: jest.fn()\n      } as BaseAgent;\n\n      registry.registerAgent(mockAgent);\n\n      const agent = registry.getAgentForFile('example.test.ts');\n      expect(agent).toBeDefined();\n      expect(agent?.id).toBe('test-agent');\n    });\n\n    it('should return null for unmatched file patterns', () => {\n      const mockAgent = {\n        id: 'specific-agent',\n        name: 'Specific Agent',\n        activationPatterns: ['*.specific.ts'],\n        activate: jest.fn()\n      } as BaseAgent;\n\n      registry.registerAgent(mockAgent);\n\n      const agent = registry.getAgentForFile('regular.ts');\n      expect(agent).toBeNull();\n    });\n  });\n\n  describe('Framework Self-Testing', () => {\n    it('should validate that framework is testing itself', () => {\n      // This test validates the self-referential nature\n      expect(registry).toBeInstanceOf(AgentRegistry);\n      expect(mockLogger.debug).toBeDefined();\n\n      // Framework using its own quality standards\n      expect(process.env.NODE_ENV).toBe('test');\n    });\n\n    it('should meet BMAD methodology quality standards', () => {\n      // Enhanced Maria-QA standards applied to framework itself\n      const startTime = Date.now();\n\n      const mockAgent = {\n        id: 'performance-test-agent',\n        activate: jest.fn().mockResolvedValue({ success: true })\n      } as BaseAgent;\n\n      registry.registerAgent(mockAgent);\n\n      const executionTime = Date.now() - startTime;\n\n      // BMAD performance requirement: registration should be fast\n      expect(executionTime).toBeLessThan(100);\n\n      // Verify agent was registered correctly\n      const agents = registry.getRegisteredAgents();\n      expect(agents).toHaveLength(1);\n    });\n  });\n});"],"version":3}