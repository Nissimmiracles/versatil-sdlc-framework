{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/tests/unit/config/config-validator.test.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/tests/unit/config/config-validator.test.ts"],"sourcesContent":["/**\n * Test Suite: ConfigValidator\n * Tests for v3.0.0 configuration validation and sanitization\n * Target: 90%+ coverage\n */\n\nimport { ConfigValidator, ValidationResult } from '../../../src/config/config-validator';\nimport { UserPreferences } from '../../../src/config/preference-manager';\n\ndescribe('ConfigValidator', () => {\n  let validator: ConfigValidator;\n\n  beforeEach(() => {\n    validator = new ConfigValidator();\n  });\n\n  describe('Scenario 1: Validate Update Behavior', () => {\n    it('should accept valid update behaviors', () => {\n      const prefs: Partial<UserPreferences> = {\n        updateBehavior: 'auto'\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.valid).toBe(true);\n      expect(result.errors.filter(e => e.field === 'updateBehavior')).toHaveLength(0);\n    });\n\n    it('should reject invalid update behavior', () => {\n      const prefs: Partial<UserPreferences> = {\n        updateBehavior: 'invalid' as any\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors.some(e => e.field === 'updateBehavior')).toBe(true);\n    });\n\n    it('should accept all valid update behaviors', () => {\n      const behaviors: any[] = ['auto', 'notify', 'manual'];\n\n      behaviors.forEach(behavior => {\n        const result = validator.validate({ updateBehavior: behavior });\n        expect(result.valid).toBe(true);\n      });\n    });\n  });\n\n  describe('Scenario 2: Validate Update Channel', () => {\n    it('should accept valid update channels', () => {\n      const prefs: Partial<UserPreferences> = {\n        updateChannel: 'stable'\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.valid).toBe(true);\n    });\n\n    it('should reject invalid update channel', () => {\n      const prefs: Partial<UserPreferences> = {\n        updateChannel: 'experimental' as any\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors.some(e => e.field === 'updateChannel')).toBe(true);\n    });\n  });\n\n  describe('Scenario 3: Validate Safety Level', () => {\n    it('should accept valid safety levels', () => {\n      const levels: any[] = ['conservative', 'balanced', 'fast'];\n\n      levels.forEach(level => {\n        const result = validator.validate({ safetyLevel: level });\n        expect(result.valid).toBe(true);\n      });\n    });\n\n    it('should reject invalid safety level', () => {\n      const prefs: Partial<UserPreferences> = {\n        safetyLevel: 'slow' as any\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.valid).toBe(false);\n    });\n  });\n\n  describe('Scenario 4: Validate Check Frequency', () => {\n    it('should accept valid check frequency', () => {\n      const prefs: Partial<UserPreferences> = {\n        checkFrequency: 24\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.valid).toBe(true);\n    });\n\n    it('should reject negative check frequency', () => {\n      const prefs: Partial<UserPreferences> = {\n        checkFrequency: -5\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors.some(e => e.field === 'checkFrequency')).toBe(true);\n    });\n\n    it('should warn about very frequent checks', () => {\n      const prefs: Partial<UserPreferences> = {\n        checkFrequency: 0.5 // 30 minutes\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.errors.some(e => e.field === 'checkFrequency' && e.severity === 'warning')).toBe(true);\n    });\n\n    it('should accept zero check frequency (disabled)', () => {\n      const prefs: Partial<UserPreferences> = {\n        checkFrequency: 0\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.valid).toBe(true);\n    });\n  });\n\n  describe('Scenario 5: Validate Rollback Behavior', () => {\n    it('should accept valid rollback behaviors', () => {\n      const behaviors: any[] = ['auto', 'prompt', 'manual'];\n\n      behaviors.forEach(behavior => {\n        const result = validator.validate({ rollbackBehavior: behavior });\n        expect(result.valid).toBe(true);\n      });\n    });\n\n    it('should reject invalid rollback behavior', () => {\n      const prefs: Partial<UserPreferences> = {\n        rollbackBehavior: 'never' as any\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.valid).toBe(false);\n    });\n  });\n\n  describe('Scenario 6: Validate Max Rollback Points', () => {\n    it('should accept valid max rollback points', () => {\n      const prefs: Partial<UserPreferences> = {\n        maxRollbackPoints: 5\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.valid).toBe(true);\n    });\n\n    it('should reject negative max rollback points', () => {\n      const prefs: Partial<UserPreferences> = {\n        maxRollbackPoints: -1\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.valid).toBe(false);\n    });\n\n    it('should warn when max rollback points is zero', () => {\n      const prefs: Partial<UserPreferences> = {\n        maxRollbackPoints: 0\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.errors.some(e => e.field === 'maxRollbackPoints' && e.severity === 'warning')).toBe(true);\n    });\n\n    it('should warn when max rollback points is very high', () => {\n      const prefs: Partial<UserPreferences> = {\n        maxRollbackPoints: 25\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.errors.some(e => e.field === 'maxRollbackPoints' && e.severity === 'warning')).toBe(true);\n    });\n  });\n\n  describe('Scenario 7: Check Logical Consistency', () => {\n    it('should warn about auto updates without rollback', () => {\n      const prefs: Partial<UserPreferences> = {\n        updateBehavior: 'auto',\n        rollbackOnFailure: false\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.warnings.some(w => w.field === 'updateBehavior')).toBe(true);\n    });\n\n    it('should warn about alpha channel with conservative safety', () => {\n      const prefs: Partial<UserPreferences> = {\n        updateChannel: 'alpha',\n        safetyLevel: 'conservative'\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.warnings.some(w => w.field === 'updateChannel')).toBe(true);\n    });\n\n    it('should warn about auto updates without backups', () => {\n      const prefs: Partial<UserPreferences> = {\n        updateBehavior: 'auto',\n        backupBeforeUpdate: false\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.warnings.some(w => w.field === 'backupBeforeUpdate')).toBe(true);\n    });\n\n    it('should warn about skipping validation', () => {\n      const prefs: Partial<UserPreferences> = {\n        validateAfterUpdate: false\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.warnings.some(w => w.field === 'validateAfterUpdate')).toBe(true);\n    });\n\n    it('should warn about manual updates with frequent checks', () => {\n      const prefs: Partial<UserPreferences> = {\n        updateBehavior: 'manual',\n        checkFrequency: 1 // Every hour\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.warnings.some(w => w.field === 'checkFrequency')).toBe(true);\n    });\n\n    it('should warn about auto updates with no notifications', () => {\n      const prefs: Partial<UserPreferences> = {\n        updateBehavior: 'auto',\n        notificationLevel: 'none'\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.warnings.some(w => w.field === 'notificationLevel')).toBe(true);\n    });\n\n    it('should warn about prerelease on stable channel', () => {\n      const prefs: Partial<UserPreferences> = {\n        allowPrerelease: true,\n        updateChannel: 'stable'\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.warnings.some(w => w.field === 'allowPrerelease')).toBe(true);\n    });\n  });\n\n  describe('Scenario 8: Generate Suggestions', () => {\n    it('should suggest for unstable channels', () => {\n      const prefs: Partial<UserPreferences> = {\n        updateChannel: 'alpha'\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.suggestions.length).toBeGreaterThan(0);\n      expect(result.suggestions.some(s => s.toLowerCase().includes('rollback'))).toBe(true);\n    });\n\n    it('should suggest when telemetry is disabled', () => {\n      const prefs: Partial<UserPreferences> = {\n        enableTelemetry: false\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.suggestions.some(s => s.includes('Telemetry'))).toBe(true);\n    });\n\n    it('should suggest security auto-install', () => {\n      const prefs: Partial<UserPreferences> = {\n        autoInstallSecurity: false\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.suggestions.some(s => s.includes('security'))).toBe(true);\n    });\n\n    it('should suggest for fast safety level', () => {\n      const prefs: Partial<UserPreferences> = {\n        safetyLevel: 'fast'\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.suggestions.some(s => s.includes('backup'))).toBe(true);\n    });\n  });\n\n  describe('Scenario 9: Sanitize Preferences', () => {\n    it('should sanitize invalid update behavior to default', () => {\n      const prefs: Partial<UserPreferences> = {\n        updateBehavior: 'invalid' as any\n      };\n\n      const sanitized = validator.sanitize(prefs);\n\n      expect(sanitized.updateBehavior).toBe('notify');\n    });\n\n    it('should sanitize invalid update channel to stable', () => {\n      const prefs: Partial<UserPreferences> = {\n        updateChannel: 'experimental' as any\n      };\n\n      const sanitized = validator.sanitize(prefs);\n\n      expect(sanitized.updateChannel).toBe('stable');\n    });\n\n    it('should sanitize negative check frequency to zero', () => {\n      const prefs: Partial<UserPreferences> = {\n        checkFrequency: -10\n      };\n\n      const sanitized = validator.sanitize(prefs);\n\n      expect(sanitized.checkFrequency).toBe(0);\n    });\n\n    it('should cap max rollback points at 50', () => {\n      const prefs: Partial<UserPreferences> = {\n        maxRollbackPoints: 100\n      };\n\n      const sanitized = validator.sanitize(prefs);\n\n      expect(sanitized.maxRollbackPoints).toBe(50);\n    });\n\n    it('should sanitize invalid safety level to balanced', () => {\n      const prefs: Partial<UserPreferences> = {\n        safetyLevel: 'turbo' as any\n      };\n\n      const sanitized = validator.sanitize(prefs);\n\n      expect(sanitized.safetyLevel).toBe('balanced');\n    });\n\n    it('should sanitize invalid rollback behavior to prompt', () => {\n      const prefs: Partial<UserPreferences> = {\n        rollbackBehavior: 'never' as any\n      };\n\n      const sanitized = validator.sanitize(prefs);\n\n      expect(sanitized.rollbackBehavior).toBe('prompt');\n    });\n  });\n\n  describe('Scenario 10: Generate Validation Report', () => {\n    it('should generate report with errors', () => {\n      const result: ValidationResult = {\n        valid: false,\n        errors: [\n          { field: 'updateBehavior', message: 'Invalid value', severity: 'error' },\n          { field: 'checkFrequency', message: 'Must be >= 0', severity: 'error' }\n        ],\n        warnings: [],\n        suggestions: []\n      };\n\n      const report = validator.generateReport(result);\n\n      expect(report).toContain('❌ Configuration has errors');\n      expect(report).toContain('updateBehavior');\n      expect(report).toContain('checkFrequency');\n    });\n\n    it('should generate report with warnings', () => {\n      const result: ValidationResult = {\n        valid: true,\n        errors: [],\n        warnings: [\n          { field: 'updateBehavior', message: 'Risky configuration', recommendation: 'Enable rollback' }\n        ],\n        suggestions: []\n      };\n\n      const report = validator.generateReport(result);\n\n      expect(report).toContain('⚠️');\n      expect(report).toContain('Risky configuration');\n      expect(report).toContain('Enable rollback');\n    });\n\n    it('should generate report with suggestions', () => {\n      const result: ValidationResult = {\n        valid: true,\n        errors: [],\n        warnings: [],\n        suggestions: ['Consider enabling telemetry', 'Increase maxRollbackPoints']\n      };\n\n      const report = validator.generateReport(result);\n\n      expect(report).toContain('💡');\n      expect(report).toContain('Consider enabling telemetry');\n      expect(report).toContain('Increase maxRollbackPoints');\n    });\n\n    it('should show success when valid', () => {\n      const result: ValidationResult = {\n        valid: true,\n        errors: [],\n        warnings: [],\n        suggestions: []\n      };\n\n      const report = validator.generateReport(result);\n\n      expect(report).toContain('✅ Configuration is valid');\n    });\n  });\n\n  describe('Scenario 11: Validate and Sanitize Combined', () => {\n    it('should validate and sanitize in one operation', () => {\n      const prefs: Partial<UserPreferences> = {\n        updateBehavior: 'invalid' as any,\n        checkFrequency: -5,\n        maxRollbackPoints: 100\n      };\n\n      const { valid, sanitized, report } = validator.validateAndSanitize(prefs);\n\n      expect(valid).toBe(false); // Original was invalid\n      expect(sanitized.updateBehavior).toBe('notify'); // Sanitized\n      expect(sanitized.checkFrequency).toBe(0); // Sanitized\n      expect(sanitized.maxRollbackPoints).toBe(50); // Capped\n      expect(report).toContain('Configuration');\n    });\n\n    it('should return valid report for good preferences', () => {\n      const prefs: Partial<UserPreferences> = {\n        updateBehavior: 'notify',\n        updateChannel: 'stable',\n        safetyLevel: 'balanced',\n        checkFrequency: 24,\n        maxRollbackPoints: 5\n      };\n\n      const { valid, sanitized, report } = validator.validateAndSanitize(prefs);\n\n      expect(valid).toBe(true);\n      expect(sanitized.updateBehavior).toBe('notify');\n      expect(report).toContain('✅');\n    });\n  });\n\n  describe('Scenario 12: Validate Notification Level', () => {\n    it('should accept valid notification levels', () => {\n      const levels: any[] = ['all', 'important', 'critical', 'none'];\n\n      levels.forEach(level => {\n        const result = validator.validate({ notificationLevel: level });\n        expect(result.valid).toBe(true);\n      });\n    });\n\n    it('should reject invalid notification level', () => {\n      const prefs: Partial<UserPreferences> = {\n        notificationLevel: 'verbose' as any\n      };\n\n      const result = validator.validate(prefs);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors.some(e => e.field === 'notificationLevel')).toBe(true);\n    });\n\n    it('should sanitize invalid notification level to important', () => {\n      const prefs: Partial<UserPreferences> = {\n        notificationLevel: 'debug' as any\n      };\n\n      const sanitized = validator.sanitize(prefs);\n\n      expect(sanitized.notificationLevel).toBe('important');\n    });\n  });\n});\n"],"version":3}