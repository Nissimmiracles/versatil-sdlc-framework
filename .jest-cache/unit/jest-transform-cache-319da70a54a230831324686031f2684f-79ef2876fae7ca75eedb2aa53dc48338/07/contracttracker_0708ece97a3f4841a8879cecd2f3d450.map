{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/src/agents/contracts/contract-tracker.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/src/agents/contracts/contract-tracker.ts"],"sourcesContent":["/**\n * Contract Tracker\n *\n * Tracks agent handoff contracts for analytics and debugging.\n * Integrates with Context Stats Tracker for unified monitoring.\n *\n * Metrics Tracked:\n * - Contract success/failure rates\n * - Handoff performance by agent\n * - Quality gate pass rates\n * - Effort estimation accuracy\n */\n\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as os from 'os';\nimport {\n  AgentHandoffContract,\n  HandoffType,\n  HandoffStatus,\n  HandoffPriority\n} from './agent-handoff-contract.js';\nimport { ValidationResult } from './contract-validator.js';\nimport { AgentId } from '../../memory/memory-tool-config.js';\n\n/**\n * Contract event (creation, status change, completion)\n */\nexport interface ContractEvent {\n  timestamp: Date;\n  contractId: string;\n  eventType: 'created' | 'sent' | 'accepted' | 'rejected' | 'completed' | 'failed' | 'cancelled';\n  sender: AgentId;\n  receivers: AgentId[];\n  handoffType: HandoffType;\n  priority: HandoffPriority;\n  validationScore?: number;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Contract performance metrics\n */\nexport interface ContractPerformance {\n  contractId: string;\n  sender: AgentId;\n  receivers: AgentId[];\n  estimatedEffort?: number;\n  actualEffort?: number;\n  effortAccuracy?: number; // percentage\n  qualityGatesPassed?: number;\n  qualityGatesTotal?: number;\n  qualityPassRate?: number; // percentage\n  duration?: number; // milliseconds\n  status: HandoffStatus;\n}\n\n/**\n * Aggregate contract statistics\n */\nexport interface ContractStatistics {\n  /**\n   * Total contracts tracked\n   */\n  totalContracts: number;\n\n  /**\n   * Contracts by status\n   */\n  byStatus: Record<HandoffStatus, number>;\n\n  /**\n   * Contracts by type\n   */\n  byType: Record<HandoffType, number>;\n\n  /**\n   * Contracts by sender\n   */\n  bySender: Record<string, number>;\n\n  /**\n   * Contracts by receiver\n   */\n  byReceiver: Record<string, number>;\n\n  /**\n   * Average quality score\n   */\n  avgQualityScore: number;\n\n  /**\n   * Success rate (completed / total)\n   */\n  successRate: number;\n\n  /**\n   * Average effort accuracy\n   */\n  avgEffortAccuracy: number;\n\n  /**\n   * Average quality gate pass rate\n   */\n  avgQualityPassRate: number;\n\n  /**\n   * Average handoff duration (ms)\n   */\n  avgDuration: number;\n\n  /**\n   * Last contract event\n   */\n  lastEvent?: ContractEvent;\n}\n\n/**\n * Contract Tracker\n */\nexport class ContractTracker {\n  private statsDir: string;\n  private events: ContractEvent[] = [];\n  private performances: Map<string, ContractPerformance> = new Map();\n\n  constructor(baseDir: string = path.join(os.homedir(), '.versatil', 'stats')) {\n    this.statsDir = baseDir;\n  }\n\n  /**\n   * Initialize tracker (load existing data)\n   */\n  async initialize(): Promise<void> {\n    await fs.mkdir(this.statsDir, { recursive: true });\n\n    try {\n      // Load contract events\n      const eventsPath = path.join(this.statsDir, 'contract-events.json');\n      if (await this.fileExists(eventsPath)) {\n        const data = await fs.readFile(eventsPath, 'utf-8');\n        this.events = JSON.parse(data, this.dateReviver);\n      }\n\n      // Load contract performances\n      const performancesPath = path.join(this.statsDir, 'contract-performances.json');\n      if (await this.fileExists(performancesPath)) {\n        const data = await fs.readFile(performancesPath, 'utf-8');\n        const perfArray = JSON.parse(data, this.dateReviver);\n        this.performances = new Map(perfArray.map((p: ContractPerformance) => [p.contractId, p]));\n      }\n    } catch (error) {\n      console.warn('Failed to load contract tracking data:', error);\n    }\n  }\n\n  /**\n   * Track contract creation\n   */\n  async trackContractCreated(\n    contract: AgentHandoffContract,\n    validationResult?: ValidationResult\n  ): Promise<void> {\n    const event: ContractEvent = {\n      timestamp: new Date(),\n      contractId: contract.contractId,\n      eventType: 'created',\n      sender: contract.sender.agentId,\n      receivers: contract.receivers.map(r => r.agentId),\n      handoffType: contract.type,\n      priority: contract.priority,\n      validationScore: validationResult?.score,\n      metadata: {\n        workItemsCount: contract.workItems.length,\n        hasMemorySnapshot: !!contract.memorySnapshot\n      }\n    };\n\n    this.events.push(event);\n    await this.persistEvents();\n\n    // Initialize performance tracking\n    this.performances.set(contract.contractId, {\n      contractId: contract.contractId,\n      sender: contract.sender.agentId,\n      receivers: contract.receivers.map(r => r.agentId),\n      estimatedEffort: this.calculateEstimatedEffort(contract),\n      qualityGatesTotal: contract.expectedOutput?.qualityGates?.length || 0,\n      status: contract.status\n    });\n    await this.persistPerformances();\n  }\n\n  /**\n   * Track contract status change\n   */\n  async trackStatusChange(\n    contractId: string,\n    newStatus: HandoffStatus,\n    contract?: AgentHandoffContract\n  ): Promise<void> {\n    if (!contract) {\n      return;\n    }\n\n    const event: ContractEvent = {\n      timestamp: new Date(),\n      contractId,\n      eventType: this.statusToEventType(newStatus),\n      sender: contract.sender.agentId,\n      receivers: contract.receivers.map(r => r.agentId),\n      handoffType: contract.type,\n      priority: contract.priority\n    };\n\n    this.events.push(event);\n    await this.persistEvents();\n\n    // Update performance tracking\n    const perf = this.performances.get(contractId);\n    if (perf) {\n      perf.status = newStatus;\n\n      // If completed, calculate final metrics\n      if (newStatus === 'completed' && contract.results) {\n        perf.actualEffort = contract.results.actualEffort;\n        if (perf.estimatedEffort && perf.actualEffort) {\n          perf.effortAccuracy = (perf.estimatedEffort / perf.actualEffort) * 100;\n        }\n\n        perf.qualityGatesPassed = contract.results.qualityResults?.filter(r => r.passed).length || 0;\n        if (perf.qualityGatesTotal && perf.qualityGatesTotal > 0) {\n          perf.qualityPassRate = (perf.qualityGatesPassed / perf.qualityGatesTotal) * 100;\n        }\n\n        // Calculate duration\n        const createdEvent = this.events.find(e => e.contractId === contractId && e.eventType === 'created');\n        if (createdEvent && contract.results.completedAt) {\n          perf.duration = contract.results.completedAt.getTime() - createdEvent.timestamp.getTime();\n        }\n      }\n\n      await this.persistPerformances();\n    }\n  }\n\n  /**\n   * Track contract validation\n   */\n  async trackValidation(\n    contractId: string,\n    validationResult: ValidationResult\n  ): Promise<void> {\n    // Update event metadata\n    const lastEvent = this.events.find(e => e.contractId === contractId);\n    if (lastEvent) {\n      lastEvent.validationScore = validationResult.score;\n      lastEvent.metadata = {\n        ...lastEvent.metadata,\n        validationErrors: validationResult.errors.length,\n        validationWarnings: validationResult.warnings.length\n      };\n      await this.persistEvents();\n    }\n  }\n\n  /**\n   * Get contract statistics\n   */\n  getStatistics(): ContractStatistics {\n    const stats: ContractStatistics = {\n      totalContracts: this.events.filter(e => e.eventType === 'created').length,\n      byStatus: {} as Record<HandoffStatus, number>,\n      byType: {} as Record<HandoffType, number>,\n      bySender: {},\n      byReceiver: {},\n      avgQualityScore: 0,\n      successRate: 0,\n      avgEffortAccuracy: 0,\n      avgQualityPassRate: 0,\n      avgDuration: 0,\n      lastEvent: this.events[this.events.length - 1]\n    };\n\n    // Count by status\n    this.performances.forEach(perf => {\n      stats.byStatus[perf.status] = (stats.byStatus[perf.status] || 0) + 1;\n    });\n\n    // Count by type and sender/receiver\n    this.events.filter(e => e.eventType === 'created').forEach(event => {\n      stats.byType[event.handoffType] = (stats.byType[event.handoffType] || 0) + 1;\n      stats.bySender[event.sender] = (stats.bySender[event.sender] || 0) + 1;\n      event.receivers.forEach(receiver => {\n        stats.byReceiver[receiver] = (stats.byReceiver[receiver] || 0) + 1;\n      });\n    });\n\n    // Calculate averages\n    const perfArray = Array.from(this.performances.values());\n    if (perfArray.length > 0) {\n      // Average quality score\n      const scoresWithData = this.events\n        .filter(e => e.validationScore !== undefined)\n        .map(e => e.validationScore!);\n\n      if (scoresWithData.length > 0) {\n        stats.avgQualityScore = scoresWithData.reduce((sum, score) => sum + score, 0) / scoresWithData.length;\n      }\n\n      // Success rate\n      const completedCount = stats.byStatus['completed'] || 0;\n      stats.successRate = (completedCount / stats.totalContracts) * 100;\n\n      // Average effort accuracy\n      const effortAccuracies = perfArray\n        .filter(p => p.effortAccuracy !== undefined)\n        .map(p => p.effortAccuracy!);\n\n      if (effortAccuracies.length > 0) {\n        stats.avgEffortAccuracy = effortAccuracies.reduce((sum, acc) => sum + acc, 0) / effortAccuracies.length;\n      }\n\n      // Average quality pass rate\n      const qualityRates = perfArray\n        .filter(p => p.qualityPassRate !== undefined)\n        .map(p => p.qualityPassRate!);\n\n      if (qualityRates.length > 0) {\n        stats.avgQualityPassRate = qualityRates.reduce((sum, rate) => sum + rate, 0) / qualityRates.length;\n      }\n\n      // Average duration\n      const durations = perfArray\n        .filter(p => p.duration !== undefined)\n        .map(p => p.duration!);\n\n      if (durations.length > 0) {\n        stats.avgDuration = durations.reduce((sum, dur) => sum + dur, 0) / durations.length;\n      }\n    }\n\n    return stats;\n  }\n\n  /**\n   * Get events for a contract\n   */\n  getContractEvents(contractId: string): ContractEvent[] {\n    return this.events.filter(e => e.contractId === contractId);\n  }\n\n  /**\n   * Get performance for a contract\n   */\n  getContractPerformance(contractId: string): ContractPerformance | undefined {\n    return this.performances.get(contractId);\n  }\n\n  /**\n   * Get events within time range\n   */\n  getEventsByTimeRange(since: Date, until: Date): ContractEvent[] {\n    return this.events.filter(e => e.timestamp >= since && e.timestamp <= until);\n  }\n\n  /**\n   * Generate contract report\n   */\n  async generateReport(): Promise<string> {\n    const stats = this.getStatistics();\n\n    const report = `\n# Contract Tracking Report\n\n**Generated**: ${new Date().toISOString()}\n\n## Summary Statistics\n\n- **Total Contracts**: ${stats.totalContracts}\n- **Success Rate**: ${stats.successRate.toFixed(2)}%\n- **Average Quality Score**: ${stats.avgQualityScore.toFixed(1)}/100\n- **Average Effort Accuracy**: ${stats.avgEffortAccuracy.toFixed(1)}%\n- **Average Quality Pass Rate**: ${stats.avgQualityPassRate.toFixed(1)}%\n- **Average Duration**: ${(stats.avgDuration / 1000 / 60).toFixed(1)} minutes\n\n## Contracts by Status\n\n${Object.entries(stats.byStatus)\n  .map(([status, count]) => `- **${status}**: ${count}`)\n  .join('\\n')}\n\n## Contracts by Type\n\n${Object.entries(stats.byType)\n  .map(([type, count]) => `- **${type}**: ${count}`)\n  .join('\\n')}\n\n## Contracts by Sender\n\n${Object.entries(stats.bySender)\n  .sort((a, b) => b[1] - a[1])\n  .map(([sender, count]) => `- **${sender}**: ${count}`)\n  .join('\\n')}\n\n## Contracts by Receiver\n\n${Object.entries(stats.byReceiver)\n  .sort((a, b) => b[1] - a[1])\n  .map(([receiver, count]) => `- **${receiver}**: ${count}`)\n  .join('\\n')}\n\n## Recent Events (Last 5)\n\n${this.events\n  .slice(-5)\n  .reverse()\n  .map(event => `\n### ${event.timestamp.toISOString()} - ${event.eventType}\n- Contract: ${event.contractId}\n- Sender: ${event.sender}\n- Receivers: ${event.receivers.join(', ')}\n- Type: ${event.handoffType}\n- Priority: ${event.priority}\n${event.validationScore ? `- Validation Score: ${event.validationScore}/100` : ''}\n`).join('\\n')}\n\n---\n*Generated by VERSATIL Contract Tracker*\n`;\n\n    return report.trim();\n  }\n\n  /**\n   * Cleanup old data (keep last N days)\n   */\n  async cleanup(daysToKeep: number = 30): Promise<void> {\n    const cutoffDate = new Date(Date.now() - daysToKeep * 24 * 60 * 60 * 1000);\n\n    this.events = this.events.filter(e => e.timestamp >= cutoffDate);\n\n    // Keep performances for contracts that still have events\n    const activeContractIds = new Set(this.events.map(e => e.contractId));\n    const performancesToKeep = new Map<string, ContractPerformance>();\n\n    this.performances.forEach((perf, contractId) => {\n      if (activeContractIds.has(contractId)) {\n        performancesToKeep.set(contractId, perf);\n      }\n    });\n\n    this.performances = performancesToKeep;\n\n    await Promise.all([\n      this.persistEvents(),\n      this.persistPerformances()\n    ]);\n  }\n\n  // Private helper methods\n\n  private async persistEvents(): Promise<void> {\n    const filePath = path.join(this.statsDir, 'contract-events.json');\n    await fs.writeFile(\n      filePath,\n      JSON.stringify(this.events, null, 2),\n      'utf-8'\n    );\n  }\n\n  private async persistPerformances(): Promise<void> {\n    const filePath = path.join(this.statsDir, 'contract-performances.json');\n    const perfArray = Array.from(this.performances.values());\n    await fs.writeFile(\n      filePath,\n      JSON.stringify(perfArray, null, 2),\n      'utf-8'\n    );\n  }\n\n  private calculateEstimatedEffort(contract: AgentHandoffContract): number | undefined {\n    const total = contract.workItems.reduce((sum, item) => {\n      return sum + (item.estimatedEffort || 0);\n    }, 0);\n\n    return total > 0 ? total : undefined;\n  }\n\n  private statusToEventType(status: HandoffStatus): ContractEvent['eventType'] {\n    switch (status) {\n      case 'pending': return 'created';\n      case 'in_transit': return 'sent';\n      case 'accepted': return 'accepted';\n      case 'rejected': return 'rejected';\n      case 'completed': return 'completed';\n      case 'failed': return 'failed';\n      case 'cancelled': return 'cancelled';\n      default: return 'created';\n    }\n  }\n\n  private async fileExists(filePath: string): Promise<boolean> {\n    try {\n      await fs.access(filePath);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  private dateReviver(key: string, value: any): any {\n    if (typeof value === 'string' && /^\\d{4}-\\d{2}-\\d{2}T/.test(value)) {\n      return new Date(value);\n    }\n    return value;\n  }\n}\n\n/**\n * Global singleton instance\n */\nlet globalTracker: ContractTracker | null = null;\n\nexport function getGlobalContractTracker(): ContractTracker {\n  if (!globalTracker) {\n    globalTracker = new ContractTracker();\n    globalTracker.initialize().catch(console.error);\n  }\n  return globalTracker;\n}\n"],"version":3}