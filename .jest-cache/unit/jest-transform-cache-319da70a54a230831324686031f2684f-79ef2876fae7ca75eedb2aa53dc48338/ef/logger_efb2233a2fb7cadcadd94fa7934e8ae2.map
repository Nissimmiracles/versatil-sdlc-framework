{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/src/utils/logger.ts","mappings":";;;AAAA,MAAa,cAAc;IAGzB,YAAoB,SAAkB;QAAlB,cAAS,GAAT,SAAS,CAAS;IAAG,CAAC;IAE1C,MAAM,CAAC,WAAW,CAAC,SAAkB;QACnC,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC;YAC7B,cAAc,CAAC,QAAQ,GAAG,IAAI,cAAc,CAAC,SAAS,CAAC,CAAC;QAC1D,CAAC;QACD,OAAO,cAAc,CAAC,QAAQ,CAAC;IACjC,CAAC;IAED,IAAI,CAAC,OAAe,EAAE,OAAa,EAAE,SAAkB;QACrD,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;QAC3E,4EAA4E;QAC5E,IAAI,OAAO,CAAC,GAAG,CAAC,iBAAiB,KAAK,MAAM,EAAE,CAAC;YAC7C,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAC5B,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC1B,CAAC;IACH,CAAC;IAED,KAAK,CAAC,OAAe,EAAE,OAAa,EAAE,SAAkB;QACtD,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;QAC5E,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAC5B,CAAC;IAED,IAAI,CAAC,OAAe,EAAE,OAAa,EAAE,SAAkB;QACrD,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;QAC3E,4EAA4E;QAC5E,IAAI,OAAO,CAAC,GAAG,CAAC,iBAAiB,KAAK,MAAM,EAAE,CAAC;YAC7C,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAC5B,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC;IAED,OAAO,CAAC,OAAe,EAAE,OAAa,EAAE,SAAkB;QACxD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,OAAe,EAAE,OAAa,EAAE,SAAkB;QACtD,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;QAC5E,4EAA4E;QAC5E,IAAI,OAAO,CAAC,GAAG,CAAC,iBAAiB,KAAK,MAAM,EAAE,CAAC;YAC7C,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAC5B,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC1B,CAAC;IACH,CAAC;IAEO,aAAa,CAAC,KAAa,EAAE,OAAe,EAAE,OAAa,EAAE,SAAkB;QACrF,MAAM,IAAI,GAAG,SAAS,IAAI,IAAI,CAAC,SAAS,IAAI,UAAU,CAAC;QACvD,IAAI,SAAS,GAAG,IAAI,IAAI,KAAK,KAAK,KAAK,OAAO,EAAE,CAAC;QAEjD,IAAI,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC/C,SAAS,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;QAC7C,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AA7DD,wCA6DC;AAEY,QAAA,GAAG,GAAG,OAAO,CAAC","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/src/utils/logger.ts"],"sourcesContent":["export class VERSATILLogger {\n  private static instance: VERSATILLogger;\n\n  constructor(private component?: string) {}\n\n  static getInstance(component?: string): VERSATILLogger {\n    if (!VERSATILLogger.instance) {\n      VERSATILLogger.instance = new VERSATILLogger(component);\n    }\n    return VERSATILLogger.instance;\n  }\n\n  info(message: string, context?: any, component?: string): void {\n    const logMessage = this.formatMessage('INFO', message, context, component);\n    // In MCP mode, use stderr to avoid interfering with stdio JSON-RPC protocol\n    if (process.env.VERSATIL_MCP_MODE === 'true') {\n      console.error(logMessage);\n    } else {\n      console.log(logMessage);\n    }\n  }\n\n  error(message: string, context?: any, component?: string): void {\n    const logMessage = this.formatMessage('ERROR', message, context, component);\n    console.error(logMessage);\n  }\n\n  warn(message: string, context?: any, component?: string): void {\n    const logMessage = this.formatMessage('WARN', message, context, component);\n    // In MCP mode, use stderr to avoid interfering with stdio JSON-RPC protocol\n    if (process.env.VERSATIL_MCP_MODE === 'true') {\n      console.error(logMessage);\n    } else {\n      console.warn(logMessage);\n    }\n  }\n\n  warning(message: string, context?: any, component?: string): void {\n    this.warn(message, context, component);\n  }\n\n  debug(message: string, context?: any, component?: string): void {\n    const logMessage = this.formatMessage('DEBUG', message, context, component);\n    // In MCP mode, use stderr to avoid interfering with stdio JSON-RPC protocol\n    if (process.env.VERSATIL_MCP_MODE === 'true') {\n      console.error(logMessage);\n    } else {\n      console.log(logMessage);\n    }\n  }\n\n  private formatMessage(level: string, message: string, context?: any, component?: string): string {\n    const comp = component || this.component || 'VERSATIL';\n    let formatted = `[${comp}] ${level}: ${message}`;\n\n    if (context && Object.keys(context).length > 0) {\n      formatted += ` ${JSON.stringify(context)}`;\n    }\n\n    return formatted;\n  }\n}\n\nexport const log = console;\n"],"version":3}