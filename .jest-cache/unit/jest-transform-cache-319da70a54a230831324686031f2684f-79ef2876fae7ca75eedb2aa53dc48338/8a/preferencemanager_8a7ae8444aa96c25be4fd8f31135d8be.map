{"file":"/Users/nissimmenashe/VERSATIL SDLC FW/src/config/preference-manager.ts","mappings":"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","names":[],"sources":["/Users/nissimmenashe/VERSATIL SDLC FW/src/config/preference-manager.ts"],"sourcesContent":["/**\n * VERSATIL SDLC Framework - Preference Manager\n * Manage user preferences for framework behavior\n */\n\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as os from 'os';\n\nexport type UpdateChannel = 'stable' | 'beta' | 'alpha' | 'nightly';\nexport type UpdateBehavior = 'auto' | 'notify' | 'manual';\nexport type SafetyLevel = 'conservative' | 'balanced' | 'fast';\nexport type RollbackBehavior = 'auto' | 'prompt' | 'manual';\nexport type NotificationLevel = 'all' | 'important' | 'critical' | 'none';\n\nexport interface UserPreferences {\n  // Update preferences\n  updateBehavior: UpdateBehavior;\n  updateChannel: UpdateChannel;\n  safetyLevel: SafetyLevel;\n  checkFrequency: number; // hours\n  autoInstallSecurity: boolean;\n\n  // Rollback preferences\n  rollbackBehavior: RollbackBehavior;\n  maxRollbackPoints: number;\n  rollbackOnFailure: boolean;\n\n  // Notification preferences\n  notificationLevel: NotificationLevel;\n  notifyOnUpdateAvailable: boolean;\n  notifyOnUpdateInstalled: boolean;\n  notifyOnSecurityUpdate: boolean;\n  notifyOnBreakingChange: boolean;\n\n  // Telemetry preferences\n  enableTelemetry: boolean;\n  shareErrorReports: boolean;\n  shareUsageStatistics: boolean;\n\n  // Advanced preferences\n  backupBeforeUpdate: boolean;\n  validateAfterUpdate: boolean;\n  allowPrerelease: boolean;\n  skipOptionalDependencies: boolean;\n\n  // User info (optional)\n  userId?: string;\n  userEmail?: string;\n  organizationId?: string;\n\n  // Metadata\n  createdAt: string;\n  lastModified: string;\n  version: string;\n}\n\nexport class PreferenceManager {\n  private readonly versatilHome: string;\n  private readonly preferencesFile: string;\n  private readonly preferencesVersion = '1.0.0';\n\n  constructor() {\n    this.versatilHome = path.join(os.homedir(), '.versatil');\n    this.preferencesFile = path.join(this.versatilHome, 'preferences.json');\n  }\n\n  /**\n   * Get user preferences\n   */\n  async getPreferences(): Promise<UserPreferences> {\n    try {\n      const data = await fs.readFile(this.preferencesFile, 'utf-8');\n      const preferences = JSON.parse(data);\n\n      // Migrate if needed\n      if (preferences.version !== this.preferencesVersion) {\n        return await this.migratePreferences(preferences);\n      }\n\n      return preferences;\n    } catch {\n      // Return defaults if file doesn't exist\n      return this.getDefaultPreferences();\n    }\n  }\n\n  /**\n   * Save user preferences\n   */\n  async savePreferences(preferences: Partial<UserPreferences>): Promise<void> {\n    const current = await this.getPreferences();\n\n    const updated: UserPreferences = {\n      ...current,\n      ...preferences,\n      lastModified: new Date().toISOString(),\n      version: this.preferencesVersion\n    };\n\n    await fs.mkdir(this.versatilHome, { recursive: true });\n    await fs.writeFile(this.preferencesFile, JSON.stringify(updated, null, 2));\n\n    console.log('✅ Preferences saved');\n  }\n\n  /**\n   * Reset to default preferences\n   */\n  async resetToDefaults(): Promise<void> {\n    const defaults = this.getDefaultPreferences();\n    await fs.mkdir(this.versatilHome, { recursive: true });\n    await fs.writeFile(this.preferencesFile, JSON.stringify(defaults, null, 2));\n\n    console.log('✅ Preferences reset to defaults');\n  }\n\n  /**\n   * Get specific preference\n   */\n  async getPreference<K extends keyof UserPreferences>(key: K): Promise<UserPreferences[K]> {\n    const preferences = await this.getPreferences();\n    return preferences[key];\n  }\n\n  /**\n   * Set specific preference\n   */\n  async setPreference<K extends keyof UserPreferences>(key: K, value: UserPreferences[K]): Promise<void> {\n    const preferences = await this.getPreferences();\n    preferences[key] = value;\n    preferences.lastModified = new Date().toISOString();\n\n    await fs.mkdir(this.versatilHome, { recursive: true });\n    await fs.writeFile(this.preferencesFile, JSON.stringify(preferences, null, 2));\n\n    console.log(`✅ Preference updated: ${key}`);\n  }\n\n  /**\n   * Update multiple preferences\n   */\n  async updatePreferences(updates: Partial<UserPreferences>): Promise<void> {\n    await this.savePreferences(updates);\n  }\n\n  /**\n   * Validate preferences\n   */\n  validatePreferences(preferences: Partial<UserPreferences>): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Validate update behavior\n    if (preferences.updateBehavior && !['auto', 'notify', 'manual'].includes(preferences.updateBehavior)) {\n      errors.push(`Invalid updateBehavior: ${preferences.updateBehavior}`);\n    }\n\n    // Validate update channel\n    if (preferences.updateChannel && !['stable', 'beta', 'alpha', 'nightly'].includes(preferences.updateChannel)) {\n      errors.push(`Invalid updateChannel: ${preferences.updateChannel}`);\n    }\n\n    // Validate safety level\n    if (preferences.safetyLevel && !['conservative', 'balanced', 'fast'].includes(preferences.safetyLevel)) {\n      errors.push(`Invalid safetyLevel: ${preferences.safetyLevel}`);\n    }\n\n    // Validate check frequency\n    if (preferences.checkFrequency !== undefined) {\n      if (typeof preferences.checkFrequency !== 'number' || preferences.checkFrequency < 0) {\n        errors.push(`Invalid checkFrequency: ${preferences.checkFrequency}`);\n      }\n    }\n\n    // Validate rollback behavior\n    if (preferences.rollbackBehavior && !['auto', 'prompt', 'manual'].includes(preferences.rollbackBehavior)) {\n      errors.push(`Invalid rollbackBehavior: ${preferences.rollbackBehavior}`);\n    }\n\n    // Validate max rollback points\n    if (preferences.maxRollbackPoints !== undefined) {\n      if (typeof preferences.maxRollbackPoints !== 'number' || preferences.maxRollbackPoints < 0) {\n        errors.push(`Invalid maxRollbackPoints: ${preferences.maxRollbackPoints}`);\n      }\n    }\n\n    // Validate notification level\n    if (\n      preferences.notificationLevel &&\n      !['all', 'important', 'critical', 'none'].includes(preferences.notificationLevel)\n    ) {\n      errors.push(`Invalid notificationLevel: ${preferences.notificationLevel}`);\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Get default preferences\n   */\n  getDefaultPreferences(): UserPreferences {\n    return {\n      // Update preferences (user's chosen defaults)\n      updateBehavior: 'notify', // User chose \"Guided\"\n      updateChannel: 'stable',\n      safetyLevel: 'balanced',\n      checkFrequency: 24, // Check daily\n      autoInstallSecurity: true,\n\n      // Rollback preferences\n      rollbackBehavior: 'prompt',\n      maxRollbackPoints: 5,\n      rollbackOnFailure: true,\n\n      // Notification preferences\n      notificationLevel: 'important',\n      notifyOnUpdateAvailable: true,\n      notifyOnUpdateInstalled: true,\n      notifyOnSecurityUpdate: true,\n      notifyOnBreakingChange: true,\n\n      // Telemetry preferences\n      enableTelemetry: true,\n      shareErrorReports: true,\n      shareUsageStatistics: false,\n\n      // Advanced preferences\n      backupBeforeUpdate: true,\n      validateAfterUpdate: true,\n      allowPrerelease: false,\n      skipOptionalDependencies: false,\n\n      // Metadata\n      createdAt: new Date().toISOString(),\n      lastModified: new Date().toISOString(),\n      version: this.preferencesVersion\n    };\n  }\n\n  /**\n   * Get preferences summary\n   */\n  async getSummary(): Promise<string> {\n    const prefs = await this.getPreferences();\n\n    const lines: string[] = [];\n\n    lines.push('⚙️  User Preferences:');\n    lines.push('');\n\n    lines.push('📦 Updates:');\n    lines.push(`   Behavior: ${prefs.updateBehavior}`);\n    lines.push(`   Channel: ${prefs.updateChannel}`);\n    lines.push(`   Safety: ${prefs.safetyLevel}`);\n    lines.push(`   Check Frequency: Every ${prefs.checkFrequency}h`);\n    lines.push(`   Auto-install Security: ${prefs.autoInstallSecurity ? 'Yes' : 'No'}`);\n    lines.push('');\n\n    lines.push('🔄 Rollback:');\n    lines.push(`   Behavior: ${prefs.rollbackBehavior}`);\n    lines.push(`   Max Points: ${prefs.maxRollbackPoints}`);\n    lines.push(`   Auto-rollback on Failure: ${prefs.rollbackOnFailure ? 'Yes' : 'No'}`);\n    lines.push('');\n\n    lines.push('🔔 Notifications:');\n    lines.push(`   Level: ${prefs.notificationLevel}`);\n    lines.push(`   Update Available: ${prefs.notifyOnUpdateAvailable ? 'Yes' : 'No'}`);\n    lines.push(`   Update Installed: ${prefs.notifyOnUpdateInstalled ? 'Yes' : 'No'}`);\n    lines.push(`   Security Updates: ${prefs.notifyOnSecurityUpdate ? 'Yes' : 'No'}`);\n    lines.push(`   Breaking Changes: ${prefs.notifyOnBreakingChange ? 'Yes' : 'No'}`);\n    lines.push('');\n\n    lines.push('📊 Telemetry:');\n    lines.push(`   Enabled: ${prefs.enableTelemetry ? 'Yes' : 'No'}`);\n    lines.push(`   Error Reports: ${prefs.shareErrorReports ? 'Yes' : 'No'}`);\n    lines.push(`   Usage Statistics: ${prefs.shareUsageStatistics ? 'Yes' : 'No'}`);\n    lines.push('');\n\n    lines.push('🔧 Advanced:');\n    lines.push(`   Backup Before Update: ${prefs.backupBeforeUpdate ? 'Yes' : 'No'}`);\n    lines.push(`   Validate After Update: ${prefs.validateAfterUpdate ? 'Yes' : 'No'}`);\n    lines.push(`   Allow Prerelease: ${prefs.allowPrerelease ? 'Yes' : 'No'}`);\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * Export preferences to JSON\n   */\n  async exportPreferences(outputPath: string): Promise<void> {\n    const preferences = await this.getPreferences();\n    await fs.writeFile(outputPath, JSON.stringify(preferences, null, 2));\n\n    console.log(`✅ Preferences exported to: ${outputPath}`);\n  }\n\n  /**\n   * Import preferences from JSON\n   */\n  async importPreferences(inputPath: string): Promise<void> {\n    const data = await fs.readFile(inputPath, 'utf-8');\n    const preferences = JSON.parse(data);\n\n    const validation = this.validatePreferences(preferences);\n\n    if (!validation.valid) {\n      throw new Error(`Invalid preferences: ${validation.errors.join(', ')}`);\n    }\n\n    await this.savePreferences(preferences);\n\n    console.log(`✅ Preferences imported from: ${inputPath}`);\n  }\n\n  /**\n   * Migrate preferences from old version\n   */\n  private async migratePreferences(oldPreferences: any): Promise<UserPreferences> {\n    console.log('🔄 Migrating preferences to new version...');\n\n    const defaults = this.getDefaultPreferences();\n\n    // Merge old preferences with defaults (defaults for new fields)\n    const migrated: UserPreferences = {\n      ...defaults,\n      ...oldPreferences,\n      version: this.preferencesVersion,\n      lastModified: new Date().toISOString()\n    };\n\n    // Save migrated preferences\n    await fs.mkdir(this.versatilHome, { recursive: true });\n    await fs.writeFile(this.preferencesFile, JSON.stringify(migrated, null, 2));\n\n    console.log('✅ Preferences migrated');\n\n    return migrated;\n  }\n\n  /**\n   * Check if setup wizard should run\n   */\n  async shouldRunSetupWizard(): Promise<boolean> {\n    try {\n      await fs.access(this.preferencesFile);\n      return false; // Preferences exist\n    } catch {\n      return true; // Preferences don't exist\n    }\n  }\n}\n\n/**\n * Default preference manager instance\n */\nexport const defaultPreferenceManager = new PreferenceManager();\n"],"version":3}