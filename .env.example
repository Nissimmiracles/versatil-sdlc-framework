# ═══════════════════════════════════════════════════════════════════════════════
# VERSATIL SDLC Framework - Environment Configuration Template
# ═══════════════════════════════════════════════════════════════════════════════
#
# 🔐 IMPORTANT: Copy this file to ~/.versatil/.env (NOT your project directory)
#
#   cp .env.example ~/.versatil/.env
#   chmod 600 ~/.versatil/.env
#
# 🚀 QUICK SETUP: Run the interactive credential wizard
#
#   versatil setup credentials
#
# 📖 DOCUMENTATION:
#   - Detailed setup: docs/CREDENTIAL_SETUP.md
#   - Production deployment: docs/PRODUCTION_DEPLOYMENT_GUIDE.md
#
# ⚠️  SECURITY: Never commit credentials to version control!
#              This file should only exist in ~/.versatil/.env
#
# ═══════════════════════════════════════════════════════════════════════════════

# ───────────────────────────────────────────────────────────────────────────────
# CORE CONFIGURATION
# ───────────────────────────────────────────────────────────────────────────────

# Node Environment (development, staging, production)
NODE_ENV=development

# Application Configuration
APP_NAME=VERSATIL-SDLC-Framework
APP_VERSION=6.1.0
PORT=3000

# ───────────────────────────────────────────────────────────────────────────────
# REQUIRED SERVICES (Framework won't work without these)
# ───────────────────────────────────────────────────────────────────────────────

# Opera MCP Server Configuration
OPERA_MCP_PORT=3000
OPERA_MCP_HOST=localhost

# Auto-Update Configuration
OPERA_AUTO_UPDATE=true
OPERA_UPDATE_CHANNEL=stable  # Options: stable, beta, dev
OPERA_UPDATE_INTERVAL=86400000  # 24 hours in milliseconds
OPERA_UPDATE_REGISTRY=https://registry.versatil.dev/mcp
OPERA_BACKUP_BEFORE_UPDATE=true
OPERA_MAX_BACKUPS=5

# ──── Anthropic Claude (REQUIRED) ─────────────────────────────────────────────
# Claude AI for agent intelligence and code generation
# 📖 Setup: docs/CREDENTIAL_SETUP.md#anthropic-claude
# 🔗 Get API key: https://console.anthropic.com/account/keys
ANTHROPIC_API_KEY=sk-ant-api03-your-key-here
ANTHROPIC_API_URL=https://api.anthropic.com

# ──── Supabase (REQUIRED) ────────────────────────────────────────────────────
# Vector database for RAG memory - stores agent context and code patterns
# 📖 Setup: docs/CREDENTIAL_SETUP.md#1-supabase-required
# 🔗 Get credentials: https://app.supabase.com → Your Project → Settings → API
SUPABASE_URL=http://localhost:54321
SUPABASE_ANON_KEY=your-anon-key-here
SUPABASE_SERVICE_KEY=your-service-key-here
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key-here
DATABASE_URL=postgresql://user:password@host:5432/database

# ───────────────────────────────────────────────────────────────────────────────
# RECOMMENDED SERVICES (Strongly recommended for best experience)
# ───────────────────────────────────────────────────────────────────────────────

# ──── Google Vertex AI (RECOMMENDED) ──────────────────────────────────────────
# Google's Gemini models for AI-powered code generation and embeddings
# 📖 Setup: docs/CREDENTIAL_SETUP.md#2-google-vertex-ai
# 🔗 Get credentials: https://console.cloud.google.com/apis/credentials
# ⚠️  Fallback: Hash-based embeddings (development only, not recommended)
GOOGLE_CLOUD_PROJECT=your-gcp-project-id
GOOGLE_CLOUD_LOCATION=us-central1  # Options: us-central1, us-west1, europe-west1
GOOGLE_APPLICATION_CREDENTIALS=/path/to/your/service-account-key.json

# ──── GitHub (RECOMMENDED) ─────────────────────────────────────────────────────
# GitHub API for repository management, PR automation, issue tracking
# 📖 Setup: docs/CREDENTIAL_SETUP.md#3-github
# 🔗 Get token: https://github.com/settings/tokens/new
# Required scopes: repo, workflow, admin:org
GITHUB_TOKEN=your-github-personal-access-token
GITHUB_OWNER=Nissimmiracles
GITHUB_REPO=versatil-sdlc-framework

# ───────────────────────────────────────────────────────────────────────────────
# AGENT-SPECIFIC CREDENTIALS (Configure based on which agents you're using)
# ───────────────────────────────────────────────────────────────────────────────

# ──── Maria-QA: Testing & Quality Assurance ────────────────────────────────────
# Browser automation for E2E testing, visual regression, accessibility audits
# 📖 Setup: docs/CREDENTIAL_SETUP.md#maria-qa
# 🔗 Documentation: https://playwright.dev/docs/intro
# ⚠️  Fallback: Headless browser with manual test execution
PLAYWRIGHT_BROWSERS_PATH=~/.cache/ms-playwright  # Optional: Custom browser path
CHROME_MCP_ENABLED=true  # Enable Chrome MCP for browser automation
CHROME_MCP_HEADLESS=false  # Show browser during tests (set true for CI/CD)
CHROME_MCP_TIMEOUT=30000  # 30 seconds
PLAYWRIGHT_MCP_HEADLESS=false
PLAYWRIGHT_MCP_TIMEOUT=30000

# ──── James-Frontend: UI/UX Development ────────────────────────────────────────
# Design system integration, component scaffolding, accessibility validation
# 📖 Setup: docs/CREDENTIAL_SETUP.md#james-frontend
# 🔗 Figma: https://help.figma.com/hc/en-us/articles/8085703771159
# 🔗 Ant Design: https://ant.design/docs/react/introduce
# ⚠️  Fallback: Manual design review and component scaffolding

# Figma Integration
FIGMA_API_TOKEN=your_figma_token_here
FIGMA_TEAM_ID=your_team_id_here  # Optional: Your Figma team ID

# Ant Design MCP
ANT_DESIGN_TOKEN=antd_xxxxxxxxxxxxxxxxxxxxxxxxxx  # Optional: Premium features
SHADCN_MCP_ENABLED=true  # Shadcn UI components
SHADCN_COMPONENTS_PATH=src/components/ui

# ──── Marcus-Backend: API & Backend Development ────────────────────────────────
# Container management, security scanning, performance monitoring
# 📖 Setup: docs/CREDENTIAL_SETUP.md#marcus-backend
# 🔗 Docker Hub: https://docs.docker.com/docker-hub/access-tokens/
# 🔗 Semgrep: https://semgrep.dev/docs/getting-started/
# 🔗 Sentry: https://docs.sentry.io/product/sentry-basics/dsn-explainer/

# Docker Hub (for container deployment)
DOCKER_HUB_USERNAME=your-docker-username
DOCKER_HUB_TOKEN=dckr_pat_xxxxxxxxxxxxxxxxxxxxxxxxxx

# Semgrep (security scanning)
SEMGREP_API_KEY=sgk_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  # Optional
SEMGREP_CONFIG=auto  # Options: auto, p/security-audit, p/owasp-top-ten

# Sentry (error monitoring)
SENTRY_DSN=https://xxxx@xxxx.ingest.sentry.io/xxxx
SENTRY_AUTH_TOKEN=sntrys_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  # Optional
SENTRY_ORG=your-sentry-organization-slug  # Optional
SENTRY_PROJECT=versatil-sdlc-framework
SENTRY_ENVIRONMENT=production

# ──── Sarah-PM: Project Management ─────────────────────────────────────────────
# Sprint tracking, issue management, roadmap planning, documentation
# 📖 Setup: docs/CREDENTIAL_SETUP.md#sarah-pm
# 🔗 Jira: https://support.atlassian.com/atlassian-account/docs/manage-api-tokens-for-your-atlassian-account/
# 🔗 Linear: https://developers.linear.app/docs/graphql/working-with-the-graphql-api
# 🔗 Confluence: https://developer.atlassian.com/cloud/confluence/rest/v2/intro/

# Jira (project management)
JIRA_API_TOKEN=ATATT3xFfGF0xxxxxxxxxxxxxxxxxxxxxxxxx
JIRA_DOMAIN=yourcompany.atlassian.net
JIRA_EMAIL=your-email@company.com

# Linear (modern issue tracking) - Alternative to Jira
LINEAR_API_KEY=lin_api_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
LINEAR_TEAM_ID=team-id-here  # Optional

# Confluence (documentation)
CONFLUENCE_API_TOKEN=ATATT3xFfGF0xxxxxxxxxxxxxxxxxxxxxxxxx
CONFLUENCE_DOMAIN=yourcompany.atlassian.net/wiki
CONFLUENCE_EMAIL=your-email@company.com

# ──── Alex-BA: Business Analysis ───────────────────────────────────────────────
# Requirements management, documentation, stakeholder collaboration
# 📖 Setup: docs/CREDENTIAL_SETUP.md#alex-ba
# 🔗 Notion: https://developers.notion.com/docs/create-a-notion-integration
# 🔗 Confluence: (see Sarah-PM section above)
# ⚠️  Fallback: Local markdown files with YAML frontmatter

# Notion (requirements tracking)
NOTION_API_KEY=secret_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
NOTION_DATABASE_ID=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  # Optional: 32-char ID

# Confluence credentials shared with Sarah-PM (see above)

# ──── Dr.AI-ML: Machine Learning & AI ──────────────────────────────────────────
# ML model management, experiment tracking, model deployment
# 📖 Setup: docs/CREDENTIAL_SETUP.md#dr-ai-ml
# 🔗 Hugging Face: https://huggingface.co/docs/hub/security-tokens
# 🔗 Weights & Biases: https://docs.wandb.ai/quickstart
# ⚠️  Fallback: Local model inference (slower, requires GPU)

# Hugging Face (ML models)
HUGGINGFACE_API_TOKEN=hf_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# Weights & Biases (experiment tracking)
WANDB_API_KEY=local-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
WANDB_PROJECT=my-ml-project  # Optional: Default project name

# Vertex AI credentials shared with core services (see above)
# OpenAI credentials for fallback (see below)

# ───────────────────────────────────────────────────────────────────────────────
# OPTIONAL SERVICES (Enable based on your needs)
# ───────────────────────────────────────────────────────────────────────────────

# ──── OpenAI (OPTIONAL - Alternative to Vertex AI) ─────────────────────────────
# OpenAI API for embeddings and analysis (use this OR Vertex AI, not both)
# Used by: Dr.AI-ML (fallback), RAG system (embeddings)
# 📖 Setup: docs/CREDENTIAL_SETUP.md#8-openai
# 🔗 Get API key: https://platform.openai.com/api-keys
# ⚠️  Paid service - monitor usage at platform.openai.com/usage
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# ──── Edge Function Deployment ─────────────────────────────────────────────────
SUPABASE_PROJECT_REF=your-project-ref
SUPABASE_ACCESS_TOKEN=your-access-token

# Embedding Configuration
USE_LOCAL_EMBEDDINGS=false
EMBEDDING_MODEL=text-embedding-3-small

# MCP Discovery Configuration
MCP_AUTO_DISCOVERY=true
MCP_DISCOVERY_INTERVAL=3600000  # 1 hour in milliseconds
MCP_DISCOVERY_DEPTH=comprehensive  # Options: basic, detailed, comprehensive

# RAG System Configuration
RAG_ENABLED=true
RAG_AUTO_INDEX=true
RAG_INDEX_INTERVAL=1800000  # 30 minutes in milliseconds

# Security Configuration
MCP_AUTH_TOKEN=your-auth-token-here
MCP_ENABLE_ENCRYPTION=true
MCP_SSL_CERT_PATH=./certs/server.crt
MCP_SSL_KEY_PATH=./certs/server.key

# Performance Configuration
OPERA_MAX_CONCURRENT_GOALS=5
OPERA_GOAL_TIMEOUT=3600000  # 1 hour in milliseconds
OPERA_RETRY_ATTEMPTS=3
OPERA_RETRY_DELAY=5000  # 5 seconds

# Logging Configuration
LOG_LEVEL=info  # Options: debug, info, warn, error
LOG_FILE_PATH=./.versatil/logs/opera-mcp.log
LOG_MAX_SIZE=10485760  # 10MB
LOG_MAX_FILES=5

# ───────────────────────────────────────────────────────────────────────────────
# PRODUCTION CONFIGURATION (For deployment to staging/production)
# ───────────────────────────────────────────────────────────────────────────────

# Security Configuration
RATE_LIMIT_WINDOW_MS=900000  # 15 minutes
RATE_LIMIT_MAX_REQUESTS=100
CORS_ORIGIN=https://yourdomain.com  # or * for all origins
CORS_CREDENTIALS=true

# Session & Authentication
# Generate with: openssl rand -base64 32
SESSION_SECRET=your-secure-random-secret-here
JWT_SECRET=your-jwt-secret-here
JWT_EXPIRATION=24h

# Cache Configuration (Redis)
REDIS_URL=redis://localhost:6379
CACHE_TTL=3600  # 1 hour in seconds

# Worker Configuration
MAX_WORKERS=4  # Adjust based on CPU cores

# Agent Configuration
MAX_AGENT_INSTANCES=10
AGENT_TIMEOUT_MS=30000

# RAG Configuration
RAG_MAX_EXAMPLES=5
RAG_SIMILARITY_THRESHOLD=0.75

# Development Mode
DEV_MODE=false
DEV_SKIP_AUTH=false
DEV_MOCK_UPDATES=false

# Integration Settings
GITHUB_TOKEN=your-github-token
N8N_API_URL=http://localhost:5678
N8N_API_KEY=your-n8n-api-key
SUPABASE_URL=your-supabase-url
SUPABASE_ANON_KEY=your-supabase-anon-key

# Chrome/Playwright MCP Configuration
CHROME_MCP_ENABLED=true
CHROME_MCP_BASE_URL=http://localhost:3000
CHROME_MCP_HEADLESS=false
CHROME_MCP_DEVTOOLS=false
CHROME_MCP_TIMEOUT=30000
CHROME_MCP_SESSION_TIMEOUT=300000
CHROME_MCP_SLOW_MO=0

# ──── Advanced GitHub Configuration ────────────────────────────────────────────
GITHUB_ENTERPRISE_URL=  # Optional: For GitHub Enterprise Server
GITHUB_CACHE_TTL=3600000  # 1 hour in milliseconds

# Playwright MCP Configuration (Official Microsoft @playwright/mcp)
PLAYWRIGHT_BROWSERS_PATH=~/.cache/ms-playwright
PLAYWRIGHT_MCP_HEADLESS=false
PLAYWRIGHT_MCP_TIMEOUT=30000

# ──── Exa Search (OPTIONAL) ────────────────────────────────────────────────────
# AI-powered web search for documentation and Stack Overflow answers
# 📖 Setup: docs/CREDENTIAL_SETUP.md#6-exa-search
# 🔗 Get API key: https://dashboard.exa.ai/api-keys
EXA_API_KEY=your-exa-api-key-here
EXA_NUM_RESULTS=10
EXA_SEARCH_TYPE=auto  # Options: neural, keyword, auto

# ──── Advanced Vertex AI Configuration ─────────────────────────────────────────
VERTEX_AI_MODEL=gemini-1.5-pro  # Options: gemini-1.5-pro, gemini-1.5-flash, gemini-1.0-pro
VERTEX_AI_TEMPERATURE=0.7
VERTEX_AI_MAX_TOKENS=2048

# ──── Advanced Supabase Configuration ──────────────────────────────────────────
SUPABASE_READ_ONLY=false  # Set to true for read-only mode
SUPABASE_PROJECT_ID=your-supabase-project-id
SUPABASE_VECTOR_DIMENSION=768  # For pgvector embeddings (default: 768)

# ──── n8n Workflow Automation (OPTIONAL) ───────────────────────────────────────
# Workflow automation platform for complex integrations
# 📖 Setup: docs/CREDENTIAL_SETUP.md#7-n8n
# 🔗 Get started: https://n8n.io/cloud/ or self-host: npm install -g n8n
N8N_BASE_URL=http://localhost:5678
N8N_API_KEY=your-n8n-api-key-here
N8N_WEBHOOK_URL=http://localhost:5678/webhook

# ──── Semgrep Security Scanning (OPTIONAL) ─────────────────────────────────────
# Static code analysis for security vulnerabilities
# 📖 Setup: docs/CREDENTIAL_SETUP.md#5-semgrep
# 🔗 Get API key: https://semgrep.dev/login (optional - works without it)
# ⚠️  Fallback: Local Semgrep binary + pattern-based rules
SEMGREP_API_KEY=your-semgrep-api-key-here
SEMGREP_APP_URL=https://semgrep.dev
SEMGREP_TIMEOUT=30000  # 30 seconds
SEMGREP_CONFIG=auto  # Options: auto, p/security-audit, p/owasp-top-ten, custom

# ──── Sentry Error Monitoring (OPTIONAL) ───────────────────────────────────────
# Error tracking and performance monitoring
# 📖 Setup: docs/CREDENTIAL_SETUP.md#4-sentry
# 🔗 Get DSN: https://sentry.io/signup/ → Create Project → Settings
# ⚠️  Fallback: Generic JavaScript stack trace parser
SENTRY_DSN=your-sentry-dsn-here
SENTRY_AUTH_TOKEN=your-sentry-auth-token-here  # Optional
SENTRY_ORG=your-sentry-organization-slug  # Optional
SENTRY_PROJECT=versatil-sdlc-framework
SENTRY_ENVIRONMENT=production  # Options: production, staging, development

# Shadcn MCP Configuration
SHADCN_MCP_ENABLED=true
SHADCN_COMPONENTS_PATH=src/components/ui
SHADCN_ANALYSIS_TIMEOUT=5000

# Notification Settings
NOTIFY_ON_UPDATE=true
NOTIFY_ON_GOAL_COMPLETE=true
NOTIFY_WEBHOOK_URL=https://your-webhook-url
NOTIFY_EMAIL=admin@example.com

# Advanced Settings
OPERA_LEARNING_MODE=adaptive  # Options: disabled, basic, adaptive, aggressive
OPERA_MEMORY_LIMIT=512  # MB
OPERA_CPU_THRESHOLD=80  # Percentage
OPERA_HEALTH_CHECK_INTERVAL=60000  # 1 minute

# Feature Flags
FEATURE_SELF_HEALING=true
FEATURE_PREDICTIVE_ANALYSIS=true
FEATURE_AUTO_OPTIMIZATION=true
FEATURE_DISTRIBUTED_MODE=false
