{
  "mcpServers": {
    "github": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_TOKEN": "${GITHUB_TOKEN}"
      },
      "description": "Official GitHub MCP for repository operations (Marcus-Backend, Sarah-PM, Alex-BA)"
    },
    "playwright": {
      "command": "npx",
      "args": ["-y", "@playwright/mcp@latest"],
      "env": {
        "PLAYWRIGHT_BROWSERS_PATH": "${PLAYWRIGHT_BROWSERS_PATH}"
      },
      "description": "Official Microsoft Playwright MCP for browser automation (Maria-QA, James-Frontend)"
    },
    "supabase": {
      "command": "npx",
      "args": ["-y", "supabase-mcp"],
      "env": {
        "SUPABASE_URL": "${SUPABASE_URL}",
        "SUPABASE_ANON_KEY": "${SUPABASE_ANON_KEY}",
        "SUPABASE_SERVICE_KEY": "${SUPABASE_SERVICE_KEY}"
      },
      "description": "Supabase MCP for database and vector operations (Marcus-Backend, Dr.AI-ML)"
    },
    "gitmcp": {
      "command": "npx",
      "args": ["-y", "mcp-remote", "https://gitmcp.io/docs"],
      "description": "GitMCP for GitHub repository documentation access (Alex-BA, Marcus, James, Dr.AI-ML)"
    },
    "semgrep": {
      "command": "npx",
      "args": ["-y", "semgrep-mcp"],
      "env": {
        "SEMGREP_API_KEY": "${SEMGREP_API_KEY}",
        "SEMGREP_APP_URL": "${SEMGREP_APP_URL}"
      },
      "description": "Semgrep MCP for security scanning (Marcus-Backend, Maria-QA, Dr.AI-ML)"
    },
    "sentry": {
      "command": "npx",
      "args": ["-y", "sentry-mcp-stdio"],
      "env": {
        "SENTRY_DSN": "${SENTRY_DSN}",
        "SENTRY_AUTH_TOKEN": "${SENTRY_AUTH_TOKEN}",
        "SENTRY_ORG": "${SENTRY_ORG}"
      },
      "description": "Sentry MCP for error monitoring with AI-powered analysis (Maria-QA, Marcus, Sarah-PM)"
    },
    "exa": {
      "command": "npx",
      "args": ["-y", "exa-mcp-server"],
      "env": {
        "EXA_API_KEY": "${EXA_API_KEY}"
      },
      "description": "Official Exa Labs MCP for AI-powered search and research (Alex-BA, Dr.AI-ML)"
    },
    "vertex-ai": {
      "command": "npx",
      "args": ["-y", "vertex-ai-mcp-server"],
      "env": {
        "GOOGLE_CLOUD_PROJECT": "${GOOGLE_CLOUD_PROJECT}",
        "GOOGLE_CLOUD_LOCATION": "${GOOGLE_CLOUD_LOCATION}",
        "GOOGLE_APPLICATION_CREDENTIALS": "${GOOGLE_APPLICATION_CREDENTIALS}"
      },
      "description": "Google Cloud Vertex AI MCP with Gemini models (Dr.AI-ML, Marcus-Backend)"
    },
    "n8n": {
      "command": "npx",
      "args": ["-y", "n8n-nodes-mcp"],
      "env": {
        "N8N_BASE_URL": "${N8N_BASE_URL}",
        "N8N_API_KEY": "${N8N_API_KEY}"
      },
      "description": "n8n MCP for workflow automation (Sarah-PM, Marcus, Maria-QA)"
    },
    "shadcn": {
      "command": "node",
      "args": ["./bin/versatil-mcp.js"],
      "env": {
        "SHADCN_MCP_ENABLED": "${SHADCN_MCP_ENABLED}",
        "SHADCN_COMPONENTS_PATH": "${SHADCN_COMPONENTS_PATH}"
      },
      "description": "Shadcn MCP for component library integration (James-Frontend)"
    },
    "ant-design": {
      "command": "node",
      "args": ["./bin/versatil-mcp.js"],
      "env": {
        "ANT_DESIGN_TOKEN": "${ANT_DESIGN_TOKEN}"
      },
      "description": "Ant Design MCP for React component system (James-Frontend)"
    },
    "claude-code-mcp": {
      "command": "npx",
      "args": ["-y", "@steipete/claude-code-mcp@latest"],
      "env": {
        "MCP_CLAUDE_DEBUG": "${MCP_CLAUDE_DEBUG}"
      },
      "description": "Enhanced Claude Code integration (All agents)"
    }
  },
  "documentation_access": {
    "claude_cookbooks": {
      "description": "Claude official cookbooks with Memory Tool, Context Editing, and tool use examples",
      "access_method": "github MCP server",
      "repository": "anthropics/claude-cookbooks",
      "local_clone": "~/.versatil/docs/claude-cookbooks/",
      "usage": "Read local files or use GitHub MCP for real-time access"
    },
    "claude_official_docs": {
      "description": "Claude official documentation via WebFetch",
      "access_method": "WebFetch tool",
      "base_url": "https://docs.claude.com/en/docs",
      "usage": "WebFetch('https://docs.claude.com/en/docs/...')"
    }
  },
  "health_check": {
    "enabled": true,
    "interval": 60000,
    "timeout": 5000,
    "retry_attempts": 3
  },
  "isolation": {
    "credentials_location": "~/.versatil/.env",
    "project_directory_forbidden": [
      ".env",
      ".versatil/",
      "versatil/",
      ".versatil-memory/",
      ".versatil-logs/"
    ]
  }
}
