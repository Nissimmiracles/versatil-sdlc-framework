# ═══════════════════════════════════════════════════════════════════════════════
# VERSATIL Framework - MCP Credentials Template
# ═══════════════════════════════════════════════════════════════════════════════
#
# 🔐 IMPORTANT: This file should be copied to ~/.versatil/.env (NOT project directory)
#
#   cp templates/mcp/.env.mcp.template ~/.versatil/.env
#   chmod 600 ~/.versatil/.env
#
# 🚀 QUICK SETUP: Use the interactive wizard
#
#   npm run mcp:setup
#
# ═══════════════════════════════════════════════════════════════════════════════

# ───────────────────────────────────────────────────────────────────────────────
# CRITICAL MCPs (Required for core framework functionality)
# ───────────────────────────────────────────────────────────────────────────────

# ──── GitHub MCP (REQUIRED) ────────────────────────────────────────────────────
# Repository operations, PR automation, issue tracking
# 📖 Setup Guide: docs/mcp/individual/github-setup.md
# 🔗 Get token: https://github.com/settings/tokens/new
# Required scopes: repo, workflow, read:org
# Setup Time: ~5 minutes

GITHUB_TOKEN=ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
GITHUB_OWNER=your-username-or-org
GITHUB_REPO=your-repo-name

# Optional: GitHub Enterprise Server
GITHUB_ENTERPRISE_URL=  # Leave blank for github.com

# ──── Playwright MCP (REQUIRED) ────────────────────────────────────────────────
# Browser automation for E2E testing, visual regression
# 📖 Setup Guide: docs/mcp/individual/playwright-setup.md
# 🔗 Install browsers: npm run playwright:install
# Setup Time: ~10 minutes

PLAYWRIGHT_BROWSERS_PATH=~/.cache/ms-playwright
PLAYWRIGHT_MCP_HEADLESS=false  # Set true for CI/CD
PLAYWRIGHT_MCP_TIMEOUT=30000   # 30 seconds
PLAYWRIGHT_MCP_SLOW_MO=0       # Slow down actions (ms) for debugging

# ──── Supabase MCP (REQUIRED) ──────────────────────────────────────────────────
# Vector database for RAG memory, stores agent context
# 📖 Setup Guide: docs/mcp/individual/supabase-setup.md
# 🔗 Get credentials: https://app.supabase.com → Project Settings → API
# Setup Time: ~15 minutes

SUPABASE_URL=https://your-project.supabase.co
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
SUPABASE_SERVICE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

# Optional: Supabase project details
SUPABASE_PROJECT_REF=your-project-ref
SUPABASE_ACCESS_TOKEN=your-access-token
SUPABASE_VECTOR_DIMENSION=768  # For pgvector embeddings

# ───────────────────────────────────────────────────────────────────────────────
# HIGH-PRIORITY MCPs (Strongly recommended)
# ───────────────────────────────────────────────────────────────────────────────

# ──── GitMCP (RECOMMENDED) ─────────────────────────────────────────────────────
# GitHub repository documentation access, anti-hallucination
# 📖 Setup Guide: docs/mcp/individual/gitmcp-setup.md
# 🔗 No additional credentials (uses GitHub token)
# Setup Time: ~3 minutes

# No credentials needed - uses GITHUB_TOKEN automatically

# ──── Semgrep MCP (RECOMMENDED) ────────────────────────────────────────────────
# Security scanning for 30+ languages
# 📖 Setup Guide: docs/mcp/individual/semgrep-setup.md
# 🔗 Get API key: https://semgrep.dev/login (optional - works without it)
# Setup Time: ~5 minutes

SEMGREP_API_KEY=  # Optional - leave blank for local scanning
SEMGREP_CONFIG=auto  # Options: auto, p/security-audit, p/owasp-top-ten
SEMGREP_APP_URL=https://semgrep.dev
SEMGREP_TIMEOUT=30000  # 30 seconds

# ──── Sentry MCP (RECOMMENDED) ─────────────────────────────────────────────────
# Error monitoring, performance tracking
# 📖 Setup Guide: docs/mcp/individual/sentry-setup.md
# 🔗 Get DSN: https://sentry.io/signup/ → Create Project → Settings
# Setup Time: ~10 minutes

SENTRY_DSN=https://xxxx@xxxx.ingest.sentry.io/xxxx
SENTRY_AUTH_TOKEN=sntrys_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
SENTRY_ORG=your-org-slug
SENTRY_PROJECT=versatil-sdlc-framework
SENTRY_ENVIRONMENT=production  # Options: production, staging, development

# ───────────────────────────────────────────────────────────────────────────────
# OPTIONAL MCPs (Enable based on your needs)
# ───────────────────────────────────────────────────────────────────────────────

# ──── Exa Search MCP (OPTIONAL) ────────────────────────────────────────────────
# AI-powered web search for research and documentation
# 📖 Setup Guide: docs/mcp/individual/exa-setup.md
# 🔗 Get API key: https://dashboard.exa.ai/api-keys
# Setup Time: ~5 minutes

EXA_API_KEY=your-exa-api-key-here
EXA_NUM_RESULTS=10
EXA_SEARCH_TYPE=auto  # Options: neural, keyword, auto

# ──── Vertex AI MCP (OPTIONAL) ─────────────────────────────────────────────────
# Google Cloud AI with Gemini models
# 📖 Setup Guide: docs/mcp/individual/vertex-ai-setup.md
# 🔗 Get credentials: https://console.cloud.google.com/apis/credentials
# Setup Time: ~15 minutes

GOOGLE_CLOUD_PROJECT=your-gcp-project-id
GOOGLE_CLOUD_LOCATION=us-central1  # Options: us-central1, us-west1, europe-west1
GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account-key.json

# Model configuration
VERTEX_AI_MODEL=gemini-1.5-pro  # Options: gemini-1.5-pro, gemini-1.5-flash
VERTEX_AI_TEMPERATURE=0.7
VERTEX_AI_MAX_TOKENS=2048

# ──── n8n MCP (OPTIONAL) ───────────────────────────────────────────────────────
# Workflow automation platform (525+ nodes)
# 📖 Setup Guide: docs/mcp/individual/n8n-setup.md
# 🔗 Get started: https://n8n.io/cloud/ or self-host: npm install -g n8n
# Setup Time: ~10 minutes

N8N_BASE_URL=http://localhost:5678
N8N_API_KEY=your-n8n-api-key-here
N8N_WEBHOOK_URL=http://localhost:5678/webhook

# ──── Shadcn MCP (OPTIONAL) ────────────────────────────────────────────────────
# Component library integration
# 📖 Setup Guide: docs/mcp/individual/shadcn-setup.md
# Setup Time: ~3 minutes

SHADCN_MCP_ENABLED=true
SHADCN_COMPONENTS_PATH=src/components/ui
SHADCN_ANALYSIS_TIMEOUT=5000

# ──── Ant Design MCP (OPTIONAL) ────────────────────────────────────────────────
# React component system
# 📖 Setup Guide: docs/mcp/individual/ant-design-setup.md
# Setup Time: ~3 minutes

ANT_DESIGN_TOKEN=  # Optional: Premium features
ANT_DESIGN_THEME_CONFIG=  # Optional: Custom theme JSON

# ──── Claude Code MCP (OPTIONAL) ───────────────────────────────────────────────
# Enhanced Claude Code integration
# 📖 Setup Guide: docs/mcp/individual/claude-code-setup.md
# Setup Time: ~2 minutes

MCP_CLAUDE_DEBUG=false  # Set true for debug logging

# ───────────────────────────────────────────────────────────────────────────────
# MCP SYSTEM CONFIGURATION (Advanced)
# ───────────────────────────────────────────────────────────────────────────────

# Connection pooling
MCP_MAX_CONNECTIONS=10
MCP_CONNECTION_POOL_SIZE=5
MCP_CONNECTION_TIMEOUT=30000  # 30 seconds

# Health check configuration
MCP_HEALTH_CHECK_INTERVAL=60000  # 1 minute
MCP_HEALTH_CHECK_TIMEOUT=5000    # 5 seconds

# Caching
MCP_CACHE_ENABLED=true
MCP_CACHE_TTL=3600000  # 1 hour
MCP_CACHE_MAX_SIZE=100  # 100 entries

# Logging
MCP_LOG_LEVEL=info  # Options: debug, info, warn, error
MCP_LOG_FILE=~/.versatil/logs/mcp.log
MCP_LOG_MAX_SIZE=10485760  # 10MB
MCP_LOG_MAX_FILES=5

# Security
MCP_AUTH_TOKEN=  # Optional: MCP authentication token
MCP_ENABLE_ENCRYPTION=true
MCP_SSL_CERT_PATH=  # Optional: Custom SSL certificate
MCP_SSL_KEY_PATH=   # Optional: Custom SSL key

# Performance
MCP_PARALLEL_REQUESTS=true
MCP_REQUEST_TIMEOUT=30000  # 30 seconds
MCP_RETRY_ATTEMPTS=3
MCP_RETRY_DELAY=5000  # 5 seconds

# ───────────────────────────────────────────────────────────────────────────────
# FRAMEWORK INTEGRATION
# ───────────────────────────────────────────────────────────────────────────────

# Proactive agent system
VERSATIL_RULES_ENABLED=true
RULE_1_PARALLEL_EXECUTION=true
RULE_2_STRESS_TESTING=true
RULE_3_DAILY_AUDIT=true
RULE_4_ONBOARDING=true
RULE_5_RELEASES=true

# Agent configuration
MAX_AGENT_INSTANCES=10
AGENT_TIMEOUT_MS=30000

# RAG memory configuration
RAG_ENABLED=true
RAG_AUTO_INDEX=true
RAG_INDEX_INTERVAL=1800000  # 30 minutes
RAG_MAX_EXAMPLES=5
RAG_SIMILARITY_THRESHOLD=0.75

# ═══════════════════════════════════════════════════════════════════════════════
# SETUP CHECKLIST
# ═══════════════════════════════════════════════════════════════════════════════
#
# After configuring credentials:
#
# 1. ✅ Move this file to ~/.versatil/.env
#    cp templates/mcp/.env.mcp.template ~/.versatil/.env
#
# 2. ✅ Secure permissions
#    chmod 600 ~/.versatil/.env
#
# 3. ✅ Validate configuration
#    npm run validate:isolation
#
# 4. ✅ Run health check
#    npm run mcp:health
#
# 5. ✅ Test integration
#    npm run test:integration
#
# 6. ✅ Start proactive daemon
#    versatil-daemon start
#
# ═══════════════════════════════════════════════════════════════════════════════
