name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Version Consistency Check
        run: node scripts/version-check.cjs
        continue-on-error: false

      - name: Pre-Deployment Validation
        run: node scripts/intelligent-deployment-validator.cjs
        continue-on-error: false

      - name: Run unit tests
        run: npm run test:unit
        # TODO: Re-enable full test suite after fixing integration test hangs
        # run: npm test

      - name: Build
        run: npm run build

      - name: Extract version from tag
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$TAG" >> $GITHUB_OUTPUT
          echo "TAG=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        continue-on-error: true
        run: |
          # Generate changelog from commits since last tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            # First release
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges)
          else
            # Subsequent releases
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges)
          fi

          # Save to file
          echo "$CHANGELOG" > CHANGELOG.txt

          # Also categorize commits
          echo "## Breaking Changes" > RELEASE_NOTES.md
          git log ${PREV_TAG}..HEAD --grep="BREAKING CHANGE" --pretty=format:"* %s (%h)" --no-merges >> RELEASE_NOTES.md || echo "None" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "## Features" >> RELEASE_NOTES.md
          git log ${PREV_TAG}..HEAD --grep="^feat" --pretty=format:"* %s (%h)" --no-merges >> RELEASE_NOTES.md || echo "None" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "## Bug Fixes" >> RELEASE_NOTES.md
          git log ${PREV_TAG}..HEAD --grep="^fix" --pretty=format:"* %s (%h)" --no-merges >> RELEASE_NOTES.md || echo "None" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "## Performance Improvements" >> RELEASE_NOTES.md
          git log ${PREV_TAG}..HEAD --grep="^perf" --pretty=format:"* %s (%h)" --no-merges >> RELEASE_NOTES.md || echo "None" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "## Documentation" >> RELEASE_NOTES.md
          git log ${PREV_TAG}..HEAD --grep="^docs" --pretty=format:"* %s (%h)" --no-merges >> RELEASE_NOTES.md || echo "None" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "## Full Changelog" >> RELEASE_NOTES.md
          echo "$CHANGELOG" >> RELEASE_NOTES.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.TAG }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.TAG, '-') }}
          files: |
            dist/**/*
            package.json
            README.md
            LICENSE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post-Deployment Verification
        run: node scripts/verify-deployment.cjs
        continue-on-error: false

      - name: Verify release
        run: |
          echo "âœ… Release ${{ steps.version.outputs.TAG }} created successfully"
          echo "View at: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.TAG }}"

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: release
    if: success()

    steps:
      - name: Extract version
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$TAG" >> $GITHUB_OUTPUT

      - name: Notify success
        run: |
          echo "ðŸŽ‰ Release ${{ steps.version.outputs.VERSION }} published successfully!"
          echo ""
          echo "Next steps:"
          echo "1. npm package will be published by npm-publish workflow"
          echo "2. Users can update: npm update -g versatil-sdlc-framework"
          echo "3. Or install specific version: npm install -g versatil-sdlc-framework@${{ steps.version.outputs.VERSION }}"
